
LOG550_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009038  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080091f4  080091f4  0000a1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009264  08009264  0000b020  2**0
                  CONTENTS
  4 .ARM          00000008  08009264  08009264  0000a264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800926c  0800926c  0000b020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800926c  0800926c  0000a26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009270  08009270  0000a270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08009274  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000020  08009294  0000b020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08009294  0000b600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002372c  00000000  00000000  0000b050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d56  00000000  00000000  0002e77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  000324d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001862  00000000  00000000  000343f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ecc8  00000000  00000000  00035c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002440b  00000000  00000000  0006491a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125cdd  00000000  00000000  00088d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aea02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086b8  00000000  00000000  001aea48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001b7100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000020 	.word	0x20000020
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080091dc 	.word	0x080091dc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000024 	.word	0x20000024
 80001f8:	080091dc 	.word	0x080091dc

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f001 fd92 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f834 	bl	8000560 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f8:	f000 f894 	bl	8000624 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fc32 	bl	8000d64 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000500:	f000 f8c0 	bl	8000684 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000504:	f000 f922 	bl	800074c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000508:	f000 f958 	bl	80007bc <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f996 	bl	800083c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000510:	f000 f9d4 	bl	80008bc <MX_OCTOSPI1_Init>
  MX_SPI3_Init();
 8000514:	f000 fa28 	bl	8000968 <MX_SPI3_Init>
  MX_UART4_Init();
 8000518:	f000 faea 	bl	8000af0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800051c:	f000 fb34 	bl	8000b88 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000520:	f000 fb7e 	bl	8000c20 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000524:	f000 fbca 	bl	8000cbc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000528:	f000 fc14 	bl	8000d54 <MX_USB_OTG_FS_USB_Init>
  MX_TIM16_Init();
 800052c:	f000 fa92 	bl	8000a54 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000530:	f000 fab6 	bl	8000aa0 <MX_TIM17_Init>
  MX_TIM7_Init();
 8000534:	f000 fa56 	bl	80009e4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  BSP_TSENSOR_Init();
 8000538:	f001 fc90 	bl	8001e5c <BSP_TSENSOR_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <main+0x68>)
 800053e:	f006 fed9 	bl	80072f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 8000542:	4805      	ldr	r0, [pc, #20]	@ (8000558 <main+0x6c>)
 8000544:	f006 fed6 	bl	80072f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000548:	4804      	ldr	r0, [pc, #16]	@ (800055c <main+0x70>)
 800054a:	f006 fed3 	bl	80072f4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054e:	bf00      	nop
 8000550:	e7fd      	b.n	800054e <main+0x62>
 8000552:	bf00      	nop
 8000554:	20000284 	.word	0x20000284
 8000558:	200002d0 	.word	0x200002d0
 800055c:	20000238 	.word	0x20000238

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b096      	sub	sp, #88	@ 0x58
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2244      	movs	r2, #68	@ 0x44
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f008 fe08 	bl	8009184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000582:	2000      	movs	r0, #0
 8000584:	f005 f918 	bl	80057b8 <HAL_PWREx_ControlVoltageScaling>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800058e:	f000 fe55 	bl	800123c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000592:	f005 f8e1 	bl	8005758 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000596:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <SystemClock_Config+0xc0>)
 8000598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800059c:	4a20      	ldr	r2, [pc, #128]	@ (8000620 <SystemClock_Config+0xc0>)
 800059e:	f023 0318 	bic.w	r3, r3, #24
 80005a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005a6:	2314      	movs	r3, #20
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b6:	2360      	movs	r3, #96	@ 0x60
 80005b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005be:	2301      	movs	r3, #1
 80005c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005c6:	233c      	movs	r3, #60	@ 0x3c
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 f990 	bl	8005900 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005e6:	f000 fe29 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2303      	movs	r3, #3
 80005f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fd96 	bl	8006134 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800060e:	f000 fe15 	bl	800123c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000612:	f006 fb7d 	bl	8006d10 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000616:	bf00      	nop
 8000618:	3758      	adds	r7, #88	@ 0x58
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0a6      	sub	sp, #152	@ 0x98
 8000628:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2294      	movs	r2, #148	@ 0x94
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f008 fda7 	bl	8009184 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000636:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800063a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800063c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000644:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000648:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800064a:	2301      	movs	r3, #1
 800064c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000652:	2318      	movs	r3, #24
 8000654:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000662:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8000666:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f006 f820 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000676:	f000 fde1 	bl	800123c <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3798      	adds	r7, #152	@ 0x98
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <MX_ADC1_Init+0xbc>)
 800069c:	4a29      	ldr	r2, [pc, #164]	@ (8000744 <MX_ADC1_Init+0xc0>)
 800069e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006ba:	2204      	movs	r2, #4
 80006bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006de:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006e4:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ec:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006f2:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fa:	4811      	ldr	r0, [pc, #68]	@ (8000740 <MX_ADC1_Init+0xbc>)
 80006fc:	f001 feee 	bl	80024dc <HAL_ADC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000706:	f000 fd99 	bl	800123c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_ADC1_Init+0xc4>)
 800070c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070e:	2306      	movs	r3, #6
 8000710:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000716:	237f      	movs	r3, #127	@ 0x7f
 8000718:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071a:	2304      	movs	r3, #4
 800071c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	@ (8000740 <MX_ADC1_Init+0xbc>)
 8000728:	f002 faa8 	bl	8002c7c <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000732:	f000 fd83 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000003c 	.word	0x2000003c
 8000744:	50040000 	.word	0x50040000
 8000748:	04300002 	.word	0x04300002

0800074c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 8000752:	4a19      	ldr	r2, [pc, #100]	@ (80007b8 <MX_DFSDM1_Init+0x6c>)
 8000754:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 8000758:	2201      	movs	r2, #1
 800075a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 8000764:	2202      	movs	r2, #2
 8000766:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 8000782:	2204      	movs	r2, #4
 8000784:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 800078e:	2201      	movs	r2, #1
 8000790:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 800079a:	2200      	movs	r2, #0
 800079c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_DFSDM1_Init+0x68>)
 80007a0:	f003 f832 	bl	8003808 <HAL_DFSDM_ChannelInit>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80007aa:	f000 fd47 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000a4 	.word	0x200000a4
 80007b8:	40016040 	.word	0x40016040

080007bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <MX_I2C1_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000834 <MX_I2C1_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_I2C1_Init+0x74>)
 80007c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000838 <MX_I2C1_Init+0x7c>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007cc:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d2:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <MX_I2C1_Init+0x74>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_I2C1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_I2C1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f6:	480e      	ldr	r0, [pc, #56]	@ (8000830 <MX_I2C1_Init+0x74>)
 80007f8:	f003 fc82 	bl	8004100 <HAL_I2C_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000802:	f000 fd1b 	bl	800123c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4809      	ldr	r0, [pc, #36]	@ (8000830 <MX_I2C1_Init+0x74>)
 800080a:	f004 fa33 	bl	8004c74 <HAL_I2CEx_ConfigAnalogFilter>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000814:	f000 fd12 	bl	800123c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000818:	2100      	movs	r1, #0
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_I2C1_Init+0x74>)
 800081c:	f004 fa75 	bl	8004d0a <HAL_I2CEx_ConfigDigitalFilter>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 fd09 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000dc 	.word	0x200000dc
 8000834:	40005400 	.word	0x40005400
 8000838:	30a175ab 	.word	0x30a175ab

0800083c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <MX_I2C2_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	@ (80008b8 <MX_I2C2_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000854:	2201      	movs	r2, #1
 8000856:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000876:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000878:	f003 fc42 	bl	8004100 <HAL_I2C_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000882:	f000 fcdb 	bl	800123c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000886:	2100      	movs	r1, #0
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800088a:	f004 f9f3 	bl	8004c74 <HAL_I2CEx_ConfigAnalogFilter>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000894:	f000 fcd2 	bl	800123c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000898:	2100      	movs	r1, #0
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800089c:	f004 fa35 	bl	8004d0a <HAL_I2CEx_ConfigDigitalFilter>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 fcc9 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000130 	.word	0x20000130
 80008b4:	40005800 	.word	0x40005800
 80008b8:	30a175ab 	.word	0x30a175ab

080008bc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008d0:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 80008d2:	4a24      	ldr	r2, [pc, #144]	@ (8000964 <MX_OCTOSPI1_Init+0xa8>)
 80008d4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008d6:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 80008d8:	2201      	movs	r2, #1
 80008da:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008dc:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 80008e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80008e8:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 80008ec:	2220      	movs	r2, #32
 80008ee:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 8000904:	2201      	movs	r2, #1
 8000906:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 800091c:	2208      	movs	r2, #8
 800091e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000920:	480f      	ldr	r0, [pc, #60]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 8000922:	f004 fa3f 	bl	8004da4 <HAL_OSPI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 800092c:	f000 fc86 	bl	800123c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000938:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800093c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	@ (8000960 <MX_OCTOSPI1_Init+0xa4>)
 8000948:	f004 fae6 	bl	8004f18 <HAL_OSPIM_Config>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000952:	f000 fc73 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000184 	.word	0x20000184
 8000964:	a0001000 	.word	0xa0001000

08000968 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_SPI3_Init+0x74>)
 800096e:	4a1c      	ldr	r2, [pc, #112]	@ (80009e0 <MX_SPI3_Init+0x78>)
 8000970:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_SPI3_Init+0x74>)
 8000974:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000978:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_SPI3_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_SPI3_Init+0x74>)
 8000982:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000986:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_SPI3_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_SPI3_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_SPI3_Init+0x74>)
 8000996:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800099a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_SPI3_Init+0x74>)
 800099e:	2208      	movs	r2, #8
 80009a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_SPI3_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_SPI3_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_SPI3_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_SPI3_Init+0x74>)
 80009b6:	2207      	movs	r2, #7
 80009b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_SPI3_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_SPI3_Init+0x74>)
 80009c2:	2208      	movs	r2, #8
 80009c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_SPI3_Init+0x74>)
 80009c8:	f006 fb9a 	bl	8007100 <HAL_SPI_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009d2:	f000 fc33 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200001d4 	.word	0x200001d4
 80009e0:	40003c00 	.word	0x40003c00

080009e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009f4:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <MX_TIM7_Init+0x68>)
 80009f6:	4a16      	ldr	r2, [pc, #88]	@ (8000a50 <MX_TIM7_Init+0x6c>)
 80009f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1919;
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_TIM7_Init+0x68>)
 80009fc:	f240 727f 	movw	r2, #1919	@ 0x77f
 8000a00:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_TIM7_Init+0x68>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62499;
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <MX_TIM7_Init+0x68>)
 8000a0a:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000a0e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_TIM7_Init+0x68>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a16:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <MX_TIM7_Init+0x68>)
 8000a18:	f006 fc15 	bl	8007246 <HAL_TIM_Base_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000a22:	f000 fc0b 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	@ (8000a4c <MX_TIM7_Init+0x68>)
 8000a34:	f006 fea4 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000a3e:	f000 fbfd 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000238 	.word	0x20000238
 8000a50:	40001400 	.word	0x40001400

08000a54 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_TIM16_Init+0x44>)
 8000a5a:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <MX_TIM16_Init+0x48>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 29999;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_TIM16_Init+0x44>)
 8000a60:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000a64:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_TIM16_Init+0x44>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <MX_TIM16_Init+0x44>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_TIM16_Init+0x44>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a78:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <MX_TIM16_Init+0x44>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_TIM16_Init+0x44>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_TIM16_Init+0x44>)
 8000a86:	f006 fbde 	bl	8007246 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000a90:	f000 fbd4 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000284 	.word	0x20000284
 8000a9c:	40014400 	.word	0x40014400

08000aa0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <MX_TIM17_Init+0x48>)
 8000aa6:	4a11      	ldr	r2, [pc, #68]	@ (8000aec <MX_TIM17_Init+0x4c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1249;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_TIM17_Init+0x48>)
 8000aac:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000ab0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <MX_TIM17_Init+0x48>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_TIM17_Init+0x48>)
 8000aba:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000abe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_TIM17_Init+0x48>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_TIM17_Init+0x48>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_TIM17_Init+0x48>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_TIM17_Init+0x48>)
 8000ad4:	f006 fbb7 	bl	8007246 <HAL_TIM_Base_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000ade:	f000 fbad 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200002d0 	.word	0x200002d0
 8000aec:	40014800 	.word	0x40014800

08000af0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	@ (8000b84 <MX_UART4_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b3a:	f006 fec7 	bl	80078cc <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 fb7a 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b4c:	f008 fa4f 	bl	8008fee <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 fb71 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b5e:	f008 fa84 	bl	800906a <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 fb68 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b6e:	f008 fa05 	bl	8008f7c <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 fb60 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000031c 	.word	0x2000031c
 8000b84:	40004c00 	.word	0x40004c00

08000b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <MX_USART1_UART_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bd2:	f006 fe7b 	bl	80078cc <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 fb2e 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000be4:	f008 fa03 	bl	8008fee <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 fb25 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bf6:	f008 fa38 	bl	800906a <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 fb1c 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000c06:	f008 f9b9 	bl	8008f7c <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 fb14 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200003b0 	.word	0x200003b0
 8000c1c:	40013800 	.word	0x40013800

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b23      	ldr	r3, [pc, #140]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c26:	4a24      	ldr	r2, [pc, #144]	@ (8000cb8 <MX_USART2_UART_Init+0x98>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c4c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c50:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c64:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6a:	4812      	ldr	r0, [pc, #72]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c6c:	f006 fe2e 	bl	80078cc <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c76:	f000 fae1 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c7e:	f008 f9b6 	bl	8008fee <HAL_UARTEx_SetTxFifoThreshold>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c88:	f000 fad8 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c90:	f008 f9eb 	bl	800906a <HAL_UARTEx_SetRxFifoThreshold>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c9a:	f000 facf 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000ca0:	f008 f96c 	bl	8008f7c <HAL_UARTEx_DisableFifoMode>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000caa:	f000 fac7 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000444 	.word	0x20000444
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc2:	4a23      	ldr	r2, [pc, #140]	@ (8000d50 <MX_USART3_UART_Init+0x94>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d04:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d06:	f006 fde1 	bl	80078cc <HAL_UART_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d10:	f000 fa94 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d18:	f008 f969 	bl	8008fee <HAL_UARTEx_SetTxFifoThreshold>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f000 fa8b 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4808      	ldr	r0, [pc, #32]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d2a:	f008 f99e 	bl	800906a <HAL_UARTEx_SetRxFifoThreshold>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d34:	f000 fa82 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d3a:	f008 f91f 	bl	8008f7c <HAL_UARTEx_DisableFifoMode>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f000 fa7a 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200004d8 	.word	0x200004d8
 8000d50:	40004800 	.word	0x40004800

08000d54 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	@ 0x30
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d7a:	4b9f      	ldr	r3, [pc, #636]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	4a9e      	ldr	r2, [pc, #632]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000d80:	f043 0310 	orr.w	r3, r3, #16
 8000d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d86:	4b9c      	ldr	r3, [pc, #624]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	4b99      	ldr	r3, [pc, #612]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	4a98      	ldr	r2, [pc, #608]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9e:	4b96      	ldr	r3, [pc, #600]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	4b93      	ldr	r3, [pc, #588]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	4a92      	ldr	r2, [pc, #584]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db6:	4b90      	ldr	r3, [pc, #576]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a8c      	ldr	r2, [pc, #560]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b8a      	ldr	r3, [pc, #552]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b87      	ldr	r3, [pc, #540]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	4a86      	ldr	r2, [pc, #536]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de6:	4b84      	ldr	r3, [pc, #528]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	4b81      	ldr	r3, [pc, #516]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a80      	ldr	r2, [pc, #512]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b7e      	ldr	r3, [pc, #504]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f240 1105 	movw	r1, #261	@ 0x105
 8000e10:	487a      	ldr	r0, [pc, #488]	@ (8000ffc <MX_GPIO_Init+0x298>)
 8000e12:	f003 f945 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000e16:	2200      	movs	r2, #0
 8000e18:	f248 113c 	movw	r1, #33084	@ 0x813c
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f003 f93e 	bl	80040a0 <HAL_GPIO_WritePin>
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e24:	2200      	movs	r2, #0
 8000e26:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000e2a:	4875      	ldr	r0, [pc, #468]	@ (8001000 <MX_GPIO_Init+0x29c>)
 8000e2c:	f003 f938 	bl	80040a0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f242 0183 	movw	r1, #8323	@ 0x2083
 8000e36:	4873      	ldr	r0, [pc, #460]	@ (8001004 <MX_GPIO_Init+0x2a0>)
 8000e38:	f003 f932 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e42:	4871      	ldr	r0, [pc, #452]	@ (8001008 <MX_GPIO_Init+0x2a4>)
 8000e44:	f003 f92c 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e48:	f240 1305 	movw	r3, #261	@ 0x105
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4866      	ldr	r0, [pc, #408]	@ (8000ffc <MX_GPIO_Init+0x298>)
 8000e62:	f002 fe99 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e66:	237a      	movs	r3, #122	@ 0x7a
 8000e68:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4860      	ldr	r0, [pc, #384]	@ (8000ffc <MX_GPIO_Init+0x298>)
 8000e7c:	f002 fe8c 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e80:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	485c      	ldr	r0, [pc, #368]	@ (8001008 <MX_GPIO_Init+0x2a4>)
 8000e98:	f002 fe7e 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin PA5
                           SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000e9c:	f248 133c 	movw	r3, #33084	@ 0x813c
 8000ea0:	61fb      	str	r3, [r7, #28]
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb8:	f002 fe6e 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000ebc:	23c0      	movs	r3, #192	@ 0xc0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eda:	f002 fe5d 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4843      	ldr	r0, [pc, #268]	@ (8001000 <MX_GPIO_Init+0x29c>)
 8000ef4:	f002 fe50 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	483b      	ldr	r0, [pc, #236]	@ (8001000 <MX_GPIO_Init+0x29c>)
 8000f14:	f002 fe40 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f18:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000f1c:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4833      	ldr	r0, [pc, #204]	@ (8001000 <MX_GPIO_Init+0x29c>)
 8000f32:	f002 fe31 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f36:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8000f3a:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	482d      	ldr	r0, [pc, #180]	@ (8001004 <MX_GPIO_Init+0x2a0>)
 8000f4e:	f002 fe23 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f52:	f242 0383 	movw	r3, #8323	@ 0x2083
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4826      	ldr	r0, [pc, #152]	@ (8001004 <MX_GPIO_Init+0x2a0>)
 8000f6c:	f002 fe14 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin PC9 */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|GPIO_PIN_9;
 8000f70:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	481f      	ldr	r0, [pc, #124]	@ (8001008 <MX_GPIO_Init+0x2a4>)
 8000f8a:	f002 fe05 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa6:	f002 fdf7 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000faa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fca:	f002 fde5 	bl	8003b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2017      	movs	r0, #23
 8000fd4:	f002 fbe1 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fd8:	2017      	movs	r0, #23
 8000fda:	f002 fbfa 	bl	80037d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f002 fbd9 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f002 fbf2 	bl	80037d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fee:	bf00      	nop
 8000ff0:	3730      	adds	r7, #48	@ 0x30
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48001000 	.word	0x48001000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000c00 	.word	0x48000c00
 8001008:	48000800 	.word	0x48000800

0800100c <HAL_GPIO_EXTI_Callback>:
#define TEMPERATURE_CHANNEL_MASK  0x01  // 0000 0001
#define SOUND_CHANNEL_MASK  0xFE  // 1111 1110
volatile uint8_t uart_transmission_in_processing = 0; // 0 when uart is not currently sending data

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800101c:	d10a      	bne.n	8001034 <HAL_GPIO_EXTI_Callback+0x28>
	  adc_sampling_1000hz = !adc_sampling_1000hz;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <HAL_GPIO_EXTI_Callback+0x34>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf0c      	ite	eq
 8001028:	2301      	moveq	r3, #1
 800102a:	2300      	movne	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <HAL_GPIO_EXTI_Callback+0x34>)
 8001032:	701a      	strb	r2, [r3, #0]
  }
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	20000001 	.word	0x20000001

08001044 <HAL_TIM_PeriodElapsedCallback>:

volatile  GPIO_PinState led_1_2_state = GPIO_PIN_RESET;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if (htim == &htim16 && acquisition_ON)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a42      	ldr	r2, [pc, #264]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d12c      	bne.n	80010ae <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001054:	4b41      	ldr	r3, [pc, #260]	@ (800115c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d027      	beq.n	80010ae <HAL_TIM_PeriodElapsedCallback+0x6a>
  {
	  sampling_rate_divider = !sampling_rate_divider;
 800105e:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	461a      	mov	r2, r3
 8001070:	4b3b      	ldr	r3, [pc, #236]	@ (8001160 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001072:	701a      	strb	r2, [r3, #0]

	  if(!adc_sampling_1000hz || sampling_rate_divider)
 8001074:	4b3b      	ldr	r3, [pc, #236]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x44>
 800107e:	4b38      	ldr	r3, [pc, #224]	@ (8001160 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d062      	beq.n	800114e <HAL_TIM_PeriodElapsedCallback+0x10a>
	  {
		if(!adc_result_cleared)
 8001088:	4b37      	ldr	r3, [pc, #220]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d106      	bne.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001098:	4834      	ldr	r0, [pc, #208]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800109a:	f003 f801 	bl	80040a0 <HAL_GPIO_WritePin>
	  if(!adc_sampling_1000hz || sampling_rate_divider)
 800109e:	e056      	b.n	800114e <HAL_TIM_PeriodElapsedCallback+0x10a>
		}
		else
		{
			adc_result_cleared = 0;
 80010a0:	4b31      	ldr	r3, [pc, #196]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 80010a6:	4832      	ldr	r0, [pc, #200]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80010a8:	f001 fb5e 	bl	8002768 <HAL_ADC_Start_IT>
	  if(!adc_sampling_1000hz || sampling_rate_divider)
 80010ac:	e04f      	b.n	800114e <HAL_TIM_PeriodElapsedCallback+0x10a>
		}
	  }
  }
  else if (htim == &htim17)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d123      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0xba>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_1_2_state);
 80010b6:	4b30      	ldr	r3, [pc, #192]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	2120      	movs	r1, #32
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c4:	f002 ffec 	bl	80040a0 <HAL_GPIO_WritePin>
	  if(acquisition_ON)
 80010c8:	4b24      	ldr	r3, [pc, #144]	@ (800115c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d008      	beq.n	80010e4 <HAL_TIM_PeriodElapsedCallback+0xa0>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, led_1_2_state);
 80010d2:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010de:	4827      	ldr	r0, [pc, #156]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80010e0:	f002 ffde 	bl	80040a0 <HAL_GPIO_WritePin>

	  if(led_1_2_state == GPIO_PIN_SET)
 80010e4:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d103      	bne.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0xb2>
		  led_1_2_state = GPIO_PIN_RESET;
 80010ee:	4b22      	ldr	r3, [pc, #136]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
	  {
		  //uart_transmission_in_processing = 1;
		  //HAL_UART_Transmit_IT(&huart1, &encoded_temp,1);
	  }
  }
}
 80010f4:	e02c      	b.n	8001150 <HAL_TIM_PeriodElapsedCallback+0x10c>
	  else led_1_2_state = GPIO_PIN_SET;
 80010f6:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
}
 80010fc:	e028      	b.n	8001150 <HAL_TIM_PeriodElapsedCallback+0x10c>
  else if (htim == &htim7)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a1f      	ldr	r2, [pc, #124]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d124      	bne.n	8001150 <HAL_TIM_PeriodElapsedCallback+0x10c>
	  temp_value = BSP_TSENSOR_ReadTemp();
 8001106:	f000 fec5 	bl	8001e94 <BSP_TSENSOR_ReadTemp>
 800110a:	eef0 7a40 	vmov.f32	s15, s0
 800110e:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001110:	edc3 7a00 	vstr	s15, [r3]
	  uint8_t encoded_temp = (uint8_t) (temp_value/2);
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001116:	ed93 7a00 	vldr	s14, [r3]
 800111a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800111e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001126:	edc7 7a00 	vstr	s15, [r7]
 800112a:	783b      	ldrb	r3, [r7, #0]
 800112c:	73fb      	strb	r3, [r7, #15]
	  encoded_temp |= TEMPERATURE_CHANNEL_MASK;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
	  if(uart_transmission_in_processing == 1)
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d107      	bne.n	8001150 <HAL_TIM_PeriodElapsedCallback+0x10c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001146:	4809      	ldr	r0, [pc, #36]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001148:	f002 ffaa 	bl	80040a0 <HAL_GPIO_WritePin>
}
 800114c:	e000      	b.n	8001150 <HAL_TIM_PeriodElapsedCallback+0x10c>
	  if(!adc_sampling_1000hz || sampling_rate_divider)
 800114e:	bf00      	nop
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000284 	.word	0x20000284
 800115c:	20000002 	.word	0x20000002
 8001160:	20000570 	.word	0x20000570
 8001164:	20000001 	.word	0x20000001
 8001168:	20000000 	.word	0x20000000
 800116c:	48000800 	.word	0x48000800
 8001170:	2000003c 	.word	0x2000003c
 8001174:	200002d0 	.word	0x200002d0
 8001178:	20000579 	.word	0x20000579
 800117c:	48000400 	.word	0x48000400
 8001180:	20000238 	.word	0x20000238
 8001184:	20000574 	.word	0x20000574
 8001188:	20000578 	.word	0x20000578

0800118c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* h)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

	if(h == &hadc1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a18      	ldr	r2, [pc, #96]	@ (80011f8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d128      	bne.n	80011ee <HAL_ADC_ConvCpltCallback+0x62>
	{
		adc_result = HAL_ADC_GetValue(&hadc1);
 800119c:	4816      	ldr	r0, [pc, #88]	@ (80011f8 <HAL_ADC_ConvCpltCallback+0x6c>)
 800119e:	f001 fb97 	bl	80028d0 <HAL_ADC_GetValue>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a15      	ldr	r2, [pc, #84]	@ (80011fc <HAL_ADC_ConvCpltCallback+0x70>)
 80011a6:	6013      	str	r3, [r2, #0]

		uint8_t encoded_sound = (uint8_t) (adc_result/2);
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <HAL_ADC_ConvCpltCallback+0x70>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	085b      	lsrs	r3, r3, #1
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]
		encoded_sound &= SOUND_CHANNEL_MASK;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	f023 0301 	bic.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	73fb      	strb	r3, [r7, #15]
		if(uart_transmission_in_processing == 1)
 80011bc:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <HAL_ADC_ConvCpltCallback+0x74>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d106      	bne.n	80011d4 <HAL_ADC_ConvCpltCallback+0x48>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011cc:	480d      	ldr	r0, [pc, #52]	@ (8001204 <HAL_ADC_ConvCpltCallback+0x78>)
 80011ce:	f002 ff67 	bl	80040a0 <HAL_GPIO_WritePin>
			uart_transmission_in_processing = 1;
			HAL_UART_Transmit_IT(&huart1, &encoded_sound,1);
			adc_result_cleared = 1;
		}
	}
}
 80011d2:	e00c      	b.n	80011ee <HAL_ADC_ConvCpltCallback+0x62>
			uart_transmission_in_processing = 1;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_ADC_ConvCpltCallback+0x74>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, &encoded_sound,1);
 80011da:	f107 030f 	add.w	r3, r7, #15
 80011de:	2201      	movs	r2, #1
 80011e0:	4619      	mov	r1, r3
 80011e2:	4809      	ldr	r0, [pc, #36]	@ (8001208 <HAL_ADC_ConvCpltCallback+0x7c>)
 80011e4:	f006 fbc2 	bl	800796c <HAL_UART_Transmit_IT>
			adc_result_cleared = 1;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <HAL_ADC_ConvCpltCallback+0x80>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000003c 	.word	0x2000003c
 80011fc:	2000056c 	.word	0x2000056c
 8001200:	20000578 	.word	0x20000578
 8001204:	48000800 	.word	0x48000800
 8001208:	200003b0 	.word	0x200003b0
 800120c:	20000000 	.word	0x20000000

08001210 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a06      	ldr	r2, [pc, #24]	@ (8001234 <HAL_UART_TxCpltCallback+0x24>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d102      	bne.n	8001226 <HAL_UART_TxCpltCallback+0x16>
	{
		uart_transmission_in_processing = 0;
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <HAL_UART_TxCpltCallback+0x28>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
	}
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200003b0 	.word	0x200003b0
 8001238:	20000578 	.word	0x20000578

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <Error_Handler+0x8>

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <HAL_MspInit+0x44>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001252:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <HAL_MspInit+0x44>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6613      	str	r3, [r2, #96]	@ 0x60
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <HAL_MspInit+0x44>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <HAL_MspInit+0x44>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126a:	4a08      	ldr	r2, [pc, #32]	@ (800128c <HAL_MspInit+0x44>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001270:	6593      	str	r3, [r2, #88]	@ 0x58
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_MspInit+0x44>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <HAL_ADC_MspInit+0x84>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d12b      	bne.n	800130a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012b2:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_ADC_MspInit+0x88>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <HAL_ADC_MspInit+0x88>)
 80012b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <HAL_ADC_MspInit+0x88>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <HAL_ADC_MspInit+0x88>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <HAL_ADC_MspInit+0x88>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <HAL_ADC_MspInit+0x88>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80012e2:	233f      	movs	r3, #63	@ 0x3f
 80012e4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012e6:	230b      	movs	r3, #11
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4809      	ldr	r0, [pc, #36]	@ (800131c <HAL_ADC_MspInit+0x8c>)
 80012f6:	f002 fc4f 	bl	8003b98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2012      	movs	r0, #18
 8001300:	f002 fa4b 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001304:	2012      	movs	r0, #18
 8001306:	f002 fa64 	bl	80037d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	50040000 	.word	0x50040000
 8001318:	40021000 	.word	0x40021000
 800131c:	48000800 	.word	0x48000800

08001320 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0ae      	sub	sp, #184	@ 0xb8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	2294      	movs	r2, #148	@ 0x94
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f007 ff1f 	bl	8009184 <memset>
  if(DFSDM1_Init == 0)
 8001346:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d142      	bne.n	80013d4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800134e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001352:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	4618      	mov	r0, r3
 8001360:	f005 f9a6 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800136a:	f7ff ff67 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800136e:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001372:	4a1b      	ldr	r2, [pc, #108]	@ (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001374:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001378:	6613      	str	r3, [r2, #96]	@ 0x60
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a15      	ldr	r2, [pc, #84]	@ (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800138c:	f043 0310 	orr.w	r3, r3, #16
 8001390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800139e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80013a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013b8:	2306      	movs	r3, #6
 80013ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013be:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80013c6:	f002 fbe7 	bl	8003b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80013ca:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a02      	ldr	r2, [pc, #8]	@ (80013dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013d2:	6013      	str	r3, [r2, #0]
  }

}
 80013d4:	bf00      	nop
 80013d6:	37b8      	adds	r7, #184	@ 0xb8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000057c 	.word	0x2000057c
 80013e0:	40021000 	.word	0x40021000
 80013e4:	48001000 	.word	0x48001000

080013e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0b0      	sub	sp, #192	@ 0xc0
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	2294      	movs	r2, #148	@ 0x94
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f007 febb 	bl	8009184 <memset>
  if(hi2c->Instance==I2C1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a42      	ldr	r2, [pc, #264]	@ (800151c <HAL_I2C_MspInit+0x134>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d13c      	bne.n	8001492 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001418:	2340      	movs	r3, #64	@ 0x40
 800141a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800141c:	2300      	movs	r3, #0
 800141e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	4618      	mov	r0, r3
 8001426:	f005 f943 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001430:	f7ff ff04 	bl	800123c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	4b3a      	ldr	r3, [pc, #232]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001438:	4a39      	ldr	r2, [pc, #228]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001440:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800144c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001454:	2312      	movs	r3, #18
 8001456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145a:	2301      	movs	r3, #1
 800145c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001466:	2304      	movs	r3, #4
 8001468:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001470:	4619      	mov	r1, r3
 8001472:	482c      	ldr	r0, [pc, #176]	@ (8001524 <HAL_I2C_MspInit+0x13c>)
 8001474:	f002 fb90 	bl	8003b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001478:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147c:	4a28      	ldr	r2, [pc, #160]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 800147e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001482:	6593      	str	r3, [r2, #88]	@ 0x58
 8001484:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001490:	e040      	b.n	8001514 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a24      	ldr	r2, [pc, #144]	@ (8001528 <HAL_I2C_MspInit+0x140>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d13b      	bne.n	8001514 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	f107 0318 	add.w	r3, r7, #24
 80014a8:	4618      	mov	r0, r3
 80014aa:	f005 f901 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80014b4:	f7ff fec2 	bl	800123c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	4a18      	ldr	r2, [pc, #96]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 80014be:	f043 0302 	orr.w	r3, r3, #2
 80014c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80014d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d8:	2312      	movs	r3, #18
 80014da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014de:	2301      	movs	r3, #1
 80014e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014ea:	2304      	movs	r3, #4
 80014ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014f4:	4619      	mov	r1, r3
 80014f6:	480b      	ldr	r0, [pc, #44]	@ (8001524 <HAL_I2C_MspInit+0x13c>)
 80014f8:	f002 fb4e 	bl	8003b98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001500:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 8001502:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001506:	6593      	str	r3, [r2, #88]	@ 0x58
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <HAL_I2C_MspInit+0x138>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
}
 8001514:	bf00      	nop
 8001516:	37c0      	adds	r7, #192	@ 0xc0
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40005400 	.word	0x40005400
 8001520:	40021000 	.word	0x40021000
 8001524:	48000400 	.word	0x48000400
 8001528:	40005800 	.word	0x40005800

0800152c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a16      	ldr	r2, [pc, #88]	@ (8001594 <HAL_I2C_MspDeInit+0x68>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d110      	bne.n	8001560 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <HAL_I2C_MspDeInit+0x6c>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	4a15      	ldr	r2, [pc, #84]	@ (8001598 <HAL_I2C_MspDeInit+0x6c>)
 8001544:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001548:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 800154a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800154e:	4813      	ldr	r0, [pc, #76]	@ (800159c <HAL_I2C_MspDeInit+0x70>)
 8001550:	f002 fcb4 	bl	8003ebc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8001554:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001558:	4810      	ldr	r0, [pc, #64]	@ (800159c <HAL_I2C_MspDeInit+0x70>)
 800155a:	f002 fcaf 	bl	8003ebc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800155e:	e014      	b.n	800158a <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0e      	ldr	r2, [pc, #56]	@ (80015a0 <HAL_I2C_MspDeInit+0x74>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10f      	bne.n	800158a <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_I2C_MspDeInit+0x6c>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_I2C_MspDeInit+0x6c>)
 8001570:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001574:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001576:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800157a:	4808      	ldr	r0, [pc, #32]	@ (800159c <HAL_I2C_MspDeInit+0x70>)
 800157c:	f002 fc9e 	bl	8003ebc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001580:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001584:	4805      	ldr	r0, [pc, #20]	@ (800159c <HAL_I2C_MspDeInit+0x70>)
 8001586:	f002 fc99 	bl	8003ebc <HAL_GPIO_DeInit>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40005400 	.word	0x40005400
 8001598:	40021000 	.word	0x40021000
 800159c:	48000400 	.word	0x48000400
 80015a0:	40005800 	.word	0x40005800

080015a4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0b0      	sub	sp, #192	@ 0xc0
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015bc:	f107 0318 	add.w	r3, r7, #24
 80015c0:	2294      	movs	r2, #148	@ 0x94
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f007 fddd 	bl	8009184 <memset>
  if(hospi->Instance==OCTOSPI1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a28      	ldr	r2, [pc, #160]	@ (8001670 <HAL_OSPI_MspInit+0xcc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d149      	bne.n	8001668 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80015d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e0:	f107 0318 	add.w	r3, r7, #24
 80015e4:	4618      	mov	r0, r3
 80015e6:	f005 f863 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80015f0:	f7ff fe24 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <HAL_OSPI_MspInit+0xd0>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001674 <HAL_OSPI_MspInit+0xd0>)
 80015fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001600:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <HAL_OSPI_MspInit+0xd0>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001604:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_OSPI_MspInit+0xd0>)
 800160e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001610:	4a18      	ldr	r2, [pc, #96]	@ (8001674 <HAL_OSPI_MspInit+0xd0>)
 8001612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001616:	6513      	str	r3, [r2, #80]	@ 0x50
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <HAL_OSPI_MspInit+0xd0>)
 800161a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800161c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <HAL_OSPI_MspInit+0xd0>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001628:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <HAL_OSPI_MspInit+0xd0>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001630:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <HAL_OSPI_MspInit+0xd0>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800163c:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001656:	230a      	movs	r3, #10
 8001658:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800165c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001660:	4619      	mov	r1, r3
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <HAL_OSPI_MspInit+0xd4>)
 8001664:	f002 fa98 	bl	8003b98 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8001668:	bf00      	nop
 800166a:	37c0      	adds	r7, #192	@ 0xc0
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	a0001000 	.word	0xa0001000
 8001674:	40021000 	.word	0x40021000
 8001678:	48001000 	.word	0x48001000

0800167c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <HAL_SPI_MspInit+0x7c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d128      	bne.n	80016f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800169e:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	4a16      	ldr	r2, [pc, #88]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016aa:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	4a10      	ldr	r2, [pc, #64]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <HAL_SPI_MspInit+0x80>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80016ce:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016e0:	2306      	movs	r3, #6
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <HAL_SPI_MspInit+0x84>)
 80016ec:	f002 fa54 	bl	8003b98 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	@ 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40003c00 	.word	0x40003c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	48000800 	.word	0x48000800

08001704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a27      	ldr	r2, [pc, #156]	@ (80017b0 <HAL_TIM_Base_MspInit+0xac>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d114      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001716:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	4a26      	ldr	r2, [pc, #152]	@ (80017b4 <HAL_TIM_Base_MspInit+0xb0>)
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	6593      	str	r3, [r2, #88]	@ 0x58
 8001722:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2037      	movs	r0, #55	@ 0x37
 8001734:	f002 f831 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001738:	2037      	movs	r0, #55	@ 0x37
 800173a:	f002 f84a 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800173e:	e032      	b.n	80017a6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d114      	bne.n	8001774 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800174a:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <HAL_TIM_Base_MspInit+0xb0>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174e:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001754:	6613      	str	r3, [r2, #96]	@ 0x60
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2019      	movs	r0, #25
 8001768:	f002 f817 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800176c:	2019      	movs	r0, #25
 800176e:	f002 f830 	bl	80037d2 <HAL_NVIC_EnableIRQ>
}
 8001772:	e018      	b.n	80017a6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a10      	ldr	r2, [pc, #64]	@ (80017bc <HAL_TIM_Base_MspInit+0xb8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d113      	bne.n	80017a6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800177e:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001782:	4a0c      	ldr	r2, [pc, #48]	@ (80017b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001788:	6613      	str	r3, [r2, #96]	@ 0x60
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_TIM_Base_MspInit+0xb0>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	201a      	movs	r0, #26
 800179c:	f001 fffd 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80017a0:	201a      	movs	r0, #26
 80017a2:	f002 f816 	bl	80037d2 <HAL_NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40001400 	.word	0x40001400
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40014400 	.word	0x40014400
 80017bc:	40014800 	.word	0x40014800

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0b4      	sub	sp, #208	@ 0xd0
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017dc:	2294      	movs	r2, #148	@ 0x94
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f007 fccf 	bl	8009184 <memset>
  if(huart->Instance==UART4)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a87      	ldr	r2, [pc, #540]	@ (8001a08 <HAL_UART_MspInit+0x248>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d13c      	bne.n	800186a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80017f0:	2308      	movs	r3, #8
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017fc:	4618      	mov	r0, r3
 80017fe:	f004 ff57 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001808:	f7ff fd18 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800180c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001810:	4a7e      	ldr	r2, [pc, #504]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 8001812:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001816:	6593      	str	r3, [r2, #88]	@ 0x58
 8001818:	4b7c      	ldr	r3, [pc, #496]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	4b79      	ldr	r3, [pc, #484]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001828:	4a78      	ldr	r2, [pc, #480]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001830:	4b76      	ldr	r3, [pc, #472]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	623b      	str	r3, [r7, #32]
 800183a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800183c:	2303      	movs	r3, #3
 800183e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001854:	2308      	movs	r3, #8
 8001856:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001864:	f002 f998 	bl	8003b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001868:	e0ca      	b.n	8001a00 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a68      	ldr	r2, [pc, #416]	@ (8001a10 <HAL_UART_MspInit+0x250>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d143      	bne.n	80018fc <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001874:	2301      	movs	r3, #1
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001878:	2300      	movs	r3, #0
 800187a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800187c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001880:	4618      	mov	r0, r3
 8001882:	f004 ff15 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800188c:	f7ff fcd6 	bl	800123c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001890:	4b5e      	ldr	r3, [pc, #376]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 8001892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001894:	4a5d      	ldr	r2, [pc, #372]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 8001896:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189a:	6613      	str	r3, [r2, #96]	@ 0x60
 800189c:	4b5b      	ldr	r3, [pc, #364]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 800189e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	4b58      	ldr	r3, [pc, #352]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ac:	4a57      	ldr	r2, [pc, #348]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b4:	4b55      	ldr	r3, [pc, #340]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80018c0:	23c0      	movs	r3, #192	@ 0xc0
 80018c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018d8:	2307      	movs	r3, #7
 80018da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80018e2:	4619      	mov	r1, r3
 80018e4:	484b      	ldr	r0, [pc, #300]	@ (8001a14 <HAL_UART_MspInit+0x254>)
 80018e6:	f002 f957 	bl	8003b98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	2025      	movs	r0, #37	@ 0x25
 80018f0:	f001 ff53 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018f4:	2025      	movs	r0, #37	@ 0x25
 80018f6:	f001 ff6c 	bl	80037d2 <HAL_NVIC_EnableIRQ>
}
 80018fa:	e081      	b.n	8001a00 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a45      	ldr	r2, [pc, #276]	@ (8001a18 <HAL_UART_MspInit+0x258>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d13b      	bne.n	800197e <HAL_UART_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001906:	2302      	movs	r3, #2
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800190a:	2300      	movs	r3, #0
 800190c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fecc 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_UART_MspInit+0x162>
      Error_Handler();
 800191e:	f7ff fc8d 	bl	800123c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001922:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	4a39      	ldr	r2, [pc, #228]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 8001928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800192c:	6593      	str	r3, [r2, #88]	@ 0x58
 800192e:	4b37      	ldr	r3, [pc, #220]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800193a:	4b34      	ldr	r3, [pc, #208]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	4a33      	ldr	r2, [pc, #204]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001946:	4b31      	ldr	r3, [pc, #196]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001952:	2378      	movs	r3, #120	@ 0x78
 8001954:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800196a:	2307      	movs	r3, #7
 800196c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001970:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001974:	4619      	mov	r1, r3
 8001976:	4829      	ldr	r0, [pc, #164]	@ (8001a1c <HAL_UART_MspInit+0x25c>)
 8001978:	f002 f90e 	bl	8003b98 <HAL_GPIO_Init>
}
 800197c:	e040      	b.n	8001a00 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a27      	ldr	r2, [pc, #156]	@ (8001a20 <HAL_UART_MspInit+0x260>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d13b      	bne.n	8001a00 <HAL_UART_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001988:	2304      	movs	r3, #4
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800198c:	2300      	movs	r3, #0
 800198e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001990:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001994:	4618      	mov	r0, r3
 8001996:	f004 fe8b 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 80019a0:	f7ff fc4c 	bl	800123c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019a4:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	4a18      	ldr	r2, [pc, #96]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 80019aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80019b0:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019bc:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c0:	4a12      	ldr	r2, [pc, #72]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c8:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <HAL_UART_MspInit+0x24c>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80019d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ee:	2307      	movs	r3, #7
 80019f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80019f8:	4619      	mov	r1, r3
 80019fa:	4808      	ldr	r0, [pc, #32]	@ (8001a1c <HAL_UART_MspInit+0x25c>)
 80019fc:	f002 f8cc 	bl	8003b98 <HAL_GPIO_Init>
}
 8001a00:	bf00      	nop
 8001a02:	37d0      	adds	r7, #208	@ 0xd0
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40004c00 	.word	0x40004c00
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40013800 	.word	0x40013800
 8001a14:	48000400 	.word	0x48000400
 8001a18:	40004400 	.word	0x40004400
 8001a1c:	48000c00 	.word	0x48000c00
 8001a20:	40004800 	.word	0x40004800

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <NMI_Handler+0x4>

08001a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <HardFault_Handler+0x4>

08001a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <MemManage_Handler+0x4>

08001a3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7a:	f000 fb21 	bl	80020c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <ADC1_IRQHandler+0x10>)
 8001a8a:	f000 ff2e 	bl	80028ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000003c 	.word	0x2000003c

08001a98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001a9c:	2020      	movs	r0, #32
 8001a9e:	f002 fb17 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001aa2:	2040      	movs	r0, #64	@ 0x40
 8001aa4:	f002 fb14 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001aa8:	2080      	movs	r0, #128	@ 0x80
 8001aaa:	f002 fb11 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001aae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ab2:	f002 fb0d 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ac2:	f005 fc87 	bl	80073d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000284 	.word	0x20000284

08001ad0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001ad6:	f005 fc7d 	bl	80073d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200002d0 	.word	0x200002d0

08001ae4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <USART1_IRQHandler+0x10>)
 8001aea:	f005 ffd3 	bl	8007a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200003b0 	.word	0x200003b0

08001af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001afc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001b00:	f002 fae6 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001b04:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001b08:	f002 fae2 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001b0c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001b10:	f002 fade 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001b14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b18:	f002 fada 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001b1c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b20:	f002 fad6 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001b24:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b28:	f002 fad2 	bl	80040d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <TIM7_IRQHandler+0x10>)
 8001b36:	f005 fc4d 	bl	80073d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000238 	.word	0x20000238

08001b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b6c:	f7ff ffea 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b70:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b72:	490d      	ldr	r1, [pc, #52]	@ (8001ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <LoopForever+0xe>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b88:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb4 <LoopForever+0x16>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b96:	f007 fafd 	bl	8009194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b9a:	f7fe fca7 	bl	80004ec <main>

08001b9e <LoopForever>:

LoopForever:
    b LoopForever
 8001b9e:	e7fe      	b.n	8001b9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001bac:	08009274 	.word	0x08009274
  ldr r2, =_sbss
 8001bb0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001bb4:	20000600 	.word	0x20000600

08001bb8 <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <AES_IRQHandler>
	...

08001bbc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	@ 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bc4:	4b27      	ldr	r3, [pc, #156]	@ (8001c64 <I2Cx_MspInit+0xa8>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc8:	4a26      	ldr	r2, [pc, #152]	@ (8001c64 <I2Cx_MspInit+0xa8>)
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd0:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <I2Cx_MspInit+0xa8>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001bdc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001be0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001be2:	2312      	movs	r3, #18
 8001be4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	481b      	ldr	r0, [pc, #108]	@ (8001c68 <I2Cx_MspInit+0xac>)
 8001bfa:	f001 ffcd 	bl	8003b98 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4818      	ldr	r0, [pc, #96]	@ (8001c68 <I2Cx_MspInit+0xac>)
 8001c06:	f001 ffc7 	bl	8003b98 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001c0a:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <I2Cx_MspInit+0xa8>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	4a15      	ldr	r2, [pc, #84]	@ (8001c64 <I2Cx_MspInit+0xa8>)
 8001c10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <I2Cx_MspInit+0xa8>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <I2Cx_MspInit+0xa8>)
 8001c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c26:	4a0f      	ldr	r2, [pc, #60]	@ (8001c64 <I2Cx_MspInit+0xa8>)
 8001c28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c2c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <I2Cx_MspInit+0xa8>)
 8001c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c32:	4a0c      	ldr	r2, [pc, #48]	@ (8001c64 <I2Cx_MspInit+0xa8>)
 8001c34:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001c38:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	2021      	movs	r0, #33	@ 0x21
 8001c40:	f001 fdab 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001c44:	2021      	movs	r0, #33	@ 0x21
 8001c46:	f001 fdc4 	bl	80037d2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	210f      	movs	r1, #15
 8001c4e:	2022      	movs	r0, #34	@ 0x22
 8001c50:	f001 fda3 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001c54:	2022      	movs	r0, #34	@ 0x22
 8001c56:	f001 fdbc 	bl	80037d2 <HAL_NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	@ 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	48000400 	.word	0x48000400

08001c6c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a12      	ldr	r2, [pc, #72]	@ (8001cc0 <I2Cx_Init+0x54>)
 8001c78:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a11      	ldr	r2, [pc, #68]	@ (8001cc4 <I2Cx_Init+0x58>)
 8001c7e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff89 	bl	8001bbc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f002 fa28 	bl	8004100 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f002 ffde 	bl	8004c74 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40005800 	.word	0x40005800
 8001cc4:	00702681 	.word	0x00702681

08001cc8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af04      	add	r7, sp, #16
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	4608      	mov	r0, r1
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	72fb      	strb	r3, [r7, #11]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	813b      	strh	r3, [r7, #8]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
 8001ce8:	b299      	uxth	r1, r3
 8001cea:	88f8      	ldrh	r0, [r7, #6]
 8001cec:	893a      	ldrh	r2, [r7, #8]
 8001cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf2:	9302      	str	r3, [sp, #8]
 8001cf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f002 fbdc 	bl	80044bc <HAL_I2C_Mem_Read>
 8001d04:	4603      	mov	r3, r0
 8001d06:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
 8001d10:	4619      	mov	r1, r3
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f832 	bl	8001d7c <I2Cx_Error>
  }
  return status;
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b08a      	sub	sp, #40	@ 0x28
 8001d26:	af04      	add	r7, sp, #16
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	4608      	mov	r0, r1
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4603      	mov	r3, r0
 8001d32:	72fb      	strb	r3, [r7, #11]
 8001d34:	460b      	mov	r3, r1
 8001d36:	813b      	strh	r3, [r7, #8]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	b299      	uxth	r1, r3
 8001d44:	88f8      	ldrh	r0, [r7, #6]
 8001d46:	893a      	ldrh	r2, [r7, #8]
 8001d48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	4603      	mov	r3, r0
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f002 fa9b 	bl	8004294 <HAL_I2C_Mem_Write>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001d68:	7afb      	ldrb	r3, [r7, #11]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f805 	bl	8001d7c <I2Cx_Error>
  }
  return status;
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f002 fa54 	bl	8004236 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ff6c 	bl	8001c6c <I2Cx_Init>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <SENSOR_IO_Init+0x10>)
 8001da2:	f7ff ff63 	bl	8001c6c <I2Cx_Init>
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000580 	.word	0x20000580

08001db0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	71bb      	strb	r3, [r7, #6]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001dc2:	79bb      	ldrb	r3, [r7, #6]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	79f9      	ldrb	r1, [r7, #7]
 8001dc8:	2301      	movs	r3, #1
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	1d7b      	adds	r3, r7, #5
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	4803      	ldr	r0, [pc, #12]	@ (8001de0 <SENSOR_IO_Write+0x30>)
 8001dd4:	f7ff ffa5 	bl	8001d22 <I2Cx_WriteMultiple>
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000580 	.word	0x20000580

08001de4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	4603      	mov	r3, r0
 8001dec:	460a      	mov	r2, r1
 8001dee:	71fb      	strb	r3, [r7, #7]
 8001df0:	4613      	mov	r3, r2
 8001df2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001df8:	79bb      	ldrb	r3, [r7, #6]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	79f9      	ldrb	r1, [r7, #7]
 8001dfe:	2301      	movs	r3, #1
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	f107 030f 	add.w	r3, r7, #15
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	4804      	ldr	r0, [pc, #16]	@ (8001e1c <SENSOR_IO_Read+0x38>)
 8001e0c:	f7ff ff5c 	bl	8001cc8 <I2Cx_ReadMultiple>

  return read_value;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000580 	.word	0x20000580

08001e20 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	603a      	str	r2, [r7, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	71bb      	strb	r3, [r7, #6]
 8001e32:	4613      	mov	r3, r2
 8001e34:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001e36:	79bb      	ldrb	r3, [r7, #6]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	79f9      	ldrb	r1, [r7, #7]
 8001e3c:	88bb      	ldrh	r3, [r7, #4]
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2301      	movs	r3, #1
 8001e46:	4804      	ldr	r0, [pc, #16]	@ (8001e58 <SENSOR_IO_ReadMultiple+0x38>)
 8001e48:	f7ff ff3e 	bl	8001cc8 <I2Cx_ReadMultiple>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000580 	.word	0x20000580

08001e5c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <BSP_TSENSOR_Init+0x30>)
 8001e68:	4a09      	ldr	r2, [pc, #36]	@ (8001e90 <BSP_TSENSOR_Init+0x34>)
 8001e6a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001e6c:	f7ff ff96 	bl	8001d9c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <BSP_TSENSOR_Init+0x30>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2100      	movs	r1, #0
 8001e78:	20be      	movs	r0, #190	@ 0xbe
 8001e7a:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001e80:	79fb      	ldrb	r3, [r7, #7]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200005d4 	.word	0x200005d4
 8001e90:	20000008 	.word	0x20000008

08001e94 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <BSP_TSENSOR_ReadTemp+0x18>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	20be      	movs	r0, #190	@ 0xbe
 8001ea0:	4798      	blx	r3
 8001ea2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200005d4 	.word	0x200005d4

08001eb0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2120      	movs	r1, #32
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff8e 	bl	8001de4 <SENSOR_IO_Read>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	f023 0304 	bic.w	r3, r3, #4
 8001ed2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	2120      	movs	r1, #32
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff57 	bl	8001db0 <SENSOR_IO_Write>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	b2d8      	uxtb	r0, r3
 8001f18:	f107 0208 	add.w	r2, r7, #8
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	21b2      	movs	r1, #178	@ 0xb2
 8001f20:	f7ff ff7e 	bl	8001e20 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2135      	movs	r1, #53	@ 0x35
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff5a 	bl	8001de4 <SENSOR_IO_Read>
 8001f30:	4603      	mov	r3, r0
 8001f32:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f34:	7ffb      	ldrb	r3, [r7, #31]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	7a3b      	ldrb	r3, [r7, #8]
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f48:	7ffb      	ldrb	r3, [r7, #31]
 8001f4a:	019b      	lsls	r3, r3, #6
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	7a7b      	ldrb	r3, [r7, #9]
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001f5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f60:	10db      	asrs	r3, r3, #3
 8001f62:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001f64:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f68:	10db      	asrs	r3, r3, #3
 8001f6a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	b2d8      	uxtb	r0, r3
 8001f70:	f107 0208 	add.w	r2, r7, #8
 8001f74:	2304      	movs	r3, #4
 8001f76:	21bc      	movs	r1, #188	@ 0xbc
 8001f78:	f7ff ff52 	bl	8001e20 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f7c:	7a7b      	ldrb	r3, [r7, #9]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	b21a      	sxth	r2, r3
 8001f82:	7a3b      	ldrb	r3, [r7, #8]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	4313      	orrs	r3, r2
 8001f88:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001f8a:	7afb      	ldrb	r3, [r7, #11]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	b21a      	sxth	r2, r3
 8001f90:	7abb      	ldrb	r3, [r7, #10]
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	4313      	orrs	r3, r2
 8001f96:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	b2d8      	uxtb	r0, r3
 8001f9c:	f107 0208 	add.w	r2, r7, #8
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	21aa      	movs	r1, #170	@ 0xaa
 8001fa4:	f7ff ff3c 	bl	8001e20 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001fa8:	7a7b      	ldrb	r3, [r7, #9]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	7a3b      	ldrb	r3, [r7, #8]
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001fb6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001fcc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fda:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001fde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001fe2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ff8:	ee07 3a90 	vmov	s15, r3
 8001ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002004:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	ee07 3a90 	vmov	s15, r3
}
 800200e:	eeb0 0a67 	vmov.f32	s0, s15
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002022:	2003      	movs	r0, #3
 8002024:	f001 fbae 	bl	8003784 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002028:	2000      	movs	r0, #0
 800202a:	f000 f80d 	bl	8002048 <HAL_InitTick>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	e001      	b.n	800203e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800203a:	f7ff f905 	bl	8001248 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800203e:	79fb      	ldrb	r3, [r7, #7]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002054:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <HAL_InitTick+0x6c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d023      	beq.n	80020a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800205c:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <HAL_InitTick+0x70>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_InitTick+0x6c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4619      	mov	r1, r3
 8002066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206a:	fbb3 f3f1 	udiv	r3, r3, r1
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f001 fbbb 	bl	80037ee <HAL_SYSTICK_Config>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10f      	bne.n	800209e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d809      	bhi.n	8002098 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f001 fb85 	bl	800379a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002090:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <HAL_InitTick+0x74>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e007      	b.n	80020a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	e004      	b.n	80020a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e001      	b.n	80020a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2000001c 	.word	0x2000001c
 80020b8:	20000004 	.word	0x20000004
 80020bc:	20000018 	.word	0x20000018

080020c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_IncTick+0x20>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_IncTick+0x24>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <HAL_IncTick+0x24>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	2000001c 	.word	0x2000001c
 80020e4:	200005d8 	.word	0x200005d8

080020e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <HAL_GetTick+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	200005d8 	.word	0x200005d8

08002100 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	609a      	str	r2, [r3, #8]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3360      	adds	r3, #96	@ 0x60
 800217a:	461a      	mov	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <LL_ADC_SetOffset+0x44>)
 800218a:	4013      	ands	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	4313      	orrs	r3, r2
 8002198:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021a0:	bf00      	nop
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	03fff000 	.word	0x03fff000

080021b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3360      	adds	r3, #96	@ 0x60
 80021be:	461a      	mov	r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3360      	adds	r3, #96	@ 0x60
 80021ec:	461a      	mov	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	431a      	orrs	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	615a      	str	r2, [r3, #20]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800225e:	b480      	push	{r7}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3330      	adds	r3, #48	@ 0x30
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	4413      	add	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	211f      	movs	r1, #31
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	401a      	ands	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	f003 011f 	and.w	r1, r3, #31
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3314      	adds	r3, #20
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	0e5b      	lsrs	r3, r3, #25
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	4413      	add	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	0d1b      	lsrs	r3, r3, #20
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2107      	movs	r1, #7
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	401a      	ands	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	0d1b      	lsrs	r3, r3, #20
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	431a      	orrs	r2, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	43db      	mvns	r3, r3
 800234e:	401a      	ands	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0318 	and.w	r3, r3, #24
 8002356:	4908      	ldr	r1, [pc, #32]	@ (8002378 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002358:	40d9      	lsrs	r1, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	400b      	ands	r3, r1
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002362:	431a      	orrs	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	0007ffff 	.word	0x0007ffff

0800237c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800238c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6093      	str	r3, [r2, #8]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023b4:	d101      	bne.n	80023ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002400:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002404:	d101      	bne.n	800240a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002428:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800242c:	f043 0201 	orr.w	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <LL_ADC_IsEnabled+0x18>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <LL_ADC_IsEnabled+0x1a>
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002476:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800247a:	f043 0204 	orr.w	r2, r3, #4
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d101      	bne.n	80024a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d101      	bne.n	80024cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e129      	b.n	800274a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7fe fec3 	bl	8001290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff3f 	bl	80023a0 <LL_ADC_IsDeepPowerDownEnabled>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff25 	bl	800237c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff5a 	bl	80023f0 <LL_ADC_IsInternalRegulatorEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d115      	bne.n	800256e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff3e 	bl	80023c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800254c:	4b81      	ldr	r3, [pc, #516]	@ (8002754 <HAL_ADC_Init+0x278>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	4a81      	ldr	r2, [pc, #516]	@ (8002758 <HAL_ADC_Init+0x27c>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	3301      	adds	r3, #1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002560:	e002      	b.n	8002568 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3b01      	subs	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f9      	bne.n	8002562 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff3c 	bl	80023f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10d      	bne.n	800259a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	f043 0210 	orr.w	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff75 	bl	800248e <LL_ADC_REG_IsConversionOngoing>
 80025a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 80c2 	bne.w	8002738 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 80be 	bne.w	8002738 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025c4:	f043 0202 	orr.w	r2, r3, #2
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff35 	bl	8002440 <LL_ADC_IsEnabled>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025dc:	485f      	ldr	r0, [pc, #380]	@ (800275c <HAL_ADC_Init+0x280>)
 80025de:	f7ff ff2f 	bl	8002440 <LL_ADC_IsEnabled>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4619      	mov	r1, r3
 80025ee:	485c      	ldr	r0, [pc, #368]	@ (8002760 <HAL_ADC_Init+0x284>)
 80025f0:	f7ff fd86 	bl	8002100 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7e5b      	ldrb	r3, [r3, #25]
 80025f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002604:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800260a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002612:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d106      	bne.n	8002630 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002626:	3b01      	subs	r3, #1
 8002628:	045b      	lsls	r3, r3, #17
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	4b44      	ldr	r3, [pc, #272]	@ (8002764 <HAL_ADC_Init+0x288>)
 8002654:	4013      	ands	r3, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	430b      	orrs	r3, r1
 800265e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff25 	bl	80024b4 <LL_ADC_INJ_IsConversionOngoing>
 800266a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d140      	bne.n	80026f4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d13d      	bne.n	80026f4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7e1b      	ldrb	r3, [r3, #24]
 8002680:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002682:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800268a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800269a:	f023 0306 	bic.w	r3, r3, #6
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d118      	bne.n	80026e4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026c8:	4311      	orrs	r1, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80026ce:	4311      	orrs	r1, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026d4:	430a      	orrs	r2, r1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	611a      	str	r2, [r3, #16]
 80026e2:	e007      	b.n	80026f4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d10c      	bne.n	8002716 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	f023 010f 	bic.w	r1, r3, #15
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	1e5a      	subs	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	631a      	str	r2, [r3, #48]	@ 0x30
 8002714:	e007      	b.n	8002726 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 020f 	bic.w	r2, r2, #15
 8002724:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	659a      	str	r2, [r3, #88]	@ 0x58
 8002736:	e007      	b.n	8002748 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	f043 0210 	orr.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002748:	7ffb      	ldrb	r3, [r7, #31]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000004 	.word	0x20000004
 8002758:	053e2d63 	.word	0x053e2d63
 800275c:	50040000 	.word	0x50040000
 8002760:	50040300 	.word	0x50040300
 8002764:	fff0c007 	.word	0xfff0c007

08002768 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fe8a 	bl	800248e <LL_ADC_REG_IsConversionOngoing>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	f040 80a0 	bne.w	80028c2 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_ADC_Start_IT+0x28>
 800278c:	2302      	movs	r3, #2
 800278e:	e09b      	b.n	80028c8 <HAL_ADC_Start_IT+0x160>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fe6b 	bl	8003474 <ADC_Enable>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f040 8087 	bne.w	80028b8 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d006      	beq.n	80027d8 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	f023 0206 	bic.w	r2, r3, #6
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027d6:	e002      	b.n	80027de <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	221c      	movs	r2, #28
 80027e4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 021c 	bic.w	r2, r2, #28
 80027fc:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	2b08      	cmp	r3, #8
 8002804:	d108      	bne.n	8002818 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0208 	orr.w	r2, r2, #8
 8002814:	605a      	str	r2, [r3, #4]
          break;
 8002816:	e008      	b.n	800282a <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0204 	orr.w	r2, r2, #4
 8002826:	605a      	str	r2, [r3, #4]
          break;
 8002828:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0210 	orr.w	r2, r2, #16
 8002840:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d02d      	beq.n	80028ac <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002858:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d110      	bne.n	800288a <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0220 	bic.w	r2, r2, #32
 8002876:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002886:	605a      	str	r2, [r3, #4]
            break;
 8002888:	e010      	b.n	80028ac <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002898:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0220 	orr.w	r2, r2, #32
 80028a8:	605a      	str	r2, [r3, #4]
            break;
 80028aa:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fdd8 	bl	8002466 <LL_ADC_REG_StartConversion>
 80028b6:	e006      	b.n	80028c6 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80028c0:	e001      	b.n	80028c6 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b088      	sub	sp, #32
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d017      	beq.n	8002940 <HAL_ADC_IRQHandler+0x56>
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d012      	beq.n	8002940 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fe4c 	bl	80035d0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2202      	movs	r2, #2
 800293e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <HAL_ADC_IRQHandler+0x6a>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d109      	bne.n	8002968 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800295a:	2b00      	cmp	r3, #0
 800295c:	d05e      	beq.n	8002a1c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d059      	beq.n	8002a1c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002978:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fc57 	bl	8002238 <LL_ADC_REG_IsTriggerSourceSWStart>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d03e      	beq.n	8002a0e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d135      	bne.n	8002a0e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d12e      	bne.n	8002a0e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fd6a 	bl	800248e <LL_ADC_REG_IsConversionOngoing>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d11a      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 020c 	bic.w	r2, r2, #12
 80029ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d112      	bne.n	8002a0e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ec:	f043 0201 	orr.w	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80029f4:	e00b      	b.n	8002a0e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	f043 0210 	orr.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe fbbc 	bl	800118c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	220c      	movs	r2, #12
 8002a1a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <HAL_ADC_IRQHandler+0x146>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d072      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d06d      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a54:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fc28 	bl	80022b6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a66:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fbe3 	bl	8002238 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a72:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d047      	beq.n	8002b12 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_ADC_IRQHandler+0x1b2>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d03f      	beq.n	8002b12 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d13a      	bne.n	8002b12 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa6:	2b40      	cmp	r3, #64	@ 0x40
 8002aa8:	d133      	bne.n	8002b12 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d12e      	bne.n	8002b12 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fcfb 	bl	80024b4 <LL_ADC_INJ_IsConversionOngoing>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d11a      	bne.n	8002afa <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ad2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d112      	bne.n	8002b12 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002af8:	e00b      	b.n	8002b12 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	f043 0210 	orr.w	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fd34 	bl	8003580 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2260      	movs	r2, #96	@ 0x60
 8002b1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d011      	beq.n	8002b4e <HAL_ADC_IRQHandler+0x264>
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00c      	beq.n	8002b4e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f886 	bl	8002c52 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2280      	movs	r2, #128	@ 0x80
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d012      	beq.n	8002b7e <HAL_ADC_IRQHandler+0x294>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fd1a 	bl	80035a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d012      	beq.n	8002bae <HAL_ADC_IRQHandler+0x2c4>
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fd0c 	bl	80035bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d02a      	beq.n	8002c0e <HAL_ADC_IRQHandler+0x324>
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d025      	beq.n	8002c0e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	e008      	b.n	8002be2 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002bde:	2301      	movs	r3, #1
 8002be0:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10e      	bne.n	8002c06 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bec:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf8:	f043 0202 	orr.w	r2, r3, #2
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f830 	bl	8002c66 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d018      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x360>
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d013      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c32:	f043 0208 	orr.w	r2, r3, #8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c42:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fca5 	bl	8003594 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c4a:	bf00      	nop
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b0b6      	sub	sp, #216	@ 0xd8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x22>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e3d5      	b.n	800344a <HAL_ADC_ConfigChannel+0x7ce>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fbef 	bl	800248e <LL_ADC_REG_IsConversionOngoing>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 83ba 	bne.w	800342c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	d824      	bhi.n	8002d12 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	3b02      	subs	r3, #2
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d81b      	bhi.n	8002d0a <HAL_ADC_ConfigChannel+0x8e>
 8002cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd8 <HAL_ADC_ConfigChannel+0x5c>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002cf1 	.word	0x08002cf1
 8002ce0:	08002cf9 	.word	0x08002cf9
 8002ce4:	08002d01 	.word	0x08002d01
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002ce8:	230c      	movs	r3, #12
 8002cea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cee:	e010      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002cf0:	2312      	movs	r3, #18
 8002cf2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cf6:	e00c      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002cf8:	2318      	movs	r3, #24
 8002cfa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cfe:	e008      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d08:	e003      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d10:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002d20:	f7ff fa9d 	bl	800225e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fbb0 	bl	800248e <LL_ADC_REG_IsConversionOngoing>
 8002d2e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fbbc 	bl	80024b4 <LL_ADC_INJ_IsConversionOngoing>
 8002d3c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f040 81bf 	bne.w	80030c8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 81ba 	bne.w	80030c8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d5c:	d10f      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2200      	movs	r2, #0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f7ff fab7 	bl	80022dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fa4b 	bl	8002212 <LL_ADC_SetSamplingTimeCommonConfig>
 8002d7c:	e00e      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6819      	ldr	r1, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f7ff faa6 	bl	80022dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fa3b 	bl	8002212 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	08db      	lsrs	r3, r3, #3
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6919      	ldr	r1, [r3, #16]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dce:	f7ff f9cb 	bl	8002168 <LL_ADC_SetOffset>
 8002dd2:	e179      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f9e8 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x184>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff f9dd 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8002df6:	4603      	mov	r3, r0
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	f003 021f 	and.w	r2, r3, #31
 8002dfe:	e01e      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x1c2>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff f9d2 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002e2e:	2320      	movs	r3, #32
 8002e30:	e004      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002e32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d105      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x1da>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	0e9b      	lsrs	r3, r3, #26
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	e018      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x20c>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002e72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	e004      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002e7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d106      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff f9a1 	bl	80021dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff f985 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x24a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f97a 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	0e9b      	lsrs	r3, r3, #26
 8002ec0:	f003 021f 	and.w	r2, r3, #31
 8002ec4:	e01e      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x288>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff f96f 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002eec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	e004      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002ef8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x2a0>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0e9b      	lsrs	r3, r3, #26
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	e018      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x2d2>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	e004      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d106      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f93e 	bl	80021dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2102      	movs	r1, #2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f922 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x310>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff f917 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8002f82:	4603      	mov	r3, r0
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	f003 021f 	and.w	r2, r3, #31
 8002f8a:	e01e      	b.n	8002fca <HAL_ADC_ConfigChannel+0x34e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2102      	movs	r1, #2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f90c 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002fba:	2320      	movs	r3, #32
 8002fbc:	e004      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d105      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x366>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	0e9b      	lsrs	r3, r3, #26
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	e014      	b.n	800300c <HAL_ADC_ConfigChannel+0x390>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002ff0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ff2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002ffe:	2320      	movs	r3, #32
 8003000:	e004      	b.n	800300c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003002:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800300c:	429a      	cmp	r2, r3
 800300e:	d106      	bne.n	800301e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2200      	movs	r2, #0
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff f8df 	bl	80021dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2103      	movs	r1, #3
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff f8c3 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 800302a:	4603      	mov	r3, r0
 800302c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <HAL_ADC_ConfigChannel+0x3ce>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2103      	movs	r1, #3
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f8b8 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8003040:	4603      	mov	r3, r0
 8003042:	0e9b      	lsrs	r3, r3, #26
 8003044:	f003 021f 	and.w	r2, r3, #31
 8003048:	e017      	b.n	800307a <HAL_ADC_ConfigChannel+0x3fe>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2103      	movs	r1, #3
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff f8ad 	bl	80021b0 <LL_ADC_GetOffsetChannel>
 8003056:	4603      	mov	r3, r0
 8003058:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003064:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003066:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800306c:	2320      	movs	r3, #32
 800306e:	e003      	b.n	8003078 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003070:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003082:	2b00      	cmp	r3, #0
 8003084:	d105      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x416>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	0e9b      	lsrs	r3, r3, #26
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	e011      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x43a>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80030a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80030a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e003      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80030ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d106      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	2103      	movs	r1, #3
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f88a 	bl	80021dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f9b7 	bl	8002440 <LL_ADC_IsEnabled>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 813f 	bne.w	8003358 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6819      	ldr	r1, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f7ff f924 	bl	8002334 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a8e      	ldr	r2, [pc, #568]	@ (800332c <HAL_ADC_ConfigChannel+0x6b0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	f040 8130 	bne.w	8003358 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10b      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x4a4>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	0e9b      	lsrs	r3, r3, #26
 800310e:	3301      	adds	r3, #1
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2b09      	cmp	r3, #9
 8003116:	bf94      	ite	ls
 8003118:	2301      	movls	r3, #1
 800311a:	2300      	movhi	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e019      	b.n	8003154 <HAL_ADC_ConfigChannel+0x4d8>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800312e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003130:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003138:	2320      	movs	r3, #32
 800313a:	e003      	b.n	8003144 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800313c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	3301      	adds	r3, #1
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2b09      	cmp	r3, #9
 800314c:	bf94      	ite	ls
 800314e:	2301      	movls	r3, #1
 8003150:	2300      	movhi	r3, #0
 8003152:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003154:	2b00      	cmp	r3, #0
 8003156:	d079      	beq.n	800324c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x4f8>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0e9b      	lsrs	r3, r3, #26
 800316a:	3301      	adds	r3, #1
 800316c:	069b      	lsls	r3, r3, #26
 800316e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003172:	e015      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x524>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003184:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800318c:	2320      	movs	r3, #32
 800318e:	e003      	b.n	8003198 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	3301      	adds	r3, #1
 800319a:	069b      	lsls	r3, r3, #26
 800319c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x544>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0e9b      	lsrs	r3, r3, #26
 80031b2:	3301      	adds	r3, #1
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	e017      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x574>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80031ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80031d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e003      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80031dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2101      	movs	r1, #1
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	ea42 0103 	orr.w	r1, r2, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x59a>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	3301      	adds	r3, #1
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	051b      	lsls	r3, r3, #20
 8003214:	e018      	b.n	8003248 <HAL_ADC_ConfigChannel+0x5cc>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003226:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800322e:	2320      	movs	r3, #32
 8003230:	e003      	b.n	800323a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003248:	430b      	orrs	r3, r1
 800324a:	e080      	b.n	800334e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003254:	2b00      	cmp	r3, #0
 8003256:	d107      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x5ec>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	0e9b      	lsrs	r3, r3, #26
 800325e:	3301      	adds	r3, #1
 8003260:	069b      	lsls	r3, r3, #26
 8003262:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003266:	e015      	b.n	8003294 <HAL_ADC_ConfigChannel+0x618>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e003      	b.n	800328c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	3301      	adds	r3, #1
 800328e:	069b      	lsls	r3, r3, #26
 8003290:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x638>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	e017      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x668>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	61bb      	str	r3, [r7, #24]
  return result;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80032cc:	2320      	movs	r3, #32
 80032ce:	e003      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	3301      	adds	r3, #1
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2101      	movs	r1, #1
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	ea42 0103 	orr.w	r1, r2, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10d      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x694>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	3301      	adds	r3, #1
 80032fc:	f003 021f 	and.w	r2, r3, #31
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	3b1e      	subs	r3, #30
 8003308:	051b      	lsls	r3, r3, #20
 800330a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800330e:	e01d      	b.n	800334c <HAL_ADC_ConfigChannel+0x6d0>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	60fb      	str	r3, [r7, #12]
  return result;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d103      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003328:	2320      	movs	r3, #32
 800332a:	e005      	b.n	8003338 <HAL_ADC_ConfigChannel+0x6bc>
 800332c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	3301      	adds	r3, #1
 800333a:	f003 021f 	and.w	r2, r3, #31
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	3b1e      	subs	r3, #30
 8003346:	051b      	lsls	r3, r3, #20
 8003348:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800334c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003352:	4619      	mov	r1, r3
 8003354:	f7fe ffc2 	bl	80022dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b3d      	ldr	r3, [pc, #244]	@ (8003454 <HAL_ADC_ConfigChannel+0x7d8>)
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d06c      	beq.n	800343e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003364:	483c      	ldr	r0, [pc, #240]	@ (8003458 <HAL_ADC_ConfigChannel+0x7dc>)
 8003366:	f7fe fef1 	bl	800214c <LL_ADC_GetCommonPathInternalCh>
 800336a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a3a      	ldr	r2, [pc, #232]	@ (800345c <HAL_ADC_ConfigChannel+0x7e0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d127      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003378:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800337c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d121      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a35      	ldr	r2, [pc, #212]	@ (8003460 <HAL_ADC_ConfigChannel+0x7e4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d157      	bne.n	800343e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800338e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003392:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003396:	4619      	mov	r1, r3
 8003398:	482f      	ldr	r0, [pc, #188]	@ (8003458 <HAL_ADC_ConfigChannel+0x7dc>)
 800339a:	f7fe fec4 	bl	8002126 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800339e:	4b31      	ldr	r3, [pc, #196]	@ (8003464 <HAL_ADC_ConfigChannel+0x7e8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	4a30      	ldr	r2, [pc, #192]	@ (8003468 <HAL_ADC_ConfigChannel+0x7ec>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	099b      	lsrs	r3, r3, #6
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80033b8:	e002      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	3b01      	subs	r3, #1
 80033be:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f9      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033c6:	e03a      	b.n	800343e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a27      	ldr	r2, [pc, #156]	@ (800346c <HAL_ADC_ConfigChannel+0x7f0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d113      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10d      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003460 <HAL_ADC_ConfigChannel+0x7e4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d12a      	bne.n	800343e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033f0:	4619      	mov	r1, r3
 80033f2:	4819      	ldr	r0, [pc, #100]	@ (8003458 <HAL_ADC_ConfigChannel+0x7dc>)
 80033f4:	f7fe fe97 	bl	8002126 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033f8:	e021      	b.n	800343e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003470 <HAL_ADC_ConfigChannel+0x7f4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d11c      	bne.n	800343e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d116      	bne.n	800343e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a12      	ldr	r2, [pc, #72]	@ (8003460 <HAL_ADC_ConfigChannel+0x7e4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d111      	bne.n	800343e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800341a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800341e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003422:	4619      	mov	r1, r3
 8003424:	480c      	ldr	r0, [pc, #48]	@ (8003458 <HAL_ADC_ConfigChannel+0x7dc>)
 8003426:	f7fe fe7e 	bl	8002126 <LL_ADC_SetCommonPathInternalCh>
 800342a:	e008      	b.n	800343e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003446:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800344a:	4618      	mov	r0, r3
 800344c:	37d8      	adds	r7, #216	@ 0xd8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	80080000 	.word	0x80080000
 8003458:	50040300 	.word	0x50040300
 800345c:	c7520000 	.word	0xc7520000
 8003460:	50040000 	.word	0x50040000
 8003464:	20000004 	.word	0x20000004
 8003468:	053e2d63 	.word	0x053e2d63
 800346c:	cb840000 	.word	0xcb840000
 8003470:	80000001 	.word	0x80000001

08003474 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800347c:	2300      	movs	r3, #0
 800347e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe ffdb 	bl	8002440 <LL_ADC_IsEnabled>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d169      	bne.n	8003564 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	4b36      	ldr	r3, [pc, #216]	@ (8003570 <ADC_Enable+0xfc>)
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a2:	f043 0210 	orr.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	f043 0201 	orr.w	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e055      	b.n	8003566 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe ffaa 	bl	8002418 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034c4:	482b      	ldr	r0, [pc, #172]	@ (8003574 <ADC_Enable+0x100>)
 80034c6:	f7fe fe41 	bl	800214c <LL_ADC_GetCommonPathInternalCh>
 80034ca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80034cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d013      	beq.n	80034fc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034d4:	4b28      	ldr	r3, [pc, #160]	@ (8003578 <ADC_Enable+0x104>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	4a28      	ldr	r2, [pc, #160]	@ (800357c <ADC_Enable+0x108>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034ee:	e002      	b.n	80034f6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f9      	bne.n	80034f0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034fc:	f7fe fdf4 	bl	80020e8 <HAL_GetTick>
 8003500:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003502:	e028      	b.n	8003556 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe ff99 	bl	8002440 <LL_ADC_IsEnabled>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe ff7d 	bl	8002418 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800351e:	f7fe fde3 	bl	80020e8 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d914      	bls.n	8003556 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d00d      	beq.n	8003556 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	f043 0210 	orr.w	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e007      	b.n	8003566 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d1cf      	bne.n	8003504 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	8000003f 	.word	0x8000003f
 8003574:	50040300 	.word	0x50040300
 8003578:	20000004 	.word	0x20000004
 800357c:	053e2d63 	.word	0x053e2d63

08003580 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003600:	4013      	ands	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800360c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003616:	4a04      	ldr	r2, [pc, #16]	@ (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	60d3      	str	r3, [r2, #12]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003630:	4b04      	ldr	r3, [pc, #16]	@ (8003644 <__NVIC_GetPriorityGrouping+0x18>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 0307 	and.w	r3, r3, #7
}
 800363a:	4618      	mov	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	2b00      	cmp	r3, #0
 8003658:	db0b      	blt.n	8003672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4907      	ldr	r1, [pc, #28]	@ (8003680 <__NVIC_EnableIRQ+0x38>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2001      	movs	r0, #1
 800366a:	fa00 f202 	lsl.w	r2, r0, r2
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000e100 	.word	0xe000e100

08003684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	6039      	str	r1, [r7, #0]
 800368e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003694:	2b00      	cmp	r3, #0
 8003696:	db0a      	blt.n	80036ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	b2da      	uxtb	r2, r3
 800369c:	490c      	ldr	r1, [pc, #48]	@ (80036d0 <__NVIC_SetPriority+0x4c>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	440b      	add	r3, r1
 80036a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036ac:	e00a      	b.n	80036c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	4908      	ldr	r1, [pc, #32]	@ (80036d4 <__NVIC_SetPriority+0x50>)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	3b04      	subs	r3, #4
 80036bc:	0112      	lsls	r2, r2, #4
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	440b      	add	r3, r1
 80036c2:	761a      	strb	r2, [r3, #24]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000e100 	.word	0xe000e100
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	@ 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f1c3 0307 	rsb	r3, r3, #7
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	bf28      	it	cs
 80036f6:	2304      	movcs	r3, #4
 80036f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d902      	bls.n	8003708 <NVIC_EncodePriority+0x30>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3b03      	subs	r3, #3
 8003706:	e000      	b.n	800370a <NVIC_EncodePriority+0x32>
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	f04f 32ff 	mov.w	r2, #4294967295
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	401a      	ands	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003720:	f04f 31ff 	mov.w	r1, #4294967295
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	43d9      	mvns	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	4313      	orrs	r3, r2
         );
}
 8003732:	4618      	mov	r0, r3
 8003734:	3724      	adds	r7, #36	@ 0x24
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003750:	d301      	bcc.n	8003756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003752:	2301      	movs	r3, #1
 8003754:	e00f      	b.n	8003776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003756:	4a0a      	ldr	r2, [pc, #40]	@ (8003780 <SysTick_Config+0x40>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3b01      	subs	r3, #1
 800375c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800375e:	210f      	movs	r1, #15
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	f7ff ff8e 	bl	8003684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003768:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <SysTick_Config+0x40>)
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800376e:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <SysTick_Config+0x40>)
 8003770:	2207      	movs	r2, #7
 8003772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	e000e010 	.word	0xe000e010

08003784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ff29 	bl	80035e4 <__NVIC_SetPriorityGrouping>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037ac:	f7ff ff3e 	bl	800362c <__NVIC_GetPriorityGrouping>
 80037b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	6978      	ldr	r0, [r7, #20]
 80037b8:	f7ff ff8e 	bl	80036d8 <NVIC_EncodePriority>
 80037bc:	4602      	mov	r2, r0
 80037be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff5d 	bl	8003684 <__NVIC_SetPriority>
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4603      	mov	r3, r0
 80037da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff ff31 	bl	8003648 <__NVIC_EnableIRQ>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ffa2 	bl	8003740 <SysTick_Config>
 80037fc:	4603      	mov	r3, r0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0ac      	b.n	8003974 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f8b2 	bl	8003988 <DFSDM_GetChannelFromInstance>
 8003824:	4603      	mov	r3, r0
 8003826:	4a55      	ldr	r2, [pc, #340]	@ (800397c <HAL_DFSDM_ChannelInit+0x174>)
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e09f      	b.n	8003974 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7fd fd73 	bl	8001320 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800383a:	4b51      	ldr	r3, [pc, #324]	@ (8003980 <HAL_DFSDM_ChannelInit+0x178>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	4a4f      	ldr	r2, [pc, #316]	@ (8003980 <HAL_DFSDM_ChannelInit+0x178>)
 8003842:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003844:	4b4e      	ldr	r3, [pc, #312]	@ (8003980 <HAL_DFSDM_ChannelInit+0x178>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d125      	bne.n	8003898 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800384c:	4b4d      	ldr	r3, [pc, #308]	@ (8003984 <HAL_DFSDM_ChannelInit+0x17c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a4c      	ldr	r2, [pc, #304]	@ (8003984 <HAL_DFSDM_ChannelInit+0x17c>)
 8003852:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003856:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003858:	4b4a      	ldr	r3, [pc, #296]	@ (8003984 <HAL_DFSDM_ChannelInit+0x17c>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4948      	ldr	r1, [pc, #288]	@ (8003984 <HAL_DFSDM_ChannelInit+0x17c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003866:	4b47      	ldr	r3, [pc, #284]	@ (8003984 <HAL_DFSDM_ChannelInit+0x17c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a46      	ldr	r2, [pc, #280]	@ (8003984 <HAL_DFSDM_ChannelInit+0x17c>)
 800386c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003870:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	791b      	ldrb	r3, [r3, #4]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d108      	bne.n	800388c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800387a:	4b42      	ldr	r3, [pc, #264]	@ (8003984 <HAL_DFSDM_ChannelInit+0x17c>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	3b01      	subs	r3, #1
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	493f      	ldr	r1, [pc, #252]	@ (8003984 <HAL_DFSDM_ChannelInit+0x17c>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800388c:	4b3d      	ldr	r3, [pc, #244]	@ (8003984 <HAL_DFSDM_ChannelInit+0x17c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a3c      	ldr	r2, [pc, #240]	@ (8003984 <HAL_DFSDM_ChannelInit+0x17c>)
 8003892:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003896:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80038a6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6819      	ldr	r1, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80038b6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80038bc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 020f 	bic.w	r2, r2, #15
 80038d4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80038fc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6899      	ldr	r1, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	3b01      	subs	r3, #1
 800390e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f002 0207 	and.w	r2, r2, #7
 8003928:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003954:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f000 f810 	bl	8003988 <DFSDM_GetChannelFromInstance>
 8003968:	4602      	mov	r2, r0
 800396a:	4904      	ldr	r1, [pc, #16]	@ (800397c <HAL_DFSDM_ChannelInit+0x174>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200005e0 	.word	0x200005e0
 8003980:	200005dc 	.word	0x200005dc
 8003984:	40016000 	.word	0x40016000

08003988 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a1c      	ldr	r2, [pc, #112]	@ (8003a04 <DFSDM_GetChannelFromInstance+0x7c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d102      	bne.n	800399e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e02b      	b.n	80039f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a19      	ldr	r2, [pc, #100]	@ (8003a08 <DFSDM_GetChannelFromInstance+0x80>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d102      	bne.n	80039ac <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e024      	b.n	80039f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a17      	ldr	r2, [pc, #92]	@ (8003a0c <DFSDM_GetChannelFromInstance+0x84>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d102      	bne.n	80039ba <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80039b4:	2302      	movs	r3, #2
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e01d      	b.n	80039f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a14      	ldr	r2, [pc, #80]	@ (8003a10 <DFSDM_GetChannelFromInstance+0x88>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d102      	bne.n	80039c8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80039c2:	2304      	movs	r3, #4
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e016      	b.n	80039f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a12      	ldr	r2, [pc, #72]	@ (8003a14 <DFSDM_GetChannelFromInstance+0x8c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d102      	bne.n	80039d6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80039d0:	2305      	movs	r3, #5
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e00f      	b.n	80039f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003a18 <DFSDM_GetChannelFromInstance+0x90>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d102      	bne.n	80039e4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80039de:	2306      	movs	r3, #6
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	e008      	b.n	80039f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0d      	ldr	r2, [pc, #52]	@ (8003a1c <DFSDM_GetChannelFromInstance+0x94>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d102      	bne.n	80039f2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80039ec:	2307      	movs	r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e001      	b.n	80039f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80039f2:	2303      	movs	r3, #3
 80039f4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80039f6:	68fb      	ldr	r3, [r7, #12]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	40016000 	.word	0x40016000
 8003a08:	40016020 	.word	0x40016020
 8003a0c:	40016040 	.word	0x40016040
 8003a10:	40016080 	.word	0x40016080
 8003a14:	400160a0 	.word	0x400160a0
 8003a18:	400160c0 	.word	0x400160c0
 8003a1c:	400160e0 	.word	0x400160e0

08003a20 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d008      	beq.n	8003a4a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e040      	b.n	8003acc <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 020e 	bic.w	r2, r2, #14
 8003a58:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a68:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	f003 021c 	and.w	r2, r3, #28
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	2101      	movs	r1, #1
 8003a88:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8c:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a96:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00c      	beq.n	8003aba <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ab8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d005      	beq.n	8003afc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2204      	movs	r2, #4
 8003af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
 8003afa:	e047      	b.n	8003b8c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 020e 	bic.w	r2, r2, #14
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b30:	f003 021c 	and.w	r2, r3, #28
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	2101      	movs	r1, #1
 8003b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00c      	beq.n	8003b6c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b6a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
    }
  }
  return status;
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba6:	e166      	b.n	8003e76 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	2101      	movs	r1, #1
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8158 	beq.w	8003e70 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d005      	beq.n	8003bd8 <HAL_GPIO_Init+0x40>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d130      	bne.n	8003c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2203      	movs	r2, #3
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4013      	ands	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c0e:	2201      	movs	r2, #1
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	f003 0201 	and.w	r2, r3, #1
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d017      	beq.n	8003c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	2203      	movs	r2, #3
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d123      	bne.n	8003cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	08da      	lsrs	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3208      	adds	r2, #8
 8003c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	220f      	movs	r2, #15
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	08da      	lsrs	r2, r3, #3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3208      	adds	r2, #8
 8003cc4:	6939      	ldr	r1, [r7, #16]
 8003cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0203 	and.w	r2, r3, #3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80b2 	beq.w	8003e70 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d0c:	4b61      	ldr	r3, [pc, #388]	@ (8003e94 <HAL_GPIO_Init+0x2fc>)
 8003d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d10:	4a60      	ldr	r2, [pc, #384]	@ (8003e94 <HAL_GPIO_Init+0x2fc>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d18:	4b5e      	ldr	r3, [pc, #376]	@ (8003e94 <HAL_GPIO_Init+0x2fc>)
 8003d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d24:	4a5c      	ldr	r2, [pc, #368]	@ (8003e98 <HAL_GPIO_Init+0x300>)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	3302      	adds	r3, #2
 8003d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	220f      	movs	r2, #15
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d4e:	d02b      	beq.n	8003da8 <HAL_GPIO_Init+0x210>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a52      	ldr	r2, [pc, #328]	@ (8003e9c <HAL_GPIO_Init+0x304>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d025      	beq.n	8003da4 <HAL_GPIO_Init+0x20c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a51      	ldr	r2, [pc, #324]	@ (8003ea0 <HAL_GPIO_Init+0x308>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d01f      	beq.n	8003da0 <HAL_GPIO_Init+0x208>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a50      	ldr	r2, [pc, #320]	@ (8003ea4 <HAL_GPIO_Init+0x30c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d019      	beq.n	8003d9c <HAL_GPIO_Init+0x204>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a4f      	ldr	r2, [pc, #316]	@ (8003ea8 <HAL_GPIO_Init+0x310>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <HAL_GPIO_Init+0x200>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a4e      	ldr	r2, [pc, #312]	@ (8003eac <HAL_GPIO_Init+0x314>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00d      	beq.n	8003d94 <HAL_GPIO_Init+0x1fc>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a4d      	ldr	r2, [pc, #308]	@ (8003eb0 <HAL_GPIO_Init+0x318>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <HAL_GPIO_Init+0x1f8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a4c      	ldr	r2, [pc, #304]	@ (8003eb4 <HAL_GPIO_Init+0x31c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d101      	bne.n	8003d8c <HAL_GPIO_Init+0x1f4>
 8003d88:	2307      	movs	r3, #7
 8003d8a:	e00e      	b.n	8003daa <HAL_GPIO_Init+0x212>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	e00c      	b.n	8003daa <HAL_GPIO_Init+0x212>
 8003d90:	2306      	movs	r3, #6
 8003d92:	e00a      	b.n	8003daa <HAL_GPIO_Init+0x212>
 8003d94:	2305      	movs	r3, #5
 8003d96:	e008      	b.n	8003daa <HAL_GPIO_Init+0x212>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	e006      	b.n	8003daa <HAL_GPIO_Init+0x212>
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e004      	b.n	8003daa <HAL_GPIO_Init+0x212>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e002      	b.n	8003daa <HAL_GPIO_Init+0x212>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_GPIO_Init+0x212>
 8003da8:	2300      	movs	r3, #0
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	f002 0203 	and.w	r2, r2, #3
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	4093      	lsls	r3, r2
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dba:	4937      	ldr	r1, [pc, #220]	@ (8003e98 <HAL_GPIO_Init+0x300>)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb8 <HAL_GPIO_Init+0x320>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dec:	4a32      	ldr	r2, [pc, #200]	@ (8003eb8 <HAL_GPIO_Init+0x320>)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003df2:	4b31      	ldr	r3, [pc, #196]	@ (8003eb8 <HAL_GPIO_Init+0x320>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e16:	4a28      	ldr	r2, [pc, #160]	@ (8003eb8 <HAL_GPIO_Init+0x320>)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e1c:	4b26      	ldr	r3, [pc, #152]	@ (8003eb8 <HAL_GPIO_Init+0x320>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e40:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb8 <HAL_GPIO_Init+0x320>)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e46:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb8 <HAL_GPIO_Init+0x320>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e6a:	4a13      	ldr	r2, [pc, #76]	@ (8003eb8 <HAL_GPIO_Init+0x320>)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3301      	adds	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f ae91 	bne.w	8003ba8 <HAL_GPIO_Init+0x10>
  }
}
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	48000400 	.word	0x48000400
 8003ea0:	48000800 	.word	0x48000800
 8003ea4:	48000c00 	.word	0x48000c00
 8003ea8:	48001000 	.word	0x48001000
 8003eac:	48001400 	.word	0x48001400
 8003eb0:	48001800 	.word	0x48001800
 8003eb4:	48001c00 	.word	0x48001c00
 8003eb8:	40010400 	.word	0x40010400

08003ebc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003eca:	e0c9      	b.n	8004060 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ecc:	2201      	movs	r2, #1
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80bc 	beq.w	800405a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003ee2:	4a66      	ldr	r2, [pc, #408]	@ (800407c <HAL_GPIO_DeInit+0x1c0>)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	3302      	adds	r3, #2
 8003eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	220f      	movs	r2, #15
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f0a:	d02b      	beq.n	8003f64 <HAL_GPIO_DeInit+0xa8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a5c      	ldr	r2, [pc, #368]	@ (8004080 <HAL_GPIO_DeInit+0x1c4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d025      	beq.n	8003f60 <HAL_GPIO_DeInit+0xa4>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a5b      	ldr	r2, [pc, #364]	@ (8004084 <HAL_GPIO_DeInit+0x1c8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d01f      	beq.n	8003f5c <HAL_GPIO_DeInit+0xa0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a5a      	ldr	r2, [pc, #360]	@ (8004088 <HAL_GPIO_DeInit+0x1cc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d019      	beq.n	8003f58 <HAL_GPIO_DeInit+0x9c>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a59      	ldr	r2, [pc, #356]	@ (800408c <HAL_GPIO_DeInit+0x1d0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d013      	beq.n	8003f54 <HAL_GPIO_DeInit+0x98>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a58      	ldr	r2, [pc, #352]	@ (8004090 <HAL_GPIO_DeInit+0x1d4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00d      	beq.n	8003f50 <HAL_GPIO_DeInit+0x94>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a57      	ldr	r2, [pc, #348]	@ (8004094 <HAL_GPIO_DeInit+0x1d8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d007      	beq.n	8003f4c <HAL_GPIO_DeInit+0x90>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a56      	ldr	r2, [pc, #344]	@ (8004098 <HAL_GPIO_DeInit+0x1dc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d101      	bne.n	8003f48 <HAL_GPIO_DeInit+0x8c>
 8003f44:	2307      	movs	r3, #7
 8003f46:	e00e      	b.n	8003f66 <HAL_GPIO_DeInit+0xaa>
 8003f48:	2308      	movs	r3, #8
 8003f4a:	e00c      	b.n	8003f66 <HAL_GPIO_DeInit+0xaa>
 8003f4c:	2306      	movs	r3, #6
 8003f4e:	e00a      	b.n	8003f66 <HAL_GPIO_DeInit+0xaa>
 8003f50:	2305      	movs	r3, #5
 8003f52:	e008      	b.n	8003f66 <HAL_GPIO_DeInit+0xaa>
 8003f54:	2304      	movs	r3, #4
 8003f56:	e006      	b.n	8003f66 <HAL_GPIO_DeInit+0xaa>
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e004      	b.n	8003f66 <HAL_GPIO_DeInit+0xaa>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e002      	b.n	8003f66 <HAL_GPIO_DeInit+0xaa>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <HAL_GPIO_DeInit+0xaa>
 8003f64:	2300      	movs	r3, #0
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	f002 0203 	and.w	r2, r2, #3
 8003f6c:	0092      	lsls	r2, r2, #2
 8003f6e:	4093      	lsls	r3, r2
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d132      	bne.n	8003fdc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f76:	4b49      	ldr	r3, [pc, #292]	@ (800409c <HAL_GPIO_DeInit+0x1e0>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	4947      	ldr	r1, [pc, #284]	@ (800409c <HAL_GPIO_DeInit+0x1e0>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003f84:	4b45      	ldr	r3, [pc, #276]	@ (800409c <HAL_GPIO_DeInit+0x1e0>)
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	4943      	ldr	r1, [pc, #268]	@ (800409c <HAL_GPIO_DeInit+0x1e0>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f92:	4b42      	ldr	r3, [pc, #264]	@ (800409c <HAL_GPIO_DeInit+0x1e0>)
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	4940      	ldr	r1, [pc, #256]	@ (800409c <HAL_GPIO_DeInit+0x1e0>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003fa0:	4b3e      	ldr	r3, [pc, #248]	@ (800409c <HAL_GPIO_DeInit+0x1e0>)
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	493c      	ldr	r1, [pc, #240]	@ (800409c <HAL_GPIO_DeInit+0x1e0>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	220f      	movs	r2, #15
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800407c <HAL_GPIO_DeInit+0x1c0>)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	482b      	ldr	r0, [pc, #172]	@ (800407c <HAL_GPIO_DeInit+0x1c0>)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	3302      	adds	r3, #2
 8003fd8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2103      	movs	r1, #3
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	08da      	lsrs	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3208      	adds	r2, #8
 8003ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	220f      	movs	r2, #15
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	08d2      	lsrs	r2, r2, #3
 8004010:	4019      	ands	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3208      	adds	r2, #8
 8004016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	2103      	movs	r1, #3
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	401a      	ands	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	2101      	movs	r1, #1
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	401a      	ands	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	2103      	movs	r1, #3
 800404e:	fa01 f303 	lsl.w	r3, r1, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	401a      	ands	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	3301      	adds	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	f47f af2f 	bne.w	8003ecc <HAL_GPIO_DeInit+0x10>
  }
}
 800406e:	bf00      	nop
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40010000 	.word	0x40010000
 8004080:	48000400 	.word	0x48000400
 8004084:	48000800 	.word	0x48000800
 8004088:	48000c00 	.word	0x48000c00
 800408c:	48001000 	.word	0x48001000
 8004090:	48001400 	.word	0x48001400
 8004094:	48001800 	.word	0x48001800
 8004098:	48001c00 	.word	0x48001c00
 800409c:	40010400 	.word	0x40010400

080040a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
 80040ac:	4613      	mov	r3, r2
 80040ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040b0:	787b      	ldrb	r3, [r7, #1]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040bc:	e002      	b.n	80040c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040da:	4b08      	ldr	r3, [pc, #32]	@ (80040fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d006      	beq.n	80040f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040e6:	4a05      	ldr	r2, [pc, #20]	@ (80040fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc ff8c 	bl	800100c <HAL_GPIO_EXTI_Callback>
  }
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40010400 	.word	0x40010400

08004100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e08d      	b.n	800422e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fd f95e 	bl	80013e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2224      	movs	r2, #36	@ 0x24
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004150:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004160:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	e006      	b.n	8004188 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004186:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d108      	bne.n	80041a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	e007      	b.n	80041b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69d9      	ldr	r1, [r3, #28]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e021      	b.n	800428c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2224      	movs	r2, #36	@ 0x24
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fd f963 	bl	800152c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	4608      	mov	r0, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	817b      	strh	r3, [r7, #10]
 80042a6:	460b      	mov	r3, r1
 80042a8:	813b      	strh	r3, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	f040 80f9 	bne.w	80044ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_I2C_Mem_Write+0x34>
 80042c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d105      	bne.n	80042d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0ed      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_I2C_Mem_Write+0x4e>
 80042de:	2302      	movs	r3, #2
 80042e0:	e0e6      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042ea:	f7fd fefd 	bl	80020e8 <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2319      	movs	r3, #25
 80042f6:	2201      	movs	r2, #1
 80042f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 fac3 	bl	8004888 <I2C_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0d1      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2221      	movs	r2, #33	@ 0x21
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2240      	movs	r2, #64	@ 0x40
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a3a      	ldr	r2, [r7, #32]
 8004326:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800432c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004334:	88f8      	ldrh	r0, [r7, #6]
 8004336:	893a      	ldrh	r2, [r7, #8]
 8004338:	8979      	ldrh	r1, [r7, #10]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4603      	mov	r3, r0
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f9d3 	bl	80046f0 <I2C_RequestMemoryWrite>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0a9      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2bff      	cmp	r3, #255	@ 0xff
 8004364:	d90e      	bls.n	8004384 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	22ff      	movs	r2, #255	@ 0xff
 800436a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004370:	b2da      	uxtb	r2, r3
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	2300      	movs	r3, #0
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fc47 	bl	8004c10 <I2C_TransferConfig>
 8004382:	e00f      	b.n	80043a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	b2da      	uxtb	r2, r3
 8004394:	8979      	ldrh	r1, [r7, #10]
 8004396:	2300      	movs	r3, #0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fc36 	bl	8004c10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fac6 	bl	800493a <I2C_WaitOnTXISFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e07b      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d034      	beq.n	800445c <HAL_I2C_Mem_Write+0x1c8>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d130      	bne.n	800445c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	2200      	movs	r2, #0
 8004402:	2180      	movs	r1, #128	@ 0x80
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 fa3f 	bl	8004888 <I2C_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e04d      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2bff      	cmp	r3, #255	@ 0xff
 800441c:	d90e      	bls.n	800443c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	22ff      	movs	r2, #255	@ 0xff
 8004422:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	b2da      	uxtb	r2, r3
 800442a:	8979      	ldrh	r1, [r7, #10]
 800442c:	2300      	movs	r3, #0
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fbeb 	bl	8004c10 <I2C_TransferConfig>
 800443a:	e00f      	b.n	800445c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444a:	b2da      	uxtb	r2, r3
 800444c:	8979      	ldrh	r1, [r7, #10]
 800444e:	2300      	movs	r3, #0
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fbda 	bl	8004c10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d19e      	bne.n	80043a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 faac 	bl	80049c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e01a      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2220      	movs	r2, #32
 8004480:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <HAL_I2C_Mem_Write+0x224>)
 800448e:	400b      	ands	r3, r1
 8004490:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	fe00e800 	.word	0xfe00e800

080044bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	4608      	mov	r0, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	461a      	mov	r2, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	817b      	strh	r3, [r7, #10]
 80044ce:	460b      	mov	r3, r1
 80044d0:	813b      	strh	r3, [r7, #8]
 80044d2:	4613      	mov	r3, r2
 80044d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b20      	cmp	r3, #32
 80044e0:	f040 80fd 	bne.w	80046de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_I2C_Mem_Read+0x34>
 80044ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0f1      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_I2C_Mem_Read+0x4e>
 8004506:	2302      	movs	r3, #2
 8004508:	e0ea      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004512:	f7fd fde9 	bl	80020e8 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	2319      	movs	r3, #25
 800451e:	2201      	movs	r2, #1
 8004520:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f9af 	bl	8004888 <I2C_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0d5      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2222      	movs	r2, #34	@ 0x22
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2240      	movs	r2, #64	@ 0x40
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a3a      	ldr	r2, [r7, #32]
 800454e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004554:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800455c:	88f8      	ldrh	r0, [r7, #6]
 800455e:	893a      	ldrh	r2, [r7, #8]
 8004560:	8979      	ldrh	r1, [r7, #10]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	4603      	mov	r3, r0
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f913 	bl	8004798 <I2C_RequestMemoryRead>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0ad      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2bff      	cmp	r3, #255	@ 0xff
 800458c:	d90e      	bls.n	80045ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004598:	b2da      	uxtb	r2, r3
 800459a:	8979      	ldrh	r1, [r7, #10]
 800459c:	4b52      	ldr	r3, [pc, #328]	@ (80046e8 <HAL_I2C_Mem_Read+0x22c>)
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fb33 	bl	8004c10 <I2C_TransferConfig>
 80045aa:	e00f      	b.n	80045cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	8979      	ldrh	r1, [r7, #10]
 80045be:	4b4a      	ldr	r3, [pc, #296]	@ (80046e8 <HAL_I2C_Mem_Read+0x22c>)
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fb22 	bl	8004c10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	2200      	movs	r2, #0
 80045d4:	2104      	movs	r1, #4
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f956 	bl	8004888 <I2C_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e07c      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d034      	beq.n	800468c <HAL_I2C_Mem_Read+0x1d0>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004626:	2b00      	cmp	r3, #0
 8004628:	d130      	bne.n	800468c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004630:	2200      	movs	r2, #0
 8004632:	2180      	movs	r1, #128	@ 0x80
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f927 	bl	8004888 <I2C_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e04d      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2bff      	cmp	r3, #255	@ 0xff
 800464c:	d90e      	bls.n	800466c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004658:	b2da      	uxtb	r2, r3
 800465a:	8979      	ldrh	r1, [r7, #10]
 800465c:	2300      	movs	r3, #0
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fad3 	bl	8004c10 <I2C_TransferConfig>
 800466a:	e00f      	b.n	800468c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467a:	b2da      	uxtb	r2, r3
 800467c:	8979      	ldrh	r1, [r7, #10]
 800467e:	2300      	movs	r3, #0
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fac2 	bl	8004c10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d19a      	bne.n	80045cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f994 	bl	80049c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e01a      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2220      	movs	r2, #32
 80046b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <HAL_I2C_Mem_Read+0x230>)
 80046be:	400b      	ands	r3, r1
 80046c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e000      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80046de:	2302      	movs	r3, #2
  }
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	80002400 	.word	0x80002400
 80046ec:	fe00e800 	.word	0xfe00e800

080046f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	4608      	mov	r0, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	4603      	mov	r3, r0
 8004700:	817b      	strh	r3, [r7, #10]
 8004702:	460b      	mov	r3, r1
 8004704:	813b      	strh	r3, [r7, #8]
 8004706:	4613      	mov	r3, r2
 8004708:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	8979      	ldrh	r1, [r7, #10]
 8004710:	4b20      	ldr	r3, [pc, #128]	@ (8004794 <I2C_RequestMemoryWrite+0xa4>)
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fa79 	bl	8004c10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f909 	bl	800493a <I2C_WaitOnTXISFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e02c      	b.n	800478c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d105      	bne.n	8004744 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004738:	893b      	ldrh	r3, [r7, #8]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	629a      	str	r2, [r3, #40]	@ 0x28
 8004742:	e015      	b.n	8004770 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004744:	893b      	ldrh	r3, [r7, #8]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	b29b      	uxth	r3, r3
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	69b9      	ldr	r1, [r7, #24]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f8ef 	bl	800493a <I2C_WaitOnTXISFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e012      	b.n	800478c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004766:	893b      	ldrh	r3, [r7, #8]
 8004768:	b2da      	uxtb	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2200      	movs	r2, #0
 8004778:	2180      	movs	r1, #128	@ 0x80
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f884 	bl	8004888 <I2C_WaitOnFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	80002000 	.word	0x80002000

08004798 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	4608      	mov	r0, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	817b      	strh	r3, [r7, #10]
 80047aa:	460b      	mov	r3, r1
 80047ac:	813b      	strh	r3, [r7, #8]
 80047ae:	4613      	mov	r3, r2
 80047b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	8979      	ldrh	r1, [r7, #10]
 80047b8:	4b20      	ldr	r3, [pc, #128]	@ (800483c <I2C_RequestMemoryRead+0xa4>)
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	2300      	movs	r3, #0
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fa26 	bl	8004c10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	69b9      	ldr	r1, [r7, #24]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f8b6 	bl	800493a <I2C_WaitOnTXISFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e02c      	b.n	8004832 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047de:	893b      	ldrh	r3, [r7, #8]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80047e8:	e015      	b.n	8004816 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047ea:	893b      	ldrh	r3, [r7, #8]
 80047ec:	0a1b      	lsrs	r3, r3, #8
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	69b9      	ldr	r1, [r7, #24]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f89c 	bl	800493a <I2C_WaitOnTXISFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e012      	b.n	8004832 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800480c:	893b      	ldrh	r3, [r7, #8]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2200      	movs	r2, #0
 800481e:	2140      	movs	r1, #64	@ 0x40
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f831 	bl	8004888 <I2C_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	80002000 	.word	0x80002000

08004840 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b02      	cmp	r3, #2
 8004854:	d103      	bne.n	800485e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2200      	movs	r2, #0
 800485c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b01      	cmp	r3, #1
 800486a:	d007      	beq.n	800487c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	619a      	str	r2, [r3, #24]
  }
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004898:	e03b      	b.n	8004912 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f8d6 	bl	8004a50 <I2C_IsErrorOccurred>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e041      	b.n	8004932 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d02d      	beq.n	8004912 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b6:	f7fd fc17 	bl	80020e8 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d122      	bne.n	8004912 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	429a      	cmp	r2, r3
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d113      	bne.n	8004912 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e00f      	b.n	8004932 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699a      	ldr	r2, [r3, #24]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	429a      	cmp	r2, r3
 800492e:	d0b4      	beq.n	800489a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004946:	e033      	b.n	80049b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f87f 	bl	8004a50 <I2C_IsErrorOccurred>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e031      	b.n	80049c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d025      	beq.n	80049b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004964:	f7fd fbc0 	bl	80020e8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	429a      	cmp	r2, r3
 8004972:	d302      	bcc.n	800497a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11a      	bne.n	80049b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b02      	cmp	r3, #2
 8004986:	d013      	beq.n	80049b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498c:	f043 0220 	orr.w	r2, r3, #32
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e007      	b.n	80049c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d1c4      	bne.n	8004948 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049d4:	e02f      	b.n	8004a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f838 	bl	8004a50 <I2C_IsErrorOccurred>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e02d      	b.n	8004a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ea:	f7fd fb7d 	bl	80020e8 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d302      	bcc.n	8004a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d11a      	bne.n	8004a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d013      	beq.n	8004a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e007      	b.n	8004a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d1c8      	bne.n	80049d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08a      	sub	sp, #40	@ 0x28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d068      	beq.n	8004b4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2210      	movs	r2, #16
 8004a82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a84:	e049      	b.n	8004b1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d045      	beq.n	8004b1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a8e:	f7fd fb2b 	bl	80020e8 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d302      	bcc.n	8004aa4 <I2C_IsErrorOccurred+0x54>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d13a      	bne.n	8004b1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ab6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ac6:	d121      	bne.n	8004b0c <I2C_IsErrorOccurred+0xbc>
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ace:	d01d      	beq.n	8004b0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d01a      	beq.n	8004b0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ae4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ae6:	f7fd faff 	bl	80020e8 <HAL_GetTick>
 8004aea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aec:	e00e      	b.n	8004b0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004aee:	f7fd fafb 	bl	80020e8 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b19      	cmp	r3, #25
 8004afa:	d907      	bls.n	8004b0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	f043 0320 	orr.w	r3, r3, #32
 8004b02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004b0a:	e006      	b.n	8004b1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d1e9      	bne.n	8004aee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d003      	beq.n	8004b30 <I2C_IsErrorOccurred+0xe0>
 8004b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0aa      	beq.n	8004a86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	f043 0304 	orr.w	r3, r3, #4
 8004b46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00b      	beq.n	8004b78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f043 0308 	orr.w	r3, r3, #8
 8004b88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	f043 0302 	orr.w	r3, r3, #2
 8004baa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01c      	beq.n	8004bfe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7ff fe3b 	bl	8004840 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8004c0c <I2C_IsErrorOccurred+0x1bc>)
 8004bd6:	400b      	ands	r3, r1
 8004bd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3728      	adds	r7, #40	@ 0x28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	fe00e800 	.word	0xfe00e800

08004c10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	817b      	strh	r3, [r7, #10]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c22:	897b      	ldrh	r3, [r7, #10]
 8004c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c28:	7a7b      	ldrb	r3, [r7, #9]
 8004c2a:	041b      	lsls	r3, r3, #16
 8004c2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	0d5b      	lsrs	r3, r3, #21
 8004c4a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004c4e:	4b08      	ldr	r3, [pc, #32]	@ (8004c70 <I2C_TransferConfig+0x60>)
 8004c50:	430b      	orrs	r3, r1
 8004c52:	43db      	mvns	r3, r3
 8004c54:	ea02 0103 	and.w	r1, r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	03ff63ff 	.word	0x03ff63ff

08004c74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d138      	bne.n	8004cfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e032      	b.n	8004cfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2224      	movs	r2, #36	@ 0x24
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0201 	bic.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004cc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6819      	ldr	r1, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d139      	bne.n	8004d94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e033      	b.n	8004d96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2224      	movs	r2, #36	@ 0x24
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e000      	b.n	8004d96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
	...

08004da4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004db0:	f7fd f99a 	bl	80020e8 <HAL_GetTick>
 8004db4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	e092      	b.n	8004ee8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 808b 	bne.w	8004ee8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fc fbe6 	bl	80015a4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004dd8:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f88b 	bl	8004ef8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	4b42      	ldr	r3, [pc, #264]	@ (8004ef4 <HAL_OSPI_Init+0x150>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	68d1      	ldr	r1, [r2, #12]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6912      	ldr	r2, [r2, #16]
 8004df4:	3a01      	subs	r2, #1
 8004df6:	0412      	lsls	r2, r2, #16
 8004df8:	4311      	orrs	r1, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6952      	ldr	r2, [r2, #20]
 8004dfe:	3a01      	subs	r2, #1
 8004e00:	0212      	lsls	r2, r2, #8
 8004e02:	4311      	orrs	r1, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e08:	4311      	orrs	r1, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	69d2      	ldr	r2, [r2, #28]
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	0412      	lsls	r2, r2, #16
 8004e22:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	021a      	lsls	r2, r3, #8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2200      	movs	r2, #0
 8004e48:	2120      	movs	r1, #32
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fb9c 	bl	8005588 <OSPI_WaitFlagStateUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d146      	bne.n	8004ee8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	1e5a      	subs	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004e90:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d107      	bne.n	8004ed0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0202 	orr.w	r2, r2, #2
 8004ece:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ed8:	d103      	bne.n	8004ee2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ee0:	e002      	b.n	8004ee8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	f8e0f8f4 	.word	0xf8e0f8f4

08004ef8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b092      	sub	sp, #72	@ 0x48
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a08      	ldr	r2, [pc, #32]	@ (8004f58 <HAL_OSPIM_Config+0x40>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d105      	bne.n	8004f46 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8004f44:	e004      	b.n	8004f50 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004f46:	2301      	movs	r3, #1
 8004f48:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004f50:	2300      	movs	r3, #0
 8004f52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004f56:	e01f      	b.n	8004f98 <HAL_OSPIM_Config+0x80>
 8004f58:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004f5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004f60:	3301      	adds	r3, #1
 8004f62:	b2d8      	uxtb	r0, r3
 8004f64:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004f68:	f107 0114 	add.w	r1, r7, #20
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	4619      	mov	r1, r3
 8004f78:	f000 fb3e 	bl	80055f8 <OSPIM_GetConfig>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004f8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004f92:	3301      	adds	r3, #1
 8004f94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004f98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d9dd      	bls.n	8004f5c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004fa0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f040 82e3 	bne.w	8005570 <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004faa:	4bc5      	ldr	r3, [pc, #788]	@ (80052c0 <HAL_OSPIM_Config+0x3a8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00b      	beq.n	8004fce <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004fb6:	4bc2      	ldr	r3, [pc, #776]	@ (80052c0 <HAL_OSPIM_Config+0x3a8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4ac1      	ldr	r2, [pc, #772]	@ (80052c0 <HAL_OSPIM_Config+0x3a8>)
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004fc2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004fce:	4bbd      	ldr	r3, [pc, #756]	@ (80052c4 <HAL_OSPIM_Config+0x3ac>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004fda:	4bba      	ldr	r3, [pc, #744]	@ (80052c4 <HAL_OSPIM_Config+0x3ac>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4ab9      	ldr	r2, [pc, #740]	@ (80052c4 <HAL_OSPIM_Config+0x3ac>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004fe6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004fea:	f043 0302 	orr.w	r3, r3, #2
 8004fee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004ff2:	49b5      	ldr	r1, [pc, #724]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 8004ff4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	3348      	adds	r3, #72	@ 0x48
 8005000:	443b      	add	r3, r7
 8005002:	3b2c      	subs	r3, #44	@ 0x2c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3b01      	subs	r3, #1
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	48ae      	ldr	r0, [pc, #696]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 8005010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	3348      	adds	r3, #72	@ 0x48
 800501c:	443b      	add	r3, r7
 800501e:	3b2c      	subs	r3, #44	@ 0x2c
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3b01      	subs	r3, #1
 8005024:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4403      	add	r3, r0
 800502c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800502e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	3348      	adds	r3, #72	@ 0x48
 800503a:	443b      	add	r3, r7
 800503c:	3b34      	subs	r3, #52	@ 0x34
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80a1 	beq.w	8005188 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005046:	49a0      	ldr	r1, [pc, #640]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 8005048:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	3348      	adds	r3, #72	@ 0x48
 8005054:	443b      	add	r3, r7
 8005056:	3b34      	subs	r3, #52	@ 0x34
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3b01      	subs	r3, #1
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	6859      	ldr	r1, [r3, #4]
 8005062:	4899      	ldr	r0, [pc, #612]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 8005064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	3348      	adds	r3, #72	@ 0x48
 8005070:	443b      	add	r3, r7
 8005072:	3b34      	subs	r3, #52	@ 0x34
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3b01      	subs	r3, #1
 8005078:	f021 0201 	bic.w	r2, r1, #1
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4403      	add	r3, r0
 8005080:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	3348      	adds	r3, #72	@ 0x48
 800508e:	443b      	add	r3, r7
 8005090:	3b30      	subs	r3, #48	@ 0x30
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01d      	beq.n	80050d4 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005098:	498b      	ldr	r1, [pc, #556]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 800509a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	3348      	adds	r3, #72	@ 0x48
 80050a6:	443b      	add	r3, r7
 80050a8:	3b30      	subs	r3, #48	@ 0x30
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	6859      	ldr	r1, [r3, #4]
 80050b4:	4884      	ldr	r0, [pc, #528]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 80050b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	3348      	adds	r3, #72	@ 0x48
 80050c2:	443b      	add	r3, r7
 80050c4:	3b30      	subs	r3, #48	@ 0x30
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	f021 0210 	bic.w	r2, r1, #16
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4403      	add	r3, r0
 80050d2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80050d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	3348      	adds	r3, #72	@ 0x48
 80050e0:	443b      	add	r3, r7
 80050e2:	3b28      	subs	r3, #40	@ 0x28
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d021      	beq.n	800512e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80050ea:	4977      	ldr	r1, [pc, #476]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 80050ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	3348      	adds	r3, #72	@ 0x48
 80050f8:	443b      	add	r3, r7
 80050fa:	3b28      	subs	r3, #40	@ 0x28
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3b01      	subs	r3, #1
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	6859      	ldr	r1, [r3, #4]
 800510a:	486f      	ldr	r0, [pc, #444]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 800510c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	3348      	adds	r3, #72	@ 0x48
 8005118:	443b      	add	r3, r7
 800511a:	3b28      	subs	r3, #40	@ 0x28
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3b01      	subs	r3, #1
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4403      	add	r3, r0
 800512c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800512e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	3348      	adds	r3, #72	@ 0x48
 800513a:	443b      	add	r3, r7
 800513c:	3b24      	subs	r3, #36	@ 0x24
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d021      	beq.n	8005188 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005144:	4960      	ldr	r1, [pc, #384]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 8005146:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	3348      	adds	r3, #72	@ 0x48
 8005152:	443b      	add	r3, r7
 8005154:	3b24      	subs	r3, #36	@ 0x24
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3b01      	subs	r3, #1
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	4858      	ldr	r0, [pc, #352]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 8005166:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	3348      	adds	r3, #72	@ 0x48
 8005172:	443b      	add	r3, r7
 8005174:	3b24      	subs	r3, #36	@ 0x24
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3b01      	subs	r3, #1
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4403      	add	r3, r0
 8005186:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	6819      	ldr	r1, [r3, #0]
 800518c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	3348      	adds	r3, #72	@ 0x48
 800519a:	443b      	add	r3, r7
 800519c:	3b34      	subs	r3, #52	@ 0x34
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4299      	cmp	r1, r3
 80051a2:	d03c      	beq.n	800521e <HAL_OSPIM_Config+0x306>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6899      	ldr	r1, [r3, #8]
 80051a8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	3348      	adds	r3, #72	@ 0x48
 80051b6:	443b      	add	r3, r7
 80051b8:	3b2c      	subs	r3, #44	@ 0x2c
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4299      	cmp	r1, r3
 80051be:	d02e      	beq.n	800521e <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	3348      	adds	r3, #72	@ 0x48
 80051d2:	443b      	add	r3, r7
 80051d4:	3b30      	subs	r3, #48	@ 0x30
 80051d6:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80051d8:	4299      	cmp	r1, r3
 80051da:	d103      	bne.n	80051e4 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d11c      	bne.n	800521e <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	68d9      	ldr	r1, [r3, #12]
 80051e8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	3348      	adds	r3, #72	@ 0x48
 80051f6:	443b      	add	r3, r7
 80051f8:	3b28      	subs	r3, #40	@ 0x28
 80051fa:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80051fc:	4299      	cmp	r1, r3
 80051fe:	d00e      	beq.n	800521e <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6919      	ldr	r1, [r3, #16]
 8005204:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	3348      	adds	r3, #72	@ 0x48
 8005212:	443b      	add	r3, r7
 8005214:	3b24      	subs	r3, #36	@ 0x24
 8005216:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005218:	4299      	cmp	r1, r3
 800521a:	f040 80d4 	bne.w	80053c6 <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800521e:	492a      	ldr	r1, [pc, #168]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 8005220:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	3348      	adds	r3, #72	@ 0x48
 800522e:	443b      	add	r3, r7
 8005230:	3b34      	subs	r3, #52	@ 0x34
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3b01      	subs	r3, #1
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	6859      	ldr	r1, [r3, #4]
 800523c:	4822      	ldr	r0, [pc, #136]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 800523e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	3348      	adds	r3, #72	@ 0x48
 800524c:	443b      	add	r3, r7
 800524e:	3b34      	subs	r3, #52	@ 0x34
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3b01      	subs	r3, #1
 8005254:	f021 0201 	bic.w	r2, r1, #1
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4403      	add	r3, r0
 800525c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800525e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	3348      	adds	r3, #72	@ 0x48
 800526c:	443b      	add	r3, r7
 800526e:	3b30      	subs	r3, #48	@ 0x30
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01f      	beq.n	80052b6 <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005276:	4914      	ldr	r1, [pc, #80]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 8005278:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	3348      	adds	r3, #72	@ 0x48
 8005286:	443b      	add	r3, r7
 8005288:	3b30      	subs	r3, #48	@ 0x30
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3b01      	subs	r3, #1
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	6859      	ldr	r1, [r3, #4]
 8005294:	480c      	ldr	r0, [pc, #48]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 8005296:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	3348      	adds	r3, #72	@ 0x48
 80052a4:	443b      	add	r3, r7
 80052a6:	3b30      	subs	r3, #48	@ 0x30
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	f021 0210 	bic.w	r2, r1, #16
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4403      	add	r3, r0
 80052b4:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80052b6:	4904      	ldr	r1, [pc, #16]	@ (80052c8 <HAL_OSPIM_Config+0x3b0>)
 80052b8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80052bc:	e006      	b.n	80052cc <HAL_OSPIM_Config+0x3b4>
 80052be:	bf00      	nop
 80052c0:	a0001000 	.word	0xa0001000
 80052c4:	a0001400 	.word	0xa0001400
 80052c8:	50061c00 	.word	0x50061c00
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	3348      	adds	r3, #72	@ 0x48
 80052d6:	443b      	add	r3, r7
 80052d8:	3b2c      	subs	r3, #44	@ 0x2c
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3b01      	subs	r3, #1
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	6859      	ldr	r1, [r3, #4]
 80052e4:	48a5      	ldr	r0, [pc, #660]	@ (800557c <HAL_OSPIM_Config+0x664>)
 80052e6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	3348      	adds	r3, #72	@ 0x48
 80052f4:	443b      	add	r3, r7
 80052f6:	3b2c      	subs	r3, #44	@ 0x2c
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4403      	add	r3, r0
 8005304:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005306:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	3348      	adds	r3, #72	@ 0x48
 8005314:	443b      	add	r3, r7
 8005316:	3b28      	subs	r3, #40	@ 0x28
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d023      	beq.n	8005366 <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800531e:	4997      	ldr	r1, [pc, #604]	@ (800557c <HAL_OSPIM_Config+0x664>)
 8005320:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	3348      	adds	r3, #72	@ 0x48
 800532e:	443b      	add	r3, r7
 8005330:	3b28      	subs	r3, #40	@ 0x28
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3b01      	subs	r3, #1
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	6859      	ldr	r1, [r3, #4]
 8005340:	488e      	ldr	r0, [pc, #568]	@ (800557c <HAL_OSPIM_Config+0x664>)
 8005342:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	3348      	adds	r3, #72	@ 0x48
 8005350:	443b      	add	r3, r7
 8005352:	3b28      	subs	r3, #40	@ 0x28
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3b01      	subs	r3, #1
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4403      	add	r3, r0
 8005364:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005366:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	3348      	adds	r3, #72	@ 0x48
 8005374:	443b      	add	r3, r7
 8005376:	3b24      	subs	r3, #36	@ 0x24
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d023      	beq.n	80053c6 <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800537e:	497f      	ldr	r1, [pc, #508]	@ (800557c <HAL_OSPIM_Config+0x664>)
 8005380:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	3348      	adds	r3, #72	@ 0x48
 800538e:	443b      	add	r3, r7
 8005390:	3b24      	subs	r3, #36	@ 0x24
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3b01      	subs	r3, #1
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	6859      	ldr	r1, [r3, #4]
 80053a0:	4876      	ldr	r0, [pc, #472]	@ (800557c <HAL_OSPIM_Config+0x664>)
 80053a2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	3348      	adds	r3, #72	@ 0x48
 80053b0:	443b      	add	r3, r7
 80053b2:	3b24      	subs	r3, #36	@ 0x24
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4403      	add	r3, r0
 80053c4:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80053c6:	4a6d      	ldr	r2, [pc, #436]	@ (800557c <HAL_OSPIM_Config+0x664>)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053da:	025b      	lsls	r3, r3, #9
 80053dc:	431a      	orrs	r2, r3
 80053de:	4967      	ldr	r1, [pc, #412]	@ (800557c <HAL_OSPIM_Config+0x664>)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80053f0:	4a62      	ldr	r2, [pc, #392]	@ (800557c <HAL_OSPIM_Config+0x664>)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f023 0203 	bic.w	r2, r3, #3
 8005402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	431a      	orrs	r2, r3
 8005408:	495c      	ldr	r1, [pc, #368]	@ (800557c <HAL_OSPIM_Config+0x664>)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3b01      	subs	r3, #1
 8005410:	f042 0201 	orr.w	r2, r2, #1
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d014      	beq.n	800544c <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005422:	4a56      	ldr	r2, [pc, #344]	@ (800557c <HAL_OSPIM_Config+0x664>)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	3b01      	subs	r3, #1
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005436:	015b      	lsls	r3, r3, #5
 8005438:	431a      	orrs	r2, r3
 800543a:	4950      	ldr	r1, [pc, #320]	@ (800557c <HAL_OSPIM_Config+0x664>)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	3b01      	subs	r3, #1
 8005442:	f042 0210 	orr.w	r2, r2, #16
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d019      	beq.n	800548c <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005458:	4a48      	ldr	r2, [pc, #288]	@ (800557c <HAL_OSPIM_Config+0x664>)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	3b01      	subs	r3, #1
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800546e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005470:	049b      	lsls	r3, r3, #18
 8005472:	431a      	orrs	r2, r3
 8005474:	4941      	ldr	r1, [pc, #260]	@ (800557c <HAL_OSPIM_Config+0x664>)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	3b01      	subs	r3, #1
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	e01c      	b.n	80054c6 <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d018      	beq.n	80054c6 <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005494:	4a39      	ldr	r2, [pc, #228]	@ (800557c <HAL_OSPIM_Config+0x664>)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	3b01      	subs	r3, #1
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80054aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054ac:	069b      	lsls	r3, r3, #26
 80054ae:	431a      	orrs	r2, r3
 80054b0:	4932      	ldr	r1, [pc, #200]	@ (800557c <HAL_OSPIM_Config+0x664>)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d019      	beq.n	8005506 <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80054d2:	4a2a      	ldr	r2, [pc, #168]	@ (800557c <HAL_OSPIM_Config+0x664>)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	3b01      	subs	r3, #1
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80054e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054ea:	049b      	lsls	r3, r3, #18
 80054ec:	431a      	orrs	r2, r3
 80054ee:	4923      	ldr	r1, [pc, #140]	@ (800557c <HAL_OSPIM_Config+0x664>)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	605a      	str	r2, [r3, #4]
 8005504:	e01c      	b.n	8005540 <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d018      	beq.n	8005540 <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800550e:	4a1b      	ldr	r2, [pc, #108]	@ (800557c <HAL_OSPIM_Config+0x664>)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	3b01      	subs	r3, #1
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005526:	069b      	lsls	r3, r3, #26
 8005528:	431a      	orrs	r2, r3
 800552a:	4914      	ldr	r1, [pc, #80]	@ (800557c <HAL_OSPIM_Config+0x664>)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	3b01      	subs	r3, #1
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005540:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800554c:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <HAL_OSPIM_Config+0x668>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a0b      	ldr	r2, [pc, #44]	@ (8005580 <HAL_OSPIM_Config+0x668>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005558:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005564:	4b07      	ldr	r3, [pc, #28]	@ (8005584 <HAL_OSPIM_Config+0x66c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a06      	ldr	r2, [pc, #24]	@ (8005584 <HAL_OSPIM_Config+0x66c>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005570:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005574:	4618      	mov	r0, r3
 8005576:	3748      	adds	r7, #72	@ 0x48
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	50061c00 	.word	0x50061c00
 8005580:	a0001000 	.word	0xa0001000
 8005584:	a0001400 	.word	0xa0001400

08005588 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005598:	e01a      	b.n	80055d0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d016      	beq.n	80055d0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a2:	f7fc fda1 	bl	80020e8 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055be:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c4:	f043 0201 	orr.w	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e00e      	b.n	80055ee <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6a1a      	ldr	r2, [r3, #32]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4013      	ands	r3, r2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bf14      	ite	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	2300      	moveq	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d1d6      	bne.n	800559a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	6039      	str	r1, [r7, #0]
 8005602:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <OSPIM_GetConfig+0x26>
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d802      	bhi.n	800561e <OSPIM_GetConfig+0x26>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	75fb      	strb	r3, [r7, #23]
 8005622:	e08e      	b.n	8005742 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2200      	movs	r2, #0
 800562e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2200      	movs	r2, #0
 8005634:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2200      	movs	r2, #0
 800563a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2200      	movs	r2, #0
 8005640:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d101      	bne.n	800564c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005648:	4b41      	ldr	r3, [pc, #260]	@ (8005750 <OSPIM_GetConfig+0x158>)
 800564a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e074      	b.n	800573c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8005652:	4a40      	ldr	r2, [pc, #256]	@ (8005754 <OSPIM_GetConfig+0x15c>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4053      	eors	r3, r2
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4053      	eors	r3, r2
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4053      	eors	r3, r2
 80056ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d103      	bne.n	80056be <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d018      	beq.n	80056fa <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4053      	eors	r3, r2
 80056ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d111      	bne.n	80056fa <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d106      	bne.n	80056ee <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	60da      	str	r2, [r3, #12]
 80056ec:	e005      	b.n	80056fa <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d018      	beq.n	8005736 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4053      	eors	r3, r2
 800570a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d111      	bne.n	8005736 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	611a      	str	r2, [r3, #16]
 8005728:	e005      	b.n	8005736 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3301      	adds	r3, #1
 800572e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3301      	adds	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d987      	bls.n	8005652 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	04040222 	.word	0x04040222
 8005754:	50061c00 	.word	0x50061c00

08005758 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800575c:	4b05      	ldr	r3, [pc, #20]	@ (8005774 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a04      	ldr	r2, [pc, #16]	@ (8005774 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005766:	6013      	str	r3, [r2, #0]
}
 8005768:	bf00      	nop
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40007000 	.word	0x40007000

08005778 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800577c:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005788:	d102      	bne.n	8005790 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800578a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800578e:	e00b      	b.n	80057a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005790:	4b08      	ldr	r3, [pc, #32]	@ (80057b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800579e:	d102      	bne.n	80057a6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80057a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057a4:	e000      	b.n	80057a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80057a6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40007000 	.word	0x40007000

080057b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d141      	bne.n	800584a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057c6:	4b4b      	ldr	r3, [pc, #300]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d2:	d131      	bne.n	8005838 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057d4:	4b47      	ldr	r3, [pc, #284]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057da:	4a46      	ldr	r2, [pc, #280]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057e4:	4b43      	ldr	r3, [pc, #268]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057ec:	4a41      	ldr	r2, [pc, #260]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80057f4:	4b40      	ldr	r3, [pc, #256]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2232      	movs	r2, #50	@ 0x32
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	4a3f      	ldr	r2, [pc, #252]	@ (80058fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005800:	fba2 2303 	umull	r2, r3, r2, r3
 8005804:	0c9b      	lsrs	r3, r3, #18
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800580a:	e002      	b.n	8005812 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3b01      	subs	r3, #1
 8005810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005812:	4b38      	ldr	r3, [pc, #224]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800581a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800581e:	d102      	bne.n	8005826 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f2      	bne.n	800580c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005826:	4b33      	ldr	r3, [pc, #204]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800582e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005832:	d158      	bne.n	80058e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e057      	b.n	80058e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005838:	4b2e      	ldr	r3, [pc, #184]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800583e:	4a2d      	ldr	r2, [pc, #180]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005844:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005848:	e04d      	b.n	80058e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005850:	d141      	bne.n	80058d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005852:	4b28      	ldr	r3, [pc, #160]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800585a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800585e:	d131      	bne.n	80058c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005860:	4b24      	ldr	r3, [pc, #144]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005866:	4a23      	ldr	r2, [pc, #140]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800586c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005870:	4b20      	ldr	r3, [pc, #128]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005878:	4a1e      	ldr	r2, [pc, #120]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800587a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800587e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005880:	4b1d      	ldr	r3, [pc, #116]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2232      	movs	r2, #50	@ 0x32
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	4a1c      	ldr	r2, [pc, #112]	@ (80058fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800588c:	fba2 2303 	umull	r2, r3, r2, r3
 8005890:	0c9b      	lsrs	r3, r3, #18
 8005892:	3301      	adds	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005896:	e002      	b.n	800589e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3b01      	subs	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800589e:	4b15      	ldr	r3, [pc, #84]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058aa:	d102      	bne.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1f2      	bne.n	8005898 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058b2:	4b10      	ldr	r3, [pc, #64]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058be:	d112      	bne.n	80058e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e011      	b.n	80058e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058c4:	4b0b      	ldr	r3, [pc, #44]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ca:	4a0a      	ldr	r2, [pc, #40]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058d4:	e007      	b.n	80058e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058d6:	4b07      	ldr	r3, [pc, #28]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058de:	4a05      	ldr	r2, [pc, #20]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058e4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40007000 	.word	0x40007000
 80058f8:	20000004 	.word	0x20000004
 80058fc:	431bde83 	.word	0x431bde83

08005900 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f000 bc08 	b.w	8006124 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005914:	4b96      	ldr	r3, [pc, #600]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800591e:	4b94      	ldr	r3, [pc, #592]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80e4 	beq.w	8005afe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <HAL_RCC_OscConfig+0x4c>
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b0c      	cmp	r3, #12
 8005940:	f040 808b 	bne.w	8005a5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b01      	cmp	r3, #1
 8005948:	f040 8087 	bne.w	8005a5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800594c:	4b88      	ldr	r3, [pc, #544]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCC_OscConfig+0x64>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e3df      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	4b81      	ldr	r3, [pc, #516]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d004      	beq.n	800597e <HAL_RCC_OscConfig+0x7e>
 8005974:	4b7e      	ldr	r3, [pc, #504]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800597c:	e005      	b.n	800598a <HAL_RCC_OscConfig+0x8a>
 800597e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800598a:	4293      	cmp	r3, r2
 800598c:	d223      	bcs.n	80059d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fdcc 	bl	8006530 <RCC_SetFlashLatencyFromMSIRange>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e3c0      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059a2:	4b73      	ldr	r3, [pc, #460]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a72      	ldr	r2, [pc, #456]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059a8:	f043 0308 	orr.w	r3, r3, #8
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	4b70      	ldr	r3, [pc, #448]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	496d      	ldr	r1, [pc, #436]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059c0:	4b6b      	ldr	r3, [pc, #428]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	4968      	ldr	r1, [pc, #416]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	604b      	str	r3, [r1, #4]
 80059d4:	e025      	b.n	8005a22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059d6:	4b66      	ldr	r3, [pc, #408]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a65      	ldr	r2, [pc, #404]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059dc:	f043 0308 	orr.w	r3, r3, #8
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	4b63      	ldr	r3, [pc, #396]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	4960      	ldr	r1, [pc, #384]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059f4:	4b5e      	ldr	r3, [pc, #376]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	495b      	ldr	r1, [pc, #364]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fd8c 	bl	8006530 <RCC_SetFlashLatencyFromMSIRange>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e380      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a22:	f000 fcc1 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4b51      	ldr	r3, [pc, #324]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	4950      	ldr	r1, [pc, #320]	@ (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005a34:	5ccb      	ldrb	r3, [r1, r3]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3e:	4a4e      	ldr	r2, [pc, #312]	@ (8005b78 <HAL_RCC_OscConfig+0x278>)
 8005a40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a42:	4b4e      	ldr	r3, [pc, #312]	@ (8005b7c <HAL_RCC_OscConfig+0x27c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fc fafe 	bl	8002048 <HAL_InitTick>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d052      	beq.n	8005afc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	e364      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d032      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a62:	4b43      	ldr	r3, [pc, #268]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a42      	ldr	r2, [pc, #264]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a68:	f043 0301 	orr.w	r3, r3, #1
 8005a6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a6e:	f7fc fb3b 	bl	80020e8 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a76:	f7fc fb37 	bl	80020e8 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e34d      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a88:	4b39      	ldr	r3, [pc, #228]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a94:	4b36      	ldr	r3, [pc, #216]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a35      	ldr	r2, [pc, #212]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a9a:	f043 0308 	orr.w	r3, r3, #8
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4b33      	ldr	r3, [pc, #204]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	4930      	ldr	r1, [pc, #192]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	021b      	lsls	r3, r3, #8
 8005ac0:	492b      	ldr	r1, [pc, #172]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	604b      	str	r3, [r1, #4]
 8005ac6:	e01a      	b.n	8005afe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ac8:	4b29      	ldr	r3, [pc, #164]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a28      	ldr	r2, [pc, #160]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ad4:	f7fc fb08 	bl	80020e8 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005adc:	f7fc fb04 	bl	80020e8 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e31a      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005aee:	4b20      	ldr	r3, [pc, #128]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f0      	bne.n	8005adc <HAL_RCC_OscConfig+0x1dc>
 8005afa:	e000      	b.n	8005afe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005afc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d073      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_OscConfig+0x21c>
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b0c      	cmp	r3, #12
 8005b14:	d10e      	bne.n	8005b34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d10b      	bne.n	8005b34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1c:	4b14      	ldr	r3, [pc, #80]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d063      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x2f0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d15f      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e2f7      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b3c:	d106      	bne.n	8005b4c <HAL_RCC_OscConfig+0x24c>
 8005b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a0b      	ldr	r2, [pc, #44]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e025      	b.n	8005b98 <HAL_RCC_OscConfig+0x298>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b54:	d114      	bne.n	8005b80 <HAL_RCC_OscConfig+0x280>
 8005b56:	4b06      	ldr	r3, [pc, #24]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a05      	ldr	r2, [pc, #20]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	4b03      	ldr	r3, [pc, #12]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a02      	ldr	r2, [pc, #8]	@ (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	e013      	b.n	8005b98 <HAL_RCC_OscConfig+0x298>
 8005b70:	40021000 	.word	0x40021000
 8005b74:	080091f4 	.word	0x080091f4
 8005b78:	20000004 	.word	0x20000004
 8005b7c:	20000018 	.word	0x20000018
 8005b80:	4ba0      	ldr	r3, [pc, #640]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a9f      	ldr	r2, [pc, #636]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	4b9d      	ldr	r3, [pc, #628]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a9c      	ldr	r2, [pc, #624]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d013      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fc faa2 	bl	80020e8 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ba8:	f7fc fa9e 	bl	80020e8 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b64      	cmp	r3, #100	@ 0x64
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e2b4      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bba:	4b92      	ldr	r3, [pc, #584]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f0      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x2a8>
 8005bc6:	e014      	b.n	8005bf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc8:	f7fc fa8e 	bl	80020e8 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bd0:	f7fc fa8a 	bl	80020e8 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b64      	cmp	r3, #100	@ 0x64
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e2a0      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005be2:	4b88      	ldr	r3, [pc, #544]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f0      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x2d0>
 8005bee:	e000      	b.n	8005bf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d060      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_OscConfig+0x310>
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b0c      	cmp	r3, #12
 8005c08:	d119      	bne.n	8005c3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d116      	bne.n	8005c3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c10:	4b7c      	ldr	r3, [pc, #496]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_OscConfig+0x328>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e27d      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c28:	4b76      	ldr	r3, [pc, #472]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	061b      	lsls	r3, r3, #24
 8005c36:	4973      	ldr	r1, [pc, #460]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c3c:	e040      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d023      	beq.n	8005c8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c46:	4b6f      	ldr	r3, [pc, #444]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a6e      	ldr	r2, [pc, #440]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c52:	f7fc fa49 	bl	80020e8 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c5a:	f7fc fa45 	bl	80020e8 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e25b      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c6c:	4b65      	ldr	r3, [pc, #404]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0f0      	beq.n	8005c5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c78:	4b62      	ldr	r3, [pc, #392]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	061b      	lsls	r3, r3, #24
 8005c86:	495f      	ldr	r1, [pc, #380]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	604b      	str	r3, [r1, #4]
 8005c8c:	e018      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a5c      	ldr	r2, [pc, #368]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9a:	f7fc fa25 	bl	80020e8 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca2:	f7fc fa21 	bl	80020e8 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e237      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cb4:	4b53      	ldr	r3, [pc, #332]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f0      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d03c      	beq.n	8005d46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01c      	beq.n	8005d0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cda:	4a4a      	ldr	r2, [pc, #296]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce4:	f7fc fa00 	bl	80020e8 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cec:	f7fc f9fc 	bl	80020e8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e212      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cfe:	4b41      	ldr	r3, [pc, #260]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0ef      	beq.n	8005cec <HAL_RCC_OscConfig+0x3ec>
 8005d0c:	e01b      	b.n	8005d46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d14:	4a3b      	ldr	r2, [pc, #236]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1e:	f7fc f9e3 	bl	80020e8 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d26:	f7fc f9df 	bl	80020e8 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e1f5      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d38:	4b32      	ldr	r3, [pc, #200]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ef      	bne.n	8005d26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 80a6 	beq.w	8005ea0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d54:	2300      	movs	r3, #0
 8005d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d58:	4b2a      	ldr	r3, [pc, #168]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10d      	bne.n	8005d80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d64:	4b27      	ldr	r3, [pc, #156]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d68:	4a26      	ldr	r2, [pc, #152]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d70:	4b24      	ldr	r3, [pc, #144]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d80:	4b21      	ldr	r3, [pc, #132]	@ (8005e08 <HAL_RCC_OscConfig+0x508>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d118      	bne.n	8005dbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005e08 <HAL_RCC_OscConfig+0x508>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1d      	ldr	r2, [pc, #116]	@ (8005e08 <HAL_RCC_OscConfig+0x508>)
 8005d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d98:	f7fc f9a6 	bl	80020e8 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da0:	f7fc f9a2 	bl	80020e8 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e1b8      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005db2:	4b15      	ldr	r3, [pc, #84]	@ (8005e08 <HAL_RCC_OscConfig+0x508>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d108      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x4d8>
 8005dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dd6:	e029      	b.n	8005e2c <HAL_RCC_OscConfig+0x52c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b05      	cmp	r3, #5
 8005dde:	d115      	bne.n	8005e0c <HAL_RCC_OscConfig+0x50c>
 8005de0:	4b08      	ldr	r3, [pc, #32]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de6:	4a07      	ldr	r2, [pc, #28]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005de8:	f043 0304 	orr.w	r3, r3, #4
 8005dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005df0:	4b04      	ldr	r3, [pc, #16]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df6:	4a03      	ldr	r2, [pc, #12]	@ (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005df8:	f043 0301 	orr.w	r3, r3, #1
 8005dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e00:	e014      	b.n	8005e2c <HAL_RCC_OscConfig+0x52c>
 8005e02:	bf00      	nop
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40007000 	.word	0x40007000
 8005e0c:	4b9d      	ldr	r3, [pc, #628]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e12:	4a9c      	ldr	r2, [pc, #624]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e1c:	4b99      	ldr	r3, [pc, #612]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e22:	4a98      	ldr	r2, [pc, #608]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e24:	f023 0304 	bic.w	r3, r3, #4
 8005e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d016      	beq.n	8005e62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e34:	f7fc f958 	bl	80020e8 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e3a:	e00a      	b.n	8005e52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3c:	f7fc f954 	bl	80020e8 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e168      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e52:	4b8c      	ldr	r3, [pc, #560]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0ed      	beq.n	8005e3c <HAL_RCC_OscConfig+0x53c>
 8005e60:	e015      	b.n	8005e8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e62:	f7fc f941 	bl	80020e8 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e68:	e00a      	b.n	8005e80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6a:	f7fc f93d 	bl	80020e8 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e151      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e80:	4b80      	ldr	r3, [pc, #512]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1ed      	bne.n	8005e6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e8e:	7ffb      	ldrb	r3, [r7, #31]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d105      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e94:	4b7b      	ldr	r3, [pc, #492]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e98:	4a7a      	ldr	r2, [pc, #488]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d03c      	beq.n	8005f26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01c      	beq.n	8005eee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005eb4:	4b73      	ldr	r3, [pc, #460]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eba:	4a72      	ldr	r2, [pc, #456]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ebc:	f043 0301 	orr.w	r3, r3, #1
 8005ec0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec4:	f7fc f910 	bl	80020e8 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ecc:	f7fc f90c 	bl	80020e8 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e122      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ede:	4b69      	ldr	r3, [pc, #420]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0ef      	beq.n	8005ecc <HAL_RCC_OscConfig+0x5cc>
 8005eec:	e01b      	b.n	8005f26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005eee:	4b65      	ldr	r3, [pc, #404]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ef4:	4a63      	ldr	r2, [pc, #396]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ef6:	f023 0301 	bic.w	r3, r3, #1
 8005efa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efe:	f7fc f8f3 	bl	80020e8 <HAL_GetTick>
 8005f02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f06:	f7fc f8ef 	bl	80020e8 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e105      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f18:	4b5a      	ldr	r3, [pc, #360]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1ef      	bne.n	8005f06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80f9 	beq.w	8006122 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	f040 80cf 	bne.w	80060d8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f3a:	4b52      	ldr	r3, [pc, #328]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f003 0203 	and.w	r2, r3, #3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d12c      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d123      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d11b      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d113      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d109      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d071      	beq.n	800608c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	2b0c      	cmp	r3, #12
 8005fac:	d068      	beq.n	8006080 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005fae:	4b35      	ldr	r3, [pc, #212]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005fba:	4b32      	ldr	r3, [pc, #200]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e0ac      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005fca:	4b2e      	ldr	r3, [pc, #184]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a2d      	ldr	r2, [pc, #180]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005fd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fd6:	f7fc f887 	bl	80020e8 <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fde:	f7fc f883 	bl	80020e8 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e099      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff0:	4b24      	ldr	r3, [pc, #144]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f0      	bne.n	8005fde <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ffc:	4b21      	ldr	r3, [pc, #132]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	4b21      	ldr	r3, [pc, #132]	@ (8006088 <HAL_RCC_OscConfig+0x788>)
 8006002:	4013      	ands	r3, r2
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800600c:	3a01      	subs	r2, #1
 800600e:	0112      	lsls	r2, r2, #4
 8006010:	4311      	orrs	r1, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006016:	0212      	lsls	r2, r2, #8
 8006018:	4311      	orrs	r1, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800601e:	0852      	lsrs	r2, r2, #1
 8006020:	3a01      	subs	r2, #1
 8006022:	0552      	lsls	r2, r2, #21
 8006024:	4311      	orrs	r1, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800602a:	0852      	lsrs	r2, r2, #1
 800602c:	3a01      	subs	r2, #1
 800602e:	0652      	lsls	r2, r2, #25
 8006030:	4311      	orrs	r1, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006036:	06d2      	lsls	r2, r2, #27
 8006038:	430a      	orrs	r2, r1
 800603a:	4912      	ldr	r1, [pc, #72]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 800603c:	4313      	orrs	r3, r2
 800603e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006040:	4b10      	ldr	r3, [pc, #64]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a0f      	ldr	r2, [pc, #60]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8006046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800604a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800604c:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4a0c      	ldr	r2, [pc, #48]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8006052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006058:	f7fc f846 	bl	80020e8 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006060:	f7fc f842 	bl	80020e8 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e058      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006072:	4b04      	ldr	r3, [pc, #16]	@ (8006084 <HAL_RCC_OscConfig+0x784>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800607e:	e050      	b.n	8006122 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e04f      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
 8006084:	40021000 	.word	0x40021000
 8006088:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800608c:	4b27      	ldr	r3, [pc, #156]	@ (800612c <HAL_RCC_OscConfig+0x82c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d144      	bne.n	8006122 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006098:	4b24      	ldr	r3, [pc, #144]	@ (800612c <HAL_RCC_OscConfig+0x82c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a23      	ldr	r2, [pc, #140]	@ (800612c <HAL_RCC_OscConfig+0x82c>)
 800609e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060a4:	4b21      	ldr	r3, [pc, #132]	@ (800612c <HAL_RCC_OscConfig+0x82c>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4a20      	ldr	r2, [pc, #128]	@ (800612c <HAL_RCC_OscConfig+0x82c>)
 80060aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060b0:	f7fc f81a 	bl	80020e8 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b8:	f7fc f816 	bl	80020e8 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e02c      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ca:	4b18      	ldr	r3, [pc, #96]	@ (800612c <HAL_RCC_OscConfig+0x82c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0x7b8>
 80060d6:	e024      	b.n	8006122 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d01f      	beq.n	800611e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060de:	4b13      	ldr	r3, [pc, #76]	@ (800612c <HAL_RCC_OscConfig+0x82c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a12      	ldr	r2, [pc, #72]	@ (800612c <HAL_RCC_OscConfig+0x82c>)
 80060e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ea:	f7fb fffd 	bl	80020e8 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060f0:	e008      	b.n	8006104 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f2:	f7fb fff9 	bl	80020e8 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e00f      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006104:	4b09      	ldr	r3, [pc, #36]	@ (800612c <HAL_RCC_OscConfig+0x82c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f0      	bne.n	80060f2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006110:	4b06      	ldr	r3, [pc, #24]	@ (800612c <HAL_RCC_OscConfig+0x82c>)
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	4905      	ldr	r1, [pc, #20]	@ (800612c <HAL_RCC_OscConfig+0x82c>)
 8006116:	4b06      	ldr	r3, [pc, #24]	@ (8006130 <HAL_RCC_OscConfig+0x830>)
 8006118:	4013      	ands	r3, r2
 800611a:	60cb      	str	r3, [r1, #12]
 800611c:	e001      	b.n	8006122 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3720      	adds	r7, #32
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40021000 	.word	0x40021000
 8006130:	feeefffc 	.word	0xfeeefffc

08006134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e11d      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800614c:	4b90      	ldr	r3, [pc, #576]	@ (8006390 <HAL_RCC_ClockConfig+0x25c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d910      	bls.n	800617c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615a:	4b8d      	ldr	r3, [pc, #564]	@ (8006390 <HAL_RCC_ClockConfig+0x25c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f023 020f 	bic.w	r2, r3, #15
 8006162:	498b      	ldr	r1, [pc, #556]	@ (8006390 <HAL_RCC_ClockConfig+0x25c>)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	4313      	orrs	r3, r2
 8006168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800616a:	4b89      	ldr	r3, [pc, #548]	@ (8006390 <HAL_RCC_ClockConfig+0x25c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e105      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d010      	beq.n	80061aa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	4b81      	ldr	r3, [pc, #516]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006194:	429a      	cmp	r2, r3
 8006196:	d908      	bls.n	80061aa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006198:	4b7e      	ldr	r3, [pc, #504]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	497b      	ldr	r1, [pc, #492]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d079      	beq.n	80062aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d11e      	bne.n	80061fc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061be:	4b75      	ldr	r3, [pc, #468]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e0dc      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80061ce:	f000 fa09 	bl	80065e4 <RCC_GetSysClockFreqFromPLLSource>
 80061d2:	4603      	mov	r3, r0
 80061d4:	4a70      	ldr	r2, [pc, #448]	@ (8006398 <HAL_RCC_ClockConfig+0x264>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d946      	bls.n	8006268 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80061da:	4b6e      	ldr	r3, [pc, #440]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d140      	bne.n	8006268 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80061e6:	4b6b      	ldr	r3, [pc, #428]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061ee:	4a69      	ldr	r2, [pc, #420]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 80061f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80061f6:	2380      	movs	r3, #128	@ 0x80
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	e035      	b.n	8006268 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d107      	bne.n	8006214 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006204:	4b63      	ldr	r3, [pc, #396]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d115      	bne.n	800623c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e0b9      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d107      	bne.n	800622c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800621c:	4b5d      	ldr	r3, [pc, #372]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d109      	bne.n	800623c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e0ad      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800622c:	4b59      	ldr	r3, [pc, #356]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0a5      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800623c:	f000 f8b4 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8006240:	4603      	mov	r3, r0
 8006242:	4a55      	ldr	r2, [pc, #340]	@ (8006398 <HAL_RCC_ClockConfig+0x264>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d90f      	bls.n	8006268 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006248:	4b52      	ldr	r3, [pc, #328]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d109      	bne.n	8006268 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006254:	4b4f      	ldr	r3, [pc, #316]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800625c:	4a4d      	ldr	r2, [pc, #308]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 800625e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006262:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006264:	2380      	movs	r3, #128	@ 0x80
 8006266:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006268:	4b4a      	ldr	r3, [pc, #296]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 0203 	bic.w	r2, r3, #3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	4947      	ldr	r1, [pc, #284]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006276:	4313      	orrs	r3, r2
 8006278:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800627a:	f7fb ff35 	bl	80020e8 <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006280:	e00a      	b.n	8006298 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006282:	f7fb ff31 	bl	80020e8 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006290:	4293      	cmp	r3, r2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e077      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006298:	4b3e      	ldr	r3, [pc, #248]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 020c 	and.w	r2, r3, #12
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d1eb      	bne.n	8006282 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b80      	cmp	r3, #128	@ 0x80
 80062ae:	d105      	bne.n	80062bc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80062b0:	4b38      	ldr	r3, [pc, #224]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4a37      	ldr	r2, [pc, #220]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 80062b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d010      	beq.n	80062ea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	4b31      	ldr	r3, [pc, #196]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d208      	bcs.n	80062ea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d8:	4b2e      	ldr	r3, [pc, #184]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	492b      	ldr	r1, [pc, #172]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062ea:	4b29      	ldr	r3, [pc, #164]	@ (8006390 <HAL_RCC_ClockConfig+0x25c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d210      	bcs.n	800631a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f8:	4b25      	ldr	r3, [pc, #148]	@ (8006390 <HAL_RCC_ClockConfig+0x25c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f023 020f 	bic.w	r2, r3, #15
 8006300:	4923      	ldr	r1, [pc, #140]	@ (8006390 <HAL_RCC_ClockConfig+0x25c>)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	4313      	orrs	r3, r2
 8006306:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006308:	4b21      	ldr	r3, [pc, #132]	@ (8006390 <HAL_RCC_ClockConfig+0x25c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d001      	beq.n	800631a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e036      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	d008      	beq.n	8006338 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006326:	4b1b      	ldr	r3, [pc, #108]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	4918      	ldr	r1, [pc, #96]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006334:	4313      	orrs	r3, r2
 8006336:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006344:	4b13      	ldr	r3, [pc, #76]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4910      	ldr	r1, [pc, #64]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006354:	4313      	orrs	r3, r2
 8006356:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006358:	f000 f826 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 800635c:	4602      	mov	r2, r0
 800635e:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	091b      	lsrs	r3, r3, #4
 8006364:	f003 030f 	and.w	r3, r3, #15
 8006368:	490c      	ldr	r1, [pc, #48]	@ (800639c <HAL_RCC_ClockConfig+0x268>)
 800636a:	5ccb      	ldrb	r3, [r1, r3]
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	fa22 f303 	lsr.w	r3, r2, r3
 8006374:	4a0a      	ldr	r2, [pc, #40]	@ (80063a0 <HAL_RCC_ClockConfig+0x26c>)
 8006376:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006378:	4b0a      	ldr	r3, [pc, #40]	@ (80063a4 <HAL_RCC_ClockConfig+0x270>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f7fb fe63 	bl	8002048 <HAL_InitTick>
 8006382:	4603      	mov	r3, r0
 8006384:	73fb      	strb	r3, [r7, #15]

  return status;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40022000 	.word	0x40022000
 8006394:	40021000 	.word	0x40021000
 8006398:	04c4b400 	.word	0x04c4b400
 800639c:	080091f4 	.word	0x080091f4
 80063a0:	20000004 	.word	0x20000004
 80063a4:	20000018 	.word	0x20000018

080063a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b089      	sub	sp, #36	@ 0x24
 80063ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	2300      	movs	r3, #0
 80063b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063b6:	4b3e      	ldr	r3, [pc, #248]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 030c 	and.w	r3, r3, #12
 80063be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063c0:	4b3b      	ldr	r3, [pc, #236]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0x34>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b0c      	cmp	r3, #12
 80063d4:	d121      	bne.n	800641a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d11e      	bne.n	800641a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80063dc:	4b34      	ldr	r3, [pc, #208]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d107      	bne.n	80063f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80063e8:	4b31      	ldr	r3, [pc, #196]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	e005      	b.n	8006404 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80063f8:	4b2d      	ldr	r3, [pc, #180]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006404:	4a2b      	ldr	r2, [pc, #172]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10d      	bne.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006418:	e00a      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d102      	bne.n	8006426 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006420:	4b25      	ldr	r3, [pc, #148]	@ (80064b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	e004      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d101      	bne.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800642c:	4b23      	ldr	r3, [pc, #140]	@ (80064bc <HAL_RCC_GetSysClockFreq+0x114>)
 800642e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2b0c      	cmp	r3, #12
 8006434:	d134      	bne.n	80064a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006436:	4b1e      	ldr	r3, [pc, #120]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d003      	beq.n	800644e <HAL_RCC_GetSysClockFreq+0xa6>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b03      	cmp	r3, #3
 800644a:	d003      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0xac>
 800644c:	e005      	b.n	800645a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800644e:	4b1a      	ldr	r3, [pc, #104]	@ (80064b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006450:	617b      	str	r3, [r7, #20]
      break;
 8006452:	e005      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006454:	4b19      	ldr	r3, [pc, #100]	@ (80064bc <HAL_RCC_GetSysClockFreq+0x114>)
 8006456:	617b      	str	r3, [r7, #20]
      break;
 8006458:	e002      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	617b      	str	r3, [r7, #20]
      break;
 800645e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006460:	4b13      	ldr	r3, [pc, #76]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	091b      	lsrs	r3, r3, #4
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	3301      	adds	r3, #1
 800646c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800646e:	4b10      	ldr	r3, [pc, #64]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	0a1b      	lsrs	r3, r3, #8
 8006474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	fb03 f202 	mul.w	r2, r3, r2
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006486:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	0e5b      	lsrs	r3, r3, #25
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	3301      	adds	r3, #1
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064a0:	69bb      	ldr	r3, [r7, #24]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3724      	adds	r7, #36	@ 0x24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000
 80064b4:	0800920c 	.word	0x0800920c
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	007a1200 	.word	0x007a1200

080064c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064c4:	4b03      	ldr	r3, [pc, #12]	@ (80064d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064c6:	681b      	ldr	r3, [r3, #0]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000004 	.word	0x20000004

080064d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80064dc:	f7ff fff0 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 80064e0:	4602      	mov	r2, r0
 80064e2:	4b06      	ldr	r3, [pc, #24]	@ (80064fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4904      	ldr	r1, [pc, #16]	@ (8006500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064ee:	5ccb      	ldrb	r3, [r1, r3]
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40021000 	.word	0x40021000
 8006500:	08009204 	.word	0x08009204

08006504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006508:	f7ff ffda 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 800650c:	4602      	mov	r2, r0
 800650e:	4b06      	ldr	r3, [pc, #24]	@ (8006528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	0adb      	lsrs	r3, r3, #11
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	4904      	ldr	r1, [pc, #16]	@ (800652c <HAL_RCC_GetPCLK2Freq+0x28>)
 800651a:	5ccb      	ldrb	r3, [r1, r3]
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40021000 	.word	0x40021000
 800652c:	08009204 	.word	0x08009204

08006530 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800653c:	4b27      	ldr	r3, [pc, #156]	@ (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800653e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006548:	f7ff f916 	bl	8005778 <HAL_PWREx_GetVoltageRange>
 800654c:	6178      	str	r0, [r7, #20]
 800654e:	e014      	b.n	800657a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006550:	4b22      	ldr	r3, [pc, #136]	@ (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006554:	4a21      	ldr	r2, [pc, #132]	@ (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800655a:	6593      	str	r3, [r2, #88]	@ 0x58
 800655c:	4b1f      	ldr	r3, [pc, #124]	@ (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800655e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006568:	f7ff f906 	bl	8005778 <HAL_PWREx_GetVoltageRange>
 800656c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800656e:	4b1b      	ldr	r3, [pc, #108]	@ (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006572:	4a1a      	ldr	r2, [pc, #104]	@ (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006578:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006580:	d10b      	bne.n	800659a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b80      	cmp	r3, #128	@ 0x80
 8006586:	d913      	bls.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2ba0      	cmp	r3, #160	@ 0xa0
 800658c:	d902      	bls.n	8006594 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800658e:	2302      	movs	r3, #2
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e00d      	b.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006594:	2301      	movs	r3, #1
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	e00a      	b.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b7f      	cmp	r3, #127	@ 0x7f
 800659e:	d902      	bls.n	80065a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80065a0:	2302      	movs	r3, #2
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	e004      	b.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b70      	cmp	r3, #112	@ 0x70
 80065aa:	d101      	bne.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065ac:	2301      	movs	r3, #1
 80065ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065b0:	4b0b      	ldr	r3, [pc, #44]	@ (80065e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f023 020f 	bic.w	r2, r3, #15
 80065b8:	4909      	ldr	r1, [pc, #36]	@ (80065e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80065c0:	4b07      	ldr	r3, [pc, #28]	@ (80065e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d001      	beq.n	80065d2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40021000 	.word	0x40021000
 80065e0:	40022000 	.word	0x40022000

080065e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065ea:	4b2d      	ldr	r3, [pc, #180]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d00b      	beq.n	8006612 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d825      	bhi.n	800664c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d008      	beq.n	8006618 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b02      	cmp	r3, #2
 800660a:	d11f      	bne.n	800664c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800660c:	4b25      	ldr	r3, [pc, #148]	@ (80066a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800660e:	613b      	str	r3, [r7, #16]
    break;
 8006610:	e01f      	b.n	8006652 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006612:	4b25      	ldr	r3, [pc, #148]	@ (80066a8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006614:	613b      	str	r3, [r7, #16]
    break;
 8006616:	e01c      	b.n	8006652 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006618:	4b21      	ldr	r3, [pc, #132]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d107      	bne.n	8006634 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006624:	4b1e      	ldr	r3, [pc, #120]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800662a:	0a1b      	lsrs	r3, r3, #8
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	e005      	b.n	8006640 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006634:	4b1a      	ldr	r3, [pc, #104]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006640:	4a1a      	ldr	r2, [pc, #104]	@ (80066ac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006648:	613b      	str	r3, [r7, #16]
    break;
 800664a:	e002      	b.n	8006652 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]
    break;
 8006650:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006652:	4b13      	ldr	r3, [pc, #76]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	091b      	lsrs	r3, r3, #4
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	3301      	adds	r3, #1
 800665e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006660:	4b0f      	ldr	r3, [pc, #60]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	0a1b      	lsrs	r3, r3, #8
 8006666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	fb03 f202 	mul.w	r2, r3, r2
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	fbb2 f3f3 	udiv	r3, r2, r3
 8006676:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006678:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	0e5b      	lsrs	r3, r3, #25
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	3301      	adds	r3, #1
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006692:	683b      	ldr	r3, [r7, #0]
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40021000 	.word	0x40021000
 80066a4:	00f42400 	.word	0x00f42400
 80066a8:	007a1200 	.word	0x007a1200
 80066ac:	0800920c 	.word	0x0800920c

080066b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066b8:	2300      	movs	r3, #0
 80066ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066bc:	2300      	movs	r3, #0
 80066be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d040      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066d0:	2b80      	cmp	r3, #128	@ 0x80
 80066d2:	d02a      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80066d4:	2b80      	cmp	r3, #128	@ 0x80
 80066d6:	d825      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80066d8:	2b60      	cmp	r3, #96	@ 0x60
 80066da:	d026      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80066dc:	2b60      	cmp	r3, #96	@ 0x60
 80066de:	d821      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80066e0:	2b40      	cmp	r3, #64	@ 0x40
 80066e2:	d006      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80066e4:	2b40      	cmp	r3, #64	@ 0x40
 80066e6:	d81d      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d009      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d010      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80066f0:	e018      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80066f2:	4b89      	ldr	r3, [pc, #548]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	4a88      	ldr	r2, [pc, #544]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066fc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80066fe:	e015      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3304      	adds	r3, #4
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fb12 	bl	8006d30 <RCCEx_PLLSAI1_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006710:	e00c      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3320      	adds	r3, #32
 8006716:	2100      	movs	r1, #0
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fbfd 	bl	8006f18 <RCCEx_PLLSAI2_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006722:	e003      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	74fb      	strb	r3, [r7, #19]
      break;
 8006728:	e000      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800672a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800672c:	7cfb      	ldrb	r3, [r7, #19]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006732:	4b79      	ldr	r3, [pc, #484]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006734:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006738:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006740:	4975      	ldr	r1, [pc, #468]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006748:	e001      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674a:	7cfb      	ldrb	r3, [r7, #19]
 800674c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d047      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800675e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006762:	d030      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006768:	d82a      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800676a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800676e:	d02a      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006774:	d824      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800677a:	d008      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800677c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006780:	d81e      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800678a:	d010      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800678c:	e018      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800678e:	4b62      	ldr	r3, [pc, #392]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	4a61      	ldr	r2, [pc, #388]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006798:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800679a:	e015      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	2100      	movs	r1, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fac4 	bl	8006d30 <RCCEx_PLLSAI1_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067ac:	e00c      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3320      	adds	r3, #32
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fbaf 	bl	8006f18 <RCCEx_PLLSAI2_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067be:	e003      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	74fb      	strb	r3, [r7, #19]
      break;
 80067c4:	e000      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80067c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067c8:	7cfb      	ldrb	r3, [r7, #19]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80067ce:	4b52      	ldr	r3, [pc, #328]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067dc:	494e      	ldr	r1, [pc, #312]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80067e4:	e001      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e6:	7cfb      	ldrb	r3, [r7, #19]
 80067e8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 809f 	beq.w	8006936 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067f8:	2300      	movs	r3, #0
 80067fa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80067fc:	4b46      	ldr	r3, [pc, #280]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800680c:	2300      	movs	r3, #0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00d      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006812:	4b41      	ldr	r3, [pc, #260]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006816:	4a40      	ldr	r2, [pc, #256]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800681c:	6593      	str	r3, [r2, #88]	@ 0x58
 800681e:	4b3e      	ldr	r3, [pc, #248]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006826:	60bb      	str	r3, [r7, #8]
 8006828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800682a:	2301      	movs	r3, #1
 800682c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800682e:	4b3b      	ldr	r3, [pc, #236]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a3a      	ldr	r2, [pc, #232]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006838:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800683a:	f7fb fc55 	bl	80020e8 <HAL_GetTick>
 800683e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006840:	e009      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006842:	f7fb fc51 	bl	80020e8 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d902      	bls.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	74fb      	strb	r3, [r7, #19]
        break;
 8006854:	e005      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006856:	4b31      	ldr	r3, [pc, #196]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0ef      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006862:	7cfb      	ldrb	r3, [r7, #19]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d15b      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006868:	4b2b      	ldr	r3, [pc, #172]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006872:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01f      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	429a      	cmp	r2, r3
 8006884:	d019      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006886:	4b24      	ldr	r3, [pc, #144]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800688c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006890:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006892:	4b21      	ldr	r3, [pc, #132]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006898:	4a1f      	ldr	r2, [pc, #124]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800689a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800689e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068b2:	4a19      	ldr	r2, [pc, #100]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d016      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c4:	f7fb fc10 	bl	80020e8 <HAL_GetTick>
 80068c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ca:	e00b      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7fb fc0c 	bl	80020e8 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d902      	bls.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	74fb      	strb	r3, [r7, #19]
            break;
 80068e2:	e006      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0ec      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80068f2:	7cfb      	ldrb	r3, [r7, #19]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10c      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068f8:	4b07      	ldr	r3, [pc, #28]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006908:	4903      	ldr	r1, [pc, #12]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006910:	e008      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006912:	7cfb      	ldrb	r3, [r7, #19]
 8006914:	74bb      	strb	r3, [r7, #18]
 8006916:	e005      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006918:	40021000 	.word	0x40021000
 800691c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006920:	7cfb      	ldrb	r3, [r7, #19]
 8006922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006924:	7c7b      	ldrb	r3, [r7, #17]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d105      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800692a:	4ba0      	ldr	r3, [pc, #640]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800692c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800692e:	4a9f      	ldr	r2, [pc, #636]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006934:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006942:	4b9a      	ldr	r3, [pc, #616]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006948:	f023 0203 	bic.w	r2, r3, #3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006950:	4996      	ldr	r1, [pc, #600]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006964:	4b91      	ldr	r3, [pc, #580]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696a:	f023 020c 	bic.w	r2, r3, #12
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006972:	498e      	ldr	r1, [pc, #568]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006986:	4b89      	ldr	r3, [pc, #548]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800698c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006994:	4985      	ldr	r1, [pc, #532]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006996:	4313      	orrs	r3, r2
 8006998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069a8:	4b80      	ldr	r3, [pc, #512]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069b6:	497d      	ldr	r1, [pc, #500]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80069ca:	4b78      	ldr	r3, [pc, #480]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069d8:	4974      	ldr	r1, [pc, #464]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069ec:	4b6f      	ldr	r3, [pc, #444]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069fa:	496c      	ldr	r1, [pc, #432]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a0e:	4b67      	ldr	r3, [pc, #412]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a1c:	4963      	ldr	r1, [pc, #396]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a30:	4b5e      	ldr	r3, [pc, #376]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a3e:	495b      	ldr	r1, [pc, #364]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a52:	4b56      	ldr	r3, [pc, #344]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a60:	4952      	ldr	r1, [pc, #328]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00a      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a74:	4b4d      	ldr	r3, [pc, #308]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a82:	494a      	ldr	r1, [pc, #296]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a96:	4b45      	ldr	r3, [pc, #276]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa4:	4941      	ldr	r1, [pc, #260]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ab8:	4b3c      	ldr	r3, [pc, #240]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006abe:	f023 0203 	bic.w	r2, r3, #3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac6:	4939      	ldr	r1, [pc, #228]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d028      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ada:	4b34      	ldr	r3, [pc, #208]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae8:	4930      	ldr	r1, [pc, #192]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006af8:	d106      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006afa:	4b2c      	ldr	r3, [pc, #176]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	4a2b      	ldr	r2, [pc, #172]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b04:	60d3      	str	r3, [r2, #12]
 8006b06:	e011      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3304      	adds	r3, #4
 8006b16:	2101      	movs	r1, #1
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 f909 	bl	8006d30 <RCCEx_PLLSAI1_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b22:	7cfb      	ldrb	r3, [r7, #19]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006b28:	7cfb      	ldrb	r3, [r7, #19]
 8006b2a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d04d      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b40:	d108      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006b42:	4b1a      	ldr	r3, [pc, #104]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b48:	4a18      	ldr	r2, [pc, #96]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b4e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006b52:	e012      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006b54:	4b15      	ldr	r3, [pc, #84]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b5a:	4a14      	ldr	r2, [pc, #80]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b60:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006b64:	4b11      	ldr	r3, [pc, #68]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b72:	490e      	ldr	r1, [pc, #56]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b82:	d106      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b84:	4b09      	ldr	r3, [pc, #36]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	4a08      	ldr	r2, [pc, #32]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b8e:	60d3      	str	r3, [r2, #12]
 8006b90:	e020      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b9a:	d109      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b9c:	4b03      	ldr	r3, [pc, #12]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	4a02      	ldr	r2, [pc, #8]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba6:	60d3      	str	r3, [r2, #12]
 8006ba8:	e014      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006baa:	bf00      	nop
 8006bac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 f8b5 	bl	8006d30 <RCCEx_PLLSAI1_Config>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bca:	7cfb      	ldrb	r3, [r7, #19]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006bd0:	7cfb      	ldrb	r3, [r7, #19]
 8006bd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d028      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006be0:	4b4a      	ldr	r3, [pc, #296]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bee:	4947      	ldr	r1, [pc, #284]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bfe:	d106      	bne.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c00:	4b42      	ldr	r3, [pc, #264]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4a41      	ldr	r2, [pc, #260]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c0a:	60d3      	str	r3, [r2, #12]
 8006c0c:	e011      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c16:	d10c      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 f886 	bl	8006d30 <RCCEx_PLLSAI1_Config>
 8006c24:	4603      	mov	r3, r0
 8006c26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c28:	7cfb      	ldrb	r3, [r7, #19]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006c2e:	7cfb      	ldrb	r3, [r7, #19]
 8006c30:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01e      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c3e:	4b33      	ldr	r3, [pc, #204]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c44:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c4e:	492f      	ldr	r1, [pc, #188]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c60:	d10c      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3304      	adds	r3, #4
 8006c66:	2102      	movs	r1, #2
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 f861 	bl	8006d30 <RCCEx_PLLSAI1_Config>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c72:	7cfb      	ldrb	r3, [r7, #19]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006c78:	7cfb      	ldrb	r3, [r7, #19]
 8006c7a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c88:	4b20      	ldr	r3, [pc, #128]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c8e:	f023 0204 	bic.w	r2, r3, #4
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c98:	491c      	ldr	r1, [pc, #112]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006cac:	4b17      	ldr	r3, [pc, #92]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cb2:	f023 0218 	bic.w	r2, r3, #24
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cbc:	4913      	ldr	r1, [pc, #76]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d017      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ce0:	490a      	ldr	r1, [pc, #40]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cf2:	d105      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cf4:	4b05      	ldr	r3, [pc, #20]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	4a04      	ldr	r2, [pc, #16]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d00:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40021000 	.word	0x40021000

08006d10 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006d14:	4b05      	ldr	r3, [pc, #20]	@ (8006d2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a04      	ldr	r2, [pc, #16]	@ (8006d2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006d1a:	f043 0304 	orr.w	r3, r3, #4
 8006d1e:	6013      	str	r3, [r2, #0]
}
 8006d20:	bf00      	nop
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40021000 	.word	0x40021000

08006d30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d3e:	4b72      	ldr	r3, [pc, #456]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00e      	beq.n	8006d68 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f003 0203 	and.w	r2, r3, #3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d103      	bne.n	8006d62 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
       ||
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d142      	bne.n	8006de8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	73fb      	strb	r3, [r7, #15]
 8006d66:	e03f      	b.n	8006de8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d018      	beq.n	8006da2 <RCCEx_PLLSAI1_Config+0x72>
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d825      	bhi.n	8006dc0 <RCCEx_PLLSAI1_Config+0x90>
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d002      	beq.n	8006d7e <RCCEx_PLLSAI1_Config+0x4e>
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d009      	beq.n	8006d90 <RCCEx_PLLSAI1_Config+0x60>
 8006d7c:	e020      	b.n	8006dc0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d7e:	4b62      	ldr	r3, [pc, #392]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d11d      	bne.n	8006dc6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d8e:	e01a      	b.n	8006dc6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d90:	4b5d      	ldr	r3, [pc, #372]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d116      	bne.n	8006dca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006da0:	e013      	b.n	8006dca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006da2:	4b59      	ldr	r3, [pc, #356]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10f      	bne.n	8006dce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006dae:	4b56      	ldr	r3, [pc, #344]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006dbe:	e006      	b.n	8006dce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc4:	e004      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006dc6:	bf00      	nop
 8006dc8:	e002      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006dca:	bf00      	nop
 8006dcc:	e000      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006dce:	bf00      	nop
    }

    if(status == HAL_OK)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d108      	bne.n	8006de8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f023 0203 	bic.w	r2, r3, #3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4949      	ldr	r1, [pc, #292]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f040 8086 	bne.w	8006efc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006df0:	4b45      	ldr	r3, [pc, #276]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a44      	ldr	r2, [pc, #272]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006df6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dfc:	f7fb f974 	bl	80020e8 <HAL_GetTick>
 8006e00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e02:	e009      	b.n	8006e18 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e04:	f7fb f970 	bl	80020e8 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d902      	bls.n	8006e18 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	73fb      	strb	r3, [r7, #15]
        break;
 8006e16:	e005      	b.n	8006e24 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e18:	4b3b      	ldr	r3, [pc, #236]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1ef      	bne.n	8006e04 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d168      	bne.n	8006efc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d113      	bne.n	8006e58 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e30:	4b35      	ldr	r3, [pc, #212]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	4b35      	ldr	r3, [pc, #212]	@ (8006f0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e36:	4013      	ands	r3, r2
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6892      	ldr	r2, [r2, #8]
 8006e3c:	0211      	lsls	r1, r2, #8
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68d2      	ldr	r2, [r2, #12]
 8006e42:	06d2      	lsls	r2, r2, #27
 8006e44:	4311      	orrs	r1, r2
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6852      	ldr	r2, [r2, #4]
 8006e4a:	3a01      	subs	r2, #1
 8006e4c:	0112      	lsls	r2, r2, #4
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	492d      	ldr	r1, [pc, #180]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	610b      	str	r3, [r1, #16]
 8006e56:	e02d      	b.n	8006eb4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d115      	bne.n	8006e8a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	4b2b      	ldr	r3, [pc, #172]	@ (8006f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6892      	ldr	r2, [r2, #8]
 8006e6a:	0211      	lsls	r1, r2, #8
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6912      	ldr	r2, [r2, #16]
 8006e70:	0852      	lsrs	r2, r2, #1
 8006e72:	3a01      	subs	r2, #1
 8006e74:	0552      	lsls	r2, r2, #21
 8006e76:	4311      	orrs	r1, r2
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6852      	ldr	r2, [r2, #4]
 8006e7c:	3a01      	subs	r2, #1
 8006e7e:	0112      	lsls	r2, r2, #4
 8006e80:	430a      	orrs	r2, r1
 8006e82:	4921      	ldr	r1, [pc, #132]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	610b      	str	r3, [r1, #16]
 8006e88:	e014      	b.n	8006eb4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	4b21      	ldr	r3, [pc, #132]	@ (8006f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6892      	ldr	r2, [r2, #8]
 8006e96:	0211      	lsls	r1, r2, #8
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6952      	ldr	r2, [r2, #20]
 8006e9c:	0852      	lsrs	r2, r2, #1
 8006e9e:	3a01      	subs	r2, #1
 8006ea0:	0652      	lsls	r2, r2, #25
 8006ea2:	4311      	orrs	r1, r2
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6852      	ldr	r2, [r2, #4]
 8006ea8:	3a01      	subs	r2, #1
 8006eaa:	0112      	lsls	r2, r2, #4
 8006eac:	430a      	orrs	r2, r1
 8006eae:	4916      	ldr	r1, [pc, #88]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006eb4:	4b14      	ldr	r3, [pc, #80]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a13      	ldr	r2, [pc, #76]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006eba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ebe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec0:	f7fb f912 	bl	80020e8 <HAL_GetTick>
 8006ec4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ec6:	e009      	b.n	8006edc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ec8:	f7fb f90e 	bl	80020e8 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d902      	bls.n	8006edc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	73fb      	strb	r3, [r7, #15]
          break;
 8006eda:	e005      	b.n	8006ee8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006edc:	4b0a      	ldr	r3, [pc, #40]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0ef      	beq.n	8006ec8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006eee:	4b06      	ldr	r3, [pc, #24]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	4904      	ldr	r1, [pc, #16]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	07ff800f 	.word	0x07ff800f
 8006f10:	ff9f800f 	.word	0xff9f800f
 8006f14:	f9ff800f 	.word	0xf9ff800f

08006f18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f26:	4b72      	ldr	r3, [pc, #456]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00e      	beq.n	8006f50 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006f32:	4b6f      	ldr	r3, [pc, #444]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f003 0203 	and.w	r2, r3, #3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d103      	bne.n	8006f4a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
       ||
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d142      	bne.n	8006fd0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	73fb      	strb	r3, [r7, #15]
 8006f4e:	e03f      	b.n	8006fd0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d018      	beq.n	8006f8a <RCCEx_PLLSAI2_Config+0x72>
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d825      	bhi.n	8006fa8 <RCCEx_PLLSAI2_Config+0x90>
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d002      	beq.n	8006f66 <RCCEx_PLLSAI2_Config+0x4e>
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d009      	beq.n	8006f78 <RCCEx_PLLSAI2_Config+0x60>
 8006f64:	e020      	b.n	8006fa8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f66:	4b62      	ldr	r3, [pc, #392]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d11d      	bne.n	8006fae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f76:	e01a      	b.n	8006fae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f78:	4b5d      	ldr	r3, [pc, #372]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d116      	bne.n	8006fb2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f88:	e013      	b.n	8006fb2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f8a:	4b59      	ldr	r3, [pc, #356]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10f      	bne.n	8006fb6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f96:	4b56      	ldr	r3, [pc, #344]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006fa6:	e006      	b.n	8006fb6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	73fb      	strb	r3, [r7, #15]
      break;
 8006fac:	e004      	b.n	8006fb8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e002      	b.n	8006fb8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e000      	b.n	8006fb8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006fb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d108      	bne.n	8006fd0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006fbe:	4b4c      	ldr	r3, [pc, #304]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f023 0203 	bic.w	r2, r3, #3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4949      	ldr	r1, [pc, #292]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f040 8086 	bne.w	80070e4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006fd8:	4b45      	ldr	r3, [pc, #276]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a44      	ldr	r2, [pc, #272]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe4:	f7fb f880 	bl	80020e8 <HAL_GetTick>
 8006fe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fea:	e009      	b.n	8007000 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fec:	f7fb f87c 	bl	80020e8 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d902      	bls.n	8007000 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8006ffe:	e005      	b.n	800700c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007000:	4b3b      	ldr	r3, [pc, #236]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1ef      	bne.n	8006fec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d168      	bne.n	80070e4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d113      	bne.n	8007040 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007018:	4b35      	ldr	r3, [pc, #212]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	4b35      	ldr	r3, [pc, #212]	@ (80070f4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800701e:	4013      	ands	r3, r2
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6892      	ldr	r2, [r2, #8]
 8007024:	0211      	lsls	r1, r2, #8
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	68d2      	ldr	r2, [r2, #12]
 800702a:	06d2      	lsls	r2, r2, #27
 800702c:	4311      	orrs	r1, r2
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6852      	ldr	r2, [r2, #4]
 8007032:	3a01      	subs	r2, #1
 8007034:	0112      	lsls	r2, r2, #4
 8007036:	430a      	orrs	r2, r1
 8007038:	492d      	ldr	r1, [pc, #180]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800703a:	4313      	orrs	r3, r2
 800703c:	614b      	str	r3, [r1, #20]
 800703e:	e02d      	b.n	800709c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d115      	bne.n	8007072 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007046:	4b2a      	ldr	r3, [pc, #168]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007048:	695a      	ldr	r2, [r3, #20]
 800704a:	4b2b      	ldr	r3, [pc, #172]	@ (80070f8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800704c:	4013      	ands	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6892      	ldr	r2, [r2, #8]
 8007052:	0211      	lsls	r1, r2, #8
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6912      	ldr	r2, [r2, #16]
 8007058:	0852      	lsrs	r2, r2, #1
 800705a:	3a01      	subs	r2, #1
 800705c:	0552      	lsls	r2, r2, #21
 800705e:	4311      	orrs	r1, r2
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6852      	ldr	r2, [r2, #4]
 8007064:	3a01      	subs	r2, #1
 8007066:	0112      	lsls	r2, r2, #4
 8007068:	430a      	orrs	r2, r1
 800706a:	4921      	ldr	r1, [pc, #132]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800706c:	4313      	orrs	r3, r2
 800706e:	614b      	str	r3, [r1, #20]
 8007070:	e014      	b.n	800709c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007072:	4b1f      	ldr	r3, [pc, #124]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007074:	695a      	ldr	r2, [r3, #20]
 8007076:	4b21      	ldr	r3, [pc, #132]	@ (80070fc <RCCEx_PLLSAI2_Config+0x1e4>)
 8007078:	4013      	ands	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6892      	ldr	r2, [r2, #8]
 800707e:	0211      	lsls	r1, r2, #8
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6952      	ldr	r2, [r2, #20]
 8007084:	0852      	lsrs	r2, r2, #1
 8007086:	3a01      	subs	r2, #1
 8007088:	0652      	lsls	r2, r2, #25
 800708a:	4311      	orrs	r1, r2
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6852      	ldr	r2, [r2, #4]
 8007090:	3a01      	subs	r2, #1
 8007092:	0112      	lsls	r2, r2, #4
 8007094:	430a      	orrs	r2, r1
 8007096:	4916      	ldr	r1, [pc, #88]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007098:	4313      	orrs	r3, r2
 800709a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800709c:	4b14      	ldr	r3, [pc, #80]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a13      	ldr	r2, [pc, #76]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a8:	f7fb f81e 	bl	80020e8 <HAL_GetTick>
 80070ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80070ae:	e009      	b.n	80070c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80070b0:	f7fb f81a 	bl	80020e8 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d902      	bls.n	80070c4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	73fb      	strb	r3, [r7, #15]
          break;
 80070c2:	e005      	b.n	80070d0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80070c4:	4b0a      	ldr	r3, [pc, #40]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0ef      	beq.n	80070b0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80070d6:	4b06      	ldr	r3, [pc, #24]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070d8:	695a      	ldr	r2, [r3, #20]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	4904      	ldr	r1, [pc, #16]	@ (80070f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	40021000 	.word	0x40021000
 80070f4:	07ff800f 	.word	0x07ff800f
 80070f8:	ff9f800f 	.word	0xff9f800f
 80070fc:	f9ff800f 	.word	0xf9ff800f

08007100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e095      	b.n	800723e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007116:	2b00      	cmp	r3, #0
 8007118:	d108      	bne.n	800712c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007122:	d009      	beq.n	8007138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	61da      	str	r2, [r3, #28]
 800712a:	e005      	b.n	8007138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fa fa92 	bl	800167c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800716e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007178:	d902      	bls.n	8007180 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	e002      	b.n	8007186 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007184:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800718e:	d007      	beq.n	80071a0 <HAL_SPI_Init+0xa0>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007198:	d002      	beq.n	80071a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071d8:	431a      	orrs	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e2:	ea42 0103 	orr.w	r1, r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	0c1b      	lsrs	r3, r3, #16
 80071fc:	f003 0204 	and.w	r2, r3, #4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	431a      	orrs	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800721c:	ea42 0103 	orr.w	r1, r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e049      	b.n	80072ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	d106      	bne.n	8007272 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7fa fa49 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2202      	movs	r2, #2
 8007276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3304      	adds	r3, #4
 8007282:	4619      	mov	r1, r3
 8007284:	4610      	mov	r0, r2
 8007286:	f000 f9d5 	bl	8007634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b01      	cmp	r3, #1
 8007306:	d001      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e04f      	b.n	80073ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a23      	ldr	r2, [pc, #140]	@ (80073b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d01d      	beq.n	800736a <HAL_TIM_Base_Start_IT+0x76>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007336:	d018      	beq.n	800736a <HAL_TIM_Base_Start_IT+0x76>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1f      	ldr	r2, [pc, #124]	@ (80073bc <HAL_TIM_Base_Start_IT+0xc8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d013      	beq.n	800736a <HAL_TIM_Base_Start_IT+0x76>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1e      	ldr	r2, [pc, #120]	@ (80073c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00e      	beq.n	800736a <HAL_TIM_Base_Start_IT+0x76>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a1c      	ldr	r2, [pc, #112]	@ (80073c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d009      	beq.n	800736a <HAL_TIM_Base_Start_IT+0x76>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1b      	ldr	r2, [pc, #108]	@ (80073c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d004      	beq.n	800736a <HAL_TIM_Base_Start_IT+0x76>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a19      	ldr	r2, [pc, #100]	@ (80073cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d115      	bne.n	8007396 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	4b17      	ldr	r3, [pc, #92]	@ (80073d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007372:	4013      	ands	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b06      	cmp	r3, #6
 800737a:	d015      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0xb4>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007382:	d011      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0201 	orr.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007394:	e008      	b.n	80073a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f042 0201 	orr.w	r2, r2, #1
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	e000      	b.n	80073aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	40012c00 	.word	0x40012c00
 80073bc:	40000400 	.word	0x40000400
 80073c0:	40000800 	.word	0x40000800
 80073c4:	40000c00 	.word	0x40000c00
 80073c8:	40013400 	.word	0x40013400
 80073cc:	40014000 	.word	0x40014000
 80073d0:	00010007 	.word	0x00010007

080073d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d020      	beq.n	8007438 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01b      	beq.n	8007438 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0202 	mvn.w	r2, #2
 8007408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f8e9 	bl	80075f6 <HAL_TIM_IC_CaptureCallback>
 8007424:	e005      	b.n	8007432 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f8db 	bl	80075e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f8ec 	bl	800760a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b00      	cmp	r3, #0
 8007440:	d020      	beq.n	8007484 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01b      	beq.n	8007484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f06f 0204 	mvn.w	r2, #4
 8007454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2202      	movs	r2, #2
 800745a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f8c3 	bl	80075f6 <HAL_TIM_IC_CaptureCallback>
 8007470:	e005      	b.n	800747e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f8b5 	bl	80075e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f8c6 	bl	800760a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 0308 	and.w	r3, r3, #8
 800748a:	2b00      	cmp	r3, #0
 800748c:	d020      	beq.n	80074d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d01b      	beq.n	80074d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0208 	mvn.w	r2, #8
 80074a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2204      	movs	r2, #4
 80074a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f89d 	bl	80075f6 <HAL_TIM_IC_CaptureCallback>
 80074bc:	e005      	b.n	80074ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f88f 	bl	80075e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8a0 	bl	800760a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f003 0310 	and.w	r3, r3, #16
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d020      	beq.n	800751c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f003 0310 	and.w	r3, r3, #16
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01b      	beq.n	800751c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0210 	mvn.w	r2, #16
 80074ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2208      	movs	r2, #8
 80074f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f877 	bl	80075f6 <HAL_TIM_IC_CaptureCallback>
 8007508:	e005      	b.n	8007516 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f869 	bl	80075e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f87a 	bl	800760a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00c      	beq.n	8007540 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d007      	beq.n	8007540 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f06f 0201 	mvn.w	r2, #1
 8007538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7f9 fd82 	bl	8001044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007546:	2b00      	cmp	r3, #0
 8007548:	d104      	bne.n	8007554 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00c      	beq.n	800756e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f99b 	bl	80078a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00c      	beq.n	8007592 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800757e:	2b00      	cmp	r3, #0
 8007580:	d007      	beq.n	8007592 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800758a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f993 	bl	80078b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00c      	beq.n	80075b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d007      	beq.n	80075b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f834 	bl	800761e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00c      	beq.n	80075da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f06f 0220 	mvn.w	r2, #32
 80075d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f95b 	bl	8007890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075da:	bf00      	nop
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075fe:	bf00      	nop
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
	...

08007634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a46      	ldr	r2, [pc, #280]	@ (8007760 <TIM_Base_SetConfig+0x12c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <TIM_Base_SetConfig+0x40>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007652:	d00f      	beq.n	8007674 <TIM_Base_SetConfig+0x40>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a43      	ldr	r2, [pc, #268]	@ (8007764 <TIM_Base_SetConfig+0x130>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00b      	beq.n	8007674 <TIM_Base_SetConfig+0x40>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a42      	ldr	r2, [pc, #264]	@ (8007768 <TIM_Base_SetConfig+0x134>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d007      	beq.n	8007674 <TIM_Base_SetConfig+0x40>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a41      	ldr	r2, [pc, #260]	@ (800776c <TIM_Base_SetConfig+0x138>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d003      	beq.n	8007674 <TIM_Base_SetConfig+0x40>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a40      	ldr	r2, [pc, #256]	@ (8007770 <TIM_Base_SetConfig+0x13c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d108      	bne.n	8007686 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800767a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a35      	ldr	r2, [pc, #212]	@ (8007760 <TIM_Base_SetConfig+0x12c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01f      	beq.n	80076ce <TIM_Base_SetConfig+0x9a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007694:	d01b      	beq.n	80076ce <TIM_Base_SetConfig+0x9a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a32      	ldr	r2, [pc, #200]	@ (8007764 <TIM_Base_SetConfig+0x130>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d017      	beq.n	80076ce <TIM_Base_SetConfig+0x9a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a31      	ldr	r2, [pc, #196]	@ (8007768 <TIM_Base_SetConfig+0x134>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <TIM_Base_SetConfig+0x9a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a30      	ldr	r2, [pc, #192]	@ (800776c <TIM_Base_SetConfig+0x138>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00f      	beq.n	80076ce <TIM_Base_SetConfig+0x9a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a2f      	ldr	r2, [pc, #188]	@ (8007770 <TIM_Base_SetConfig+0x13c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00b      	beq.n	80076ce <TIM_Base_SetConfig+0x9a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007774 <TIM_Base_SetConfig+0x140>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d007      	beq.n	80076ce <TIM_Base_SetConfig+0x9a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007778 <TIM_Base_SetConfig+0x144>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d003      	beq.n	80076ce <TIM_Base_SetConfig+0x9a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a2c      	ldr	r2, [pc, #176]	@ (800777c <TIM_Base_SetConfig+0x148>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d108      	bne.n	80076e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a16      	ldr	r2, [pc, #88]	@ (8007760 <TIM_Base_SetConfig+0x12c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00f      	beq.n	800772c <TIM_Base_SetConfig+0xf8>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a18      	ldr	r2, [pc, #96]	@ (8007770 <TIM_Base_SetConfig+0x13c>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00b      	beq.n	800772c <TIM_Base_SetConfig+0xf8>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a17      	ldr	r2, [pc, #92]	@ (8007774 <TIM_Base_SetConfig+0x140>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d007      	beq.n	800772c <TIM_Base_SetConfig+0xf8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a16      	ldr	r2, [pc, #88]	@ (8007778 <TIM_Base_SetConfig+0x144>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_Base_SetConfig+0xf8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a15      	ldr	r2, [pc, #84]	@ (800777c <TIM_Base_SetConfig+0x148>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d103      	bne.n	8007734 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b01      	cmp	r3, #1
 8007744:	d105      	bne.n	8007752 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f023 0201 	bic.w	r2, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	611a      	str	r2, [r3, #16]
  }
}
 8007752:	bf00      	nop
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	40012c00 	.word	0x40012c00
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40000c00 	.word	0x40000c00
 8007770:	40013400 	.word	0x40013400
 8007774:	40014000 	.word	0x40014000
 8007778:	40014400 	.word	0x40014400
 800777c:	40014800 	.word	0x40014800

08007780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007794:	2302      	movs	r3, #2
 8007796:	e068      	b.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a2e      	ldr	r2, [pc, #184]	@ (8007878 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d004      	beq.n	80077cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a2d      	ldr	r2, [pc, #180]	@ (800787c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d108      	bne.n	80077de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80077d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007878 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d01d      	beq.n	800783e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800780a:	d018      	beq.n	800783e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a1b      	ldr	r2, [pc, #108]	@ (8007880 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d013      	beq.n	800783e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a1a      	ldr	r2, [pc, #104]	@ (8007884 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00e      	beq.n	800783e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a18      	ldr	r2, [pc, #96]	@ (8007888 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d009      	beq.n	800783e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a13      	ldr	r2, [pc, #76]	@ (800787c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d004      	beq.n	800783e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a14      	ldr	r2, [pc, #80]	@ (800788c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d10c      	bne.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007844:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	4313      	orrs	r3, r2
 800784e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40013400 	.word	0x40013400
 8007880:	40000400 	.word	0x40000400
 8007884:	40000800 	.word	0x40000800
 8007888:	40000c00 	.word	0x40000c00
 800788c:	40014000 	.word	0x40014000

08007890 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e042      	b.n	8007964 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d106      	bne.n	80078f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7f9 ff65 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2224      	movs	r2, #36	@ 0x24
 80078fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0201 	bic.w	r2, r2, #1
 800790c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 ff10 	bl	800873c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fc11 	bl	8008144 <UART_SetConfig>
 8007922:	4603      	mov	r3, r0
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e01b      	b.n	8007964 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800793a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800794a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0201 	orr.w	r2, r2, #1
 800795a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 ff8f 	bl	8008880 <UART_CheckIdleState>
 8007962:	4603      	mov	r3, r0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800796c:	b480      	push	{r7}
 800796e:	b091      	sub	sp, #68	@ 0x44
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	4613      	mov	r3, r2
 8007978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007980:	2b20      	cmp	r3, #32
 8007982:	d178      	bne.n	8007a76 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <HAL_UART_Transmit_IT+0x24>
 800798a:	88fb      	ldrh	r3, [r7, #6]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e071      	b.n	8007a78 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	88fa      	ldrh	r2, [r7, #6]
 800799e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	88fa      	ldrh	r2, [r7, #6]
 80079a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2221      	movs	r2, #33	@ 0x21
 80079bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079c8:	d12a      	bne.n	8007a20 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079d2:	d107      	bne.n	80079e4 <HAL_UART_Transmit_IT+0x78>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d103      	bne.n	80079e4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4a29      	ldr	r2, [pc, #164]	@ (8007a84 <HAL_UART_Transmit_IT+0x118>)
 80079e0:	679a      	str	r2, [r3, #120]	@ 0x78
 80079e2:	e002      	b.n	80079ea <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4a28      	ldr	r2, [pc, #160]	@ (8007a88 <HAL_UART_Transmit_IT+0x11c>)
 80079e8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a0a:	637a      	str	r2, [r7, #52]	@ 0x34
 8007a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <HAL_UART_Transmit_IT+0x7e>
 8007a1e:	e028      	b.n	8007a72 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a28:	d107      	bne.n	8007a3a <HAL_UART_Transmit_IT+0xce>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d103      	bne.n	8007a3a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4a15      	ldr	r2, [pc, #84]	@ (8007a8c <HAL_UART_Transmit_IT+0x120>)
 8007a36:	679a      	str	r2, [r3, #120]	@ 0x78
 8007a38:	e002      	b.n	8007a40 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4a14      	ldr	r2, [pc, #80]	@ (8007a90 <HAL_UART_Transmit_IT+0x124>)
 8007a3e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5e:	623b      	str	r3, [r7, #32]
 8007a60:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	69f9      	ldr	r1, [r7, #28]
 8007a64:	6a3a      	ldr	r2, [r7, #32]
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e6      	bne.n	8007a40 <HAL_UART_Transmit_IT+0xd4>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	e000      	b.n	8007a78 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007a76:	2302      	movs	r3, #2
  }
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3744      	adds	r7, #68	@ 0x44
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	08008e01 	.word	0x08008e01
 8007a88:	08008d21 	.word	0x08008d21
 8007a8c:	08008c5f 	.word	0x08008c5f
 8007a90:	08008ba7 	.word	0x08008ba7

08007a94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b0ba      	sub	sp, #232	@ 0xe8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007aba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007abe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d11b      	bne.n	8007b08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d015      	beq.n	8007b08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d105      	bne.n	8007af4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 8300 	beq.w	80080fe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
      }
      return;
 8007b06:	e2fa      	b.n	80080fe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8123 	beq.w	8007d58 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b16:	4b8d      	ldr	r3, [pc, #564]	@ (8007d4c <HAL_UART_IRQHandler+0x2b8>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b22:	4b8b      	ldr	r3, [pc, #556]	@ (8007d50 <HAL_UART_IRQHandler+0x2bc>)
 8007b24:	4013      	ands	r3, r2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 8116 	beq.w	8007d58 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d011      	beq.n	8007b5c <HAL_UART_IRQHandler+0xc8>
 8007b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b52:	f043 0201 	orr.w	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d011      	beq.n	8007b8c <HAL_UART_IRQHandler+0xf8>
 8007b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b82:	f043 0204 	orr.w	r2, r3, #4
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d011      	beq.n	8007bbc <HAL_UART_IRQHandler+0x128>
 8007b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2204      	movs	r2, #4
 8007baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb2:	f043 0202 	orr.w	r2, r3, #2
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d017      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bcc:	f003 0320 	and.w	r3, r3, #32
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007bd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007bd8:	4b5c      	ldr	r3, [pc, #368]	@ (8007d4c <HAL_UART_IRQHandler+0x2b8>)
 8007bda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2208      	movs	r2, #8
 8007be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bee:	f043 0208 	orr.w	r2, r3, #8
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d012      	beq.n	8007c2a <HAL_UART_IRQHandler+0x196>
 8007c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00c      	beq.n	8007c2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c20:	f043 0220 	orr.w	r2, r3, #32
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8266 	beq.w	8008102 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d013      	beq.n	8007c6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d105      	bne.n	8007c5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d007      	beq.n	8007c6a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c7e:	2b40      	cmp	r3, #64	@ 0x40
 8007c80:	d005      	beq.n	8007c8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d054      	beq.n	8007d38 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 ff0d 	bl	8008aae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ca0:	d146      	bne.n	8007d30 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007cce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1d9      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d017      	beq.n	8007d28 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cfe:	4a15      	ldr	r2, [pc, #84]	@ (8007d54 <HAL_UART_IRQHandler+0x2c0>)
 8007d00:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fb fee5 	bl	8003ad8 <HAL_DMA_Abort_IT>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d019      	beq.n	8007d48 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007d22:	4610      	mov	r0, r2
 8007d24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d26:	e00f      	b.n	8007d48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f9f5 	bl	8008118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d2e:	e00b      	b.n	8007d48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f9f1 	bl	8008118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d36:	e007      	b.n	8007d48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f9ed 	bl	8008118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007d46:	e1dc      	b.n	8008102 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d48:	bf00      	nop
    return;
 8007d4a:	e1da      	b.n	8008102 <HAL_UART_IRQHandler+0x66e>
 8007d4c:	10000001 	.word	0x10000001
 8007d50:	04000120 	.word	0x04000120
 8007d54:	08008b7b 	.word	0x08008b7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	f040 8170 	bne.w	8008042 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d66:	f003 0310 	and.w	r3, r3, #16
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 8169 	beq.w	8008042 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8162 	beq.w	8008042 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2210      	movs	r2, #16
 8007d84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d90:	2b40      	cmp	r3, #64	@ 0x40
 8007d92:	f040 80d8 	bne.w	8007f46 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007da4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 80af 	beq.w	8007f0c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007db4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007db8:	429a      	cmp	r2, r3
 8007dba:	f080 80a7 	bcs.w	8007f0c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f040 8087 	bne.w	8007eea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1da      	bne.n	8007ddc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3308      	adds	r3, #8
 8007e2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e38:	f023 0301 	bic.w	r3, r3, #1
 8007e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3308      	adds	r3, #8
 8007e46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e1      	bne.n	8007e26 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3308      	adds	r3, #8
 8007e68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3308      	adds	r3, #8
 8007e82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e3      	bne.n	8007e62 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eb8:	f023 0310 	bic.w	r3, r3, #16
 8007ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ecc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ed0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e4      	bne.n	8007ea8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fb fd9b 	bl	8003a20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2202      	movs	r2, #2
 8007eee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f911 	bl	800812c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007f0a:	e0fc      	b.n	8008106 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f16:	429a      	cmp	r2, r3
 8007f18:	f040 80f5 	bne.w	8008106 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0320 	and.w	r3, r3, #32
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	f040 80eb 	bne.w	8008106 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2202      	movs	r2, #2
 8007f34:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f8f4 	bl	800812c <HAL_UARTEx_RxEventCallback>
      return;
 8007f44:	e0df      	b.n	8008106 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 80d1 	beq.w	800810a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007f68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80cc 	beq.w	800810a <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f9c:	e841 2300 	strex	r3, r2, [r1]
 8007fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e4      	bne.n	8007f72 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3308      	adds	r3, #8
 8007fae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	623b      	str	r3, [r7, #32]
   return(result);
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fbe:	f023 0301 	bic.w	r3, r3, #1
 8007fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3308      	adds	r3, #8
 8007fcc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007fd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e1      	bne.n	8007fa8 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	60fb      	str	r3, [r7, #12]
   return(result);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f023 0310 	bic.w	r3, r3, #16
 800800c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800801a:	61fb      	str	r3, [r7, #28]
 800801c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801e:	69b9      	ldr	r1, [r7, #24]
 8008020:	69fa      	ldr	r2, [r7, #28]
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	617b      	str	r3, [r7, #20]
   return(result);
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e4      	bne.n	8007ff8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2202      	movs	r2, #2
 8008032:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f876 	bl	800812c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008040:	e063      	b.n	800810a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00e      	beq.n	800806c <HAL_UART_IRQHandler+0x5d8>
 800804e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d008      	beq.n	800806c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008062:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 ff6b 	bl	8008f40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800806a:	e051      	b.n	8008110 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800806c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008074:	2b00      	cmp	r3, #0
 8008076:	d014      	beq.n	80080a2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800807c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008080:	2b00      	cmp	r3, #0
 8008082:	d105      	bne.n	8008090 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008088:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d008      	beq.n	80080a2 <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008094:	2b00      	cmp	r3, #0
 8008096:	d03a      	beq.n	800810e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	4798      	blx	r3
    }
    return;
 80080a0:	e035      	b.n	800810e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d009      	beq.n	80080c2 <HAL_UART_IRQHandler+0x62e>
 80080ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 ff15 	bl	8008eea <UART_EndTransmit_IT>
    return;
 80080c0:	e026      	b.n	8008110 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d009      	beq.n	80080e2 <HAL_UART_IRQHandler+0x64e>
 80080ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 ff44 	bl	8008f68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080e0:	e016      	b.n	8008110 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d010      	beq.n	8008110 <HAL_UART_IRQHandler+0x67c>
 80080ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	da0c      	bge.n	8008110 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 ff2c 	bl	8008f54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080fc:	e008      	b.n	8008110 <HAL_UART_IRQHandler+0x67c>
      return;
 80080fe:	bf00      	nop
 8008100:	e006      	b.n	8008110 <HAL_UART_IRQHandler+0x67c>
    return;
 8008102:	bf00      	nop
 8008104:	e004      	b.n	8008110 <HAL_UART_IRQHandler+0x67c>
      return;
 8008106:	bf00      	nop
 8008108:	e002      	b.n	8008110 <HAL_UART_IRQHandler+0x67c>
      return;
 800810a:	bf00      	nop
 800810c:	e000      	b.n	8008110 <HAL_UART_IRQHandler+0x67c>
    return;
 800810e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8008110:	37e8      	adds	r7, #232	@ 0xe8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop

08008118 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008148:	b08c      	sub	sp, #48	@ 0x30
 800814a:	af00      	add	r7, sp, #0
 800814c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	431a      	orrs	r2, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	431a      	orrs	r2, r3
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	4313      	orrs	r3, r2
 800816a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4baa      	ldr	r3, [pc, #680]	@ (800841c <UART_SetConfig+0x2d8>)
 8008174:	4013      	ands	r3, r2
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	6812      	ldr	r2, [r2, #0]
 800817a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800817c:	430b      	orrs	r3, r1
 800817e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a9f      	ldr	r2, [pc, #636]	@ (8008420 <UART_SetConfig+0x2dc>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d004      	beq.n	80081b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ac:	4313      	orrs	r3, r2
 80081ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80081ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	6812      	ldr	r2, [r2, #0]
 80081c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	f023 010f 	bic.w	r1, r3, #15
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a90      	ldr	r2, [pc, #576]	@ (8008424 <UART_SetConfig+0x2e0>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d125      	bne.n	8008234 <UART_SetConfig+0xf0>
 80081e8:	4b8f      	ldr	r3, [pc, #572]	@ (8008428 <UART_SetConfig+0x2e4>)
 80081ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ee:	f003 0303 	and.w	r3, r3, #3
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d81a      	bhi.n	800822c <UART_SetConfig+0xe8>
 80081f6:	a201      	add	r2, pc, #4	@ (adr r2, 80081fc <UART_SetConfig+0xb8>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	0800820d 	.word	0x0800820d
 8008200:	0800821d 	.word	0x0800821d
 8008204:	08008215 	.word	0x08008215
 8008208:	08008225 	.word	0x08008225
 800820c:	2301      	movs	r3, #1
 800820e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008212:	e116      	b.n	8008442 <UART_SetConfig+0x2fe>
 8008214:	2302      	movs	r3, #2
 8008216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800821a:	e112      	b.n	8008442 <UART_SetConfig+0x2fe>
 800821c:	2304      	movs	r3, #4
 800821e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008222:	e10e      	b.n	8008442 <UART_SetConfig+0x2fe>
 8008224:	2308      	movs	r3, #8
 8008226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800822a:	e10a      	b.n	8008442 <UART_SetConfig+0x2fe>
 800822c:	2310      	movs	r3, #16
 800822e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008232:	e106      	b.n	8008442 <UART_SetConfig+0x2fe>
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a7c      	ldr	r2, [pc, #496]	@ (800842c <UART_SetConfig+0x2e8>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d138      	bne.n	80082b0 <UART_SetConfig+0x16c>
 800823e:	4b7a      	ldr	r3, [pc, #488]	@ (8008428 <UART_SetConfig+0x2e4>)
 8008240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008244:	f003 030c 	and.w	r3, r3, #12
 8008248:	2b0c      	cmp	r3, #12
 800824a:	d82d      	bhi.n	80082a8 <UART_SetConfig+0x164>
 800824c:	a201      	add	r2, pc, #4	@ (adr r2, 8008254 <UART_SetConfig+0x110>)
 800824e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008252:	bf00      	nop
 8008254:	08008289 	.word	0x08008289
 8008258:	080082a9 	.word	0x080082a9
 800825c:	080082a9 	.word	0x080082a9
 8008260:	080082a9 	.word	0x080082a9
 8008264:	08008299 	.word	0x08008299
 8008268:	080082a9 	.word	0x080082a9
 800826c:	080082a9 	.word	0x080082a9
 8008270:	080082a9 	.word	0x080082a9
 8008274:	08008291 	.word	0x08008291
 8008278:	080082a9 	.word	0x080082a9
 800827c:	080082a9 	.word	0x080082a9
 8008280:	080082a9 	.word	0x080082a9
 8008284:	080082a1 	.word	0x080082a1
 8008288:	2300      	movs	r3, #0
 800828a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800828e:	e0d8      	b.n	8008442 <UART_SetConfig+0x2fe>
 8008290:	2302      	movs	r3, #2
 8008292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008296:	e0d4      	b.n	8008442 <UART_SetConfig+0x2fe>
 8008298:	2304      	movs	r3, #4
 800829a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800829e:	e0d0      	b.n	8008442 <UART_SetConfig+0x2fe>
 80082a0:	2308      	movs	r3, #8
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a6:	e0cc      	b.n	8008442 <UART_SetConfig+0x2fe>
 80082a8:	2310      	movs	r3, #16
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ae:	e0c8      	b.n	8008442 <UART_SetConfig+0x2fe>
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a5e      	ldr	r2, [pc, #376]	@ (8008430 <UART_SetConfig+0x2ec>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d125      	bne.n	8008306 <UART_SetConfig+0x1c2>
 80082ba:	4b5b      	ldr	r3, [pc, #364]	@ (8008428 <UART_SetConfig+0x2e4>)
 80082bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80082c4:	2b30      	cmp	r3, #48	@ 0x30
 80082c6:	d016      	beq.n	80082f6 <UART_SetConfig+0x1b2>
 80082c8:	2b30      	cmp	r3, #48	@ 0x30
 80082ca:	d818      	bhi.n	80082fe <UART_SetConfig+0x1ba>
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	d00a      	beq.n	80082e6 <UART_SetConfig+0x1a2>
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	d814      	bhi.n	80082fe <UART_SetConfig+0x1ba>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <UART_SetConfig+0x19a>
 80082d8:	2b10      	cmp	r3, #16
 80082da:	d008      	beq.n	80082ee <UART_SetConfig+0x1aa>
 80082dc:	e00f      	b.n	80082fe <UART_SetConfig+0x1ba>
 80082de:	2300      	movs	r3, #0
 80082e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082e4:	e0ad      	b.n	8008442 <UART_SetConfig+0x2fe>
 80082e6:	2302      	movs	r3, #2
 80082e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ec:	e0a9      	b.n	8008442 <UART_SetConfig+0x2fe>
 80082ee:	2304      	movs	r3, #4
 80082f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082f4:	e0a5      	b.n	8008442 <UART_SetConfig+0x2fe>
 80082f6:	2308      	movs	r3, #8
 80082f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082fc:	e0a1      	b.n	8008442 <UART_SetConfig+0x2fe>
 80082fe:	2310      	movs	r3, #16
 8008300:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008304:	e09d      	b.n	8008442 <UART_SetConfig+0x2fe>
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a4a      	ldr	r2, [pc, #296]	@ (8008434 <UART_SetConfig+0x2f0>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d125      	bne.n	800835c <UART_SetConfig+0x218>
 8008310:	4b45      	ldr	r3, [pc, #276]	@ (8008428 <UART_SetConfig+0x2e4>)
 8008312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008316:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800831a:	2bc0      	cmp	r3, #192	@ 0xc0
 800831c:	d016      	beq.n	800834c <UART_SetConfig+0x208>
 800831e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008320:	d818      	bhi.n	8008354 <UART_SetConfig+0x210>
 8008322:	2b80      	cmp	r3, #128	@ 0x80
 8008324:	d00a      	beq.n	800833c <UART_SetConfig+0x1f8>
 8008326:	2b80      	cmp	r3, #128	@ 0x80
 8008328:	d814      	bhi.n	8008354 <UART_SetConfig+0x210>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <UART_SetConfig+0x1f0>
 800832e:	2b40      	cmp	r3, #64	@ 0x40
 8008330:	d008      	beq.n	8008344 <UART_SetConfig+0x200>
 8008332:	e00f      	b.n	8008354 <UART_SetConfig+0x210>
 8008334:	2300      	movs	r3, #0
 8008336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800833a:	e082      	b.n	8008442 <UART_SetConfig+0x2fe>
 800833c:	2302      	movs	r3, #2
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008342:	e07e      	b.n	8008442 <UART_SetConfig+0x2fe>
 8008344:	2304      	movs	r3, #4
 8008346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800834a:	e07a      	b.n	8008442 <UART_SetConfig+0x2fe>
 800834c:	2308      	movs	r3, #8
 800834e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008352:	e076      	b.n	8008442 <UART_SetConfig+0x2fe>
 8008354:	2310      	movs	r3, #16
 8008356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800835a:	e072      	b.n	8008442 <UART_SetConfig+0x2fe>
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a35      	ldr	r2, [pc, #212]	@ (8008438 <UART_SetConfig+0x2f4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d12a      	bne.n	80083bc <UART_SetConfig+0x278>
 8008366:	4b30      	ldr	r3, [pc, #192]	@ (8008428 <UART_SetConfig+0x2e4>)
 8008368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800836c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008370:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008374:	d01a      	beq.n	80083ac <UART_SetConfig+0x268>
 8008376:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800837a:	d81b      	bhi.n	80083b4 <UART_SetConfig+0x270>
 800837c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008380:	d00c      	beq.n	800839c <UART_SetConfig+0x258>
 8008382:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008386:	d815      	bhi.n	80083b4 <UART_SetConfig+0x270>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <UART_SetConfig+0x250>
 800838c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008390:	d008      	beq.n	80083a4 <UART_SetConfig+0x260>
 8008392:	e00f      	b.n	80083b4 <UART_SetConfig+0x270>
 8008394:	2300      	movs	r3, #0
 8008396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800839a:	e052      	b.n	8008442 <UART_SetConfig+0x2fe>
 800839c:	2302      	movs	r3, #2
 800839e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083a2:	e04e      	b.n	8008442 <UART_SetConfig+0x2fe>
 80083a4:	2304      	movs	r3, #4
 80083a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083aa:	e04a      	b.n	8008442 <UART_SetConfig+0x2fe>
 80083ac:	2308      	movs	r3, #8
 80083ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083b2:	e046      	b.n	8008442 <UART_SetConfig+0x2fe>
 80083b4:	2310      	movs	r3, #16
 80083b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ba:	e042      	b.n	8008442 <UART_SetConfig+0x2fe>
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a17      	ldr	r2, [pc, #92]	@ (8008420 <UART_SetConfig+0x2dc>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d13a      	bne.n	800843c <UART_SetConfig+0x2f8>
 80083c6:	4b18      	ldr	r3, [pc, #96]	@ (8008428 <UART_SetConfig+0x2e4>)
 80083c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80083d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083d4:	d01a      	beq.n	800840c <UART_SetConfig+0x2c8>
 80083d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083da:	d81b      	bhi.n	8008414 <UART_SetConfig+0x2d0>
 80083dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083e0:	d00c      	beq.n	80083fc <UART_SetConfig+0x2b8>
 80083e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083e6:	d815      	bhi.n	8008414 <UART_SetConfig+0x2d0>
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <UART_SetConfig+0x2b0>
 80083ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083f0:	d008      	beq.n	8008404 <UART_SetConfig+0x2c0>
 80083f2:	e00f      	b.n	8008414 <UART_SetConfig+0x2d0>
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083fa:	e022      	b.n	8008442 <UART_SetConfig+0x2fe>
 80083fc:	2302      	movs	r3, #2
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008402:	e01e      	b.n	8008442 <UART_SetConfig+0x2fe>
 8008404:	2304      	movs	r3, #4
 8008406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800840a:	e01a      	b.n	8008442 <UART_SetConfig+0x2fe>
 800840c:	2308      	movs	r3, #8
 800840e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008412:	e016      	b.n	8008442 <UART_SetConfig+0x2fe>
 8008414:	2310      	movs	r3, #16
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800841a:	e012      	b.n	8008442 <UART_SetConfig+0x2fe>
 800841c:	cfff69f3 	.word	0xcfff69f3
 8008420:	40008000 	.word	0x40008000
 8008424:	40013800 	.word	0x40013800
 8008428:	40021000 	.word	0x40021000
 800842c:	40004400 	.word	0x40004400
 8008430:	40004800 	.word	0x40004800
 8008434:	40004c00 	.word	0x40004c00
 8008438:	40005000 	.word	0x40005000
 800843c:	2310      	movs	r3, #16
 800843e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4aae      	ldr	r2, [pc, #696]	@ (8008700 <UART_SetConfig+0x5bc>)
 8008448:	4293      	cmp	r3, r2
 800844a:	f040 8097 	bne.w	800857c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800844e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008452:	2b08      	cmp	r3, #8
 8008454:	d823      	bhi.n	800849e <UART_SetConfig+0x35a>
 8008456:	a201      	add	r2, pc, #4	@ (adr r2, 800845c <UART_SetConfig+0x318>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	08008481 	.word	0x08008481
 8008460:	0800849f 	.word	0x0800849f
 8008464:	08008489 	.word	0x08008489
 8008468:	0800849f 	.word	0x0800849f
 800846c:	0800848f 	.word	0x0800848f
 8008470:	0800849f 	.word	0x0800849f
 8008474:	0800849f 	.word	0x0800849f
 8008478:	0800849f 	.word	0x0800849f
 800847c:	08008497 	.word	0x08008497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008480:	f7fe f82a 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8008484:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008486:	e010      	b.n	80084aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008488:	4b9e      	ldr	r3, [pc, #632]	@ (8008704 <UART_SetConfig+0x5c0>)
 800848a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800848c:	e00d      	b.n	80084aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800848e:	f7fd ff8b 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8008492:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008494:	e009      	b.n	80084aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800849a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800849c:	e005      	b.n	80084aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 8130 	beq.w	8008712 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b6:	4a94      	ldr	r2, [pc, #592]	@ (8008708 <UART_SetConfig+0x5c4>)
 80084b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084bc:	461a      	mov	r2, r3
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	4613      	mov	r3, r2
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	4413      	add	r3, r2
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d305      	bcc.n	80084e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d903      	bls.n	80084ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084e8:	e113      	b.n	8008712 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	2200      	movs	r2, #0
 80084ee:	60bb      	str	r3, [r7, #8]
 80084f0:	60fa      	str	r2, [r7, #12]
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f6:	4a84      	ldr	r2, [pc, #528]	@ (8008708 <UART_SetConfig+0x5c4>)
 80084f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2200      	movs	r2, #0
 8008500:	603b      	str	r3, [r7, #0]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008508:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800850c:	f7f7 fe76 	bl	80001fc <__aeabi_uldivmod>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4610      	mov	r0, r2
 8008516:	4619      	mov	r1, r3
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	020b      	lsls	r3, r1, #8
 8008522:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008526:	0202      	lsls	r2, r0, #8
 8008528:	6979      	ldr	r1, [r7, #20]
 800852a:	6849      	ldr	r1, [r1, #4]
 800852c:	0849      	lsrs	r1, r1, #1
 800852e:	2000      	movs	r0, #0
 8008530:	460c      	mov	r4, r1
 8008532:	4605      	mov	r5, r0
 8008534:	eb12 0804 	adds.w	r8, r2, r4
 8008538:	eb43 0905 	adc.w	r9, r3, r5
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	469a      	mov	sl, r3
 8008544:	4693      	mov	fp, r2
 8008546:	4652      	mov	r2, sl
 8008548:	465b      	mov	r3, fp
 800854a:	4640      	mov	r0, r8
 800854c:	4649      	mov	r1, r9
 800854e:	f7f7 fe55 	bl	80001fc <__aeabi_uldivmod>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4613      	mov	r3, r2
 8008558:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008560:	d308      	bcc.n	8008574 <UART_SetConfig+0x430>
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008568:	d204      	bcs.n	8008574 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6a3a      	ldr	r2, [r7, #32]
 8008570:	60da      	str	r2, [r3, #12]
 8008572:	e0ce      	b.n	8008712 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800857a:	e0ca      	b.n	8008712 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008584:	d166      	bne.n	8008654 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008586:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800858a:	2b08      	cmp	r3, #8
 800858c:	d827      	bhi.n	80085de <UART_SetConfig+0x49a>
 800858e:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <UART_SetConfig+0x450>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085b9 	.word	0x080085b9
 8008598:	080085c1 	.word	0x080085c1
 800859c:	080085c9 	.word	0x080085c9
 80085a0:	080085df 	.word	0x080085df
 80085a4:	080085cf 	.word	0x080085cf
 80085a8:	080085df 	.word	0x080085df
 80085ac:	080085df 	.word	0x080085df
 80085b0:	080085df 	.word	0x080085df
 80085b4:	080085d7 	.word	0x080085d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085b8:	f7fd ff8e 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 80085bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085be:	e014      	b.n	80085ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085c0:	f7fd ffa0 	bl	8006504 <HAL_RCC_GetPCLK2Freq>
 80085c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085c6:	e010      	b.n	80085ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085c8:	4b4e      	ldr	r3, [pc, #312]	@ (8008704 <UART_SetConfig+0x5c0>)
 80085ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085cc:	e00d      	b.n	80085ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085ce:	f7fd feeb 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 80085d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085d4:	e009      	b.n	80085ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085dc:	e005      	b.n	80085ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 8090 	beq.w	8008712 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f6:	4a44      	ldr	r2, [pc, #272]	@ (8008708 <UART_SetConfig+0x5c4>)
 80085f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085fc:	461a      	mov	r2, r3
 80085fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008600:	fbb3 f3f2 	udiv	r3, r3, r2
 8008604:	005a      	lsls	r2, r3, #1
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	085b      	lsrs	r3, r3, #1
 800860c:	441a      	add	r2, r3
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	fbb2 f3f3 	udiv	r3, r2, r3
 8008616:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	2b0f      	cmp	r3, #15
 800861c:	d916      	bls.n	800864c <UART_SetConfig+0x508>
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008624:	d212      	bcs.n	800864c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	b29b      	uxth	r3, r3
 800862a:	f023 030f 	bic.w	r3, r3, #15
 800862e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	085b      	lsrs	r3, r3, #1
 8008634:	b29b      	uxth	r3, r3
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	b29a      	uxth	r2, r3
 800863c:	8bfb      	ldrh	r3, [r7, #30]
 800863e:	4313      	orrs	r3, r2
 8008640:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	8bfa      	ldrh	r2, [r7, #30]
 8008648:	60da      	str	r2, [r3, #12]
 800864a:	e062      	b.n	8008712 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008652:	e05e      	b.n	8008712 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008654:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008658:	2b08      	cmp	r3, #8
 800865a:	d828      	bhi.n	80086ae <UART_SetConfig+0x56a>
 800865c:	a201      	add	r2, pc, #4	@ (adr r2, 8008664 <UART_SetConfig+0x520>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	08008689 	.word	0x08008689
 8008668:	08008691 	.word	0x08008691
 800866c:	08008699 	.word	0x08008699
 8008670:	080086af 	.word	0x080086af
 8008674:	0800869f 	.word	0x0800869f
 8008678:	080086af 	.word	0x080086af
 800867c:	080086af 	.word	0x080086af
 8008680:	080086af 	.word	0x080086af
 8008684:	080086a7 	.word	0x080086a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008688:	f7fd ff26 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 800868c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800868e:	e014      	b.n	80086ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008690:	f7fd ff38 	bl	8006504 <HAL_RCC_GetPCLK2Freq>
 8008694:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008696:	e010      	b.n	80086ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008698:	4b1a      	ldr	r3, [pc, #104]	@ (8008704 <UART_SetConfig+0x5c0>)
 800869a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800869c:	e00d      	b.n	80086ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800869e:	f7fd fe83 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 80086a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086a4:	e009      	b.n	80086ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086ac:	e005      	b.n	80086ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80086b8:	bf00      	nop
    }

    if (pclk != 0U)
 80086ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d028      	beq.n	8008712 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c4:	4a10      	ldr	r2, [pc, #64]	@ (8008708 <UART_SetConfig+0x5c4>)
 80086c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ca:	461a      	mov	r2, r3
 80086cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	085b      	lsrs	r3, r3, #1
 80086d8:	441a      	add	r2, r3
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	2b0f      	cmp	r3, #15
 80086e8:	d910      	bls.n	800870c <UART_SetConfig+0x5c8>
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086f0:	d20c      	bcs.n	800870c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	60da      	str	r2, [r3, #12]
 80086fc:	e009      	b.n	8008712 <UART_SetConfig+0x5ce>
 80086fe:	bf00      	nop
 8008700:	40008000 	.word	0x40008000
 8008704:	00f42400 	.word	0x00f42400
 8008708:	0800923c 	.word	0x0800923c
      }
      else
      {
        ret = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2201      	movs	r2, #1
 8008716:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2201      	movs	r2, #1
 800871e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2200      	movs	r2, #0
 8008726:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2200      	movs	r2, #0
 800872c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800872e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008732:	4618      	mov	r0, r3
 8008734:	3730      	adds	r7, #48	@ 0x30
 8008736:	46bd      	mov	sp, r7
 8008738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800873c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00a      	beq.n	8008766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00a      	beq.n	80087aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d0:	f003 0310 	and.w	r3, r3, #16
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00a      	beq.n	80087ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	430a      	orrs	r2, r1
 80087ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f2:	f003 0320 	and.w	r3, r3, #32
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	430a      	orrs	r2, r1
 800880e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01a      	beq.n	8008852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800883a:	d10a      	bne.n	8008852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	605a      	str	r2, [r3, #4]
  }
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b098      	sub	sp, #96	@ 0x60
 8008884:	af02      	add	r7, sp, #8
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008890:	f7f9 fc2a 	bl	80020e8 <HAL_GetTick>
 8008894:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0308 	and.w	r3, r3, #8
 80088a0:	2b08      	cmp	r3, #8
 80088a2:	d12f      	bne.n	8008904 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088ac:	2200      	movs	r2, #0
 80088ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f88e 	bl	80089d4 <UART_WaitOnFlagUntilTimeout>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d022      	beq.n	8008904 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	461a      	mov	r2, r3
 80088da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80088de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e6      	bne.n	80088be <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e063      	b.n	80089cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0304 	and.w	r3, r3, #4
 800890e:	2b04      	cmp	r3, #4
 8008910:	d149      	bne.n	80089a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008912:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800891a:	2200      	movs	r2, #0
 800891c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f857 	bl	80089d4 <UART_WaitOnFlagUntilTimeout>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d03c      	beq.n	80089a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	623b      	str	r3, [r7, #32]
   return(result);
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008940:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800894a:	633b      	str	r3, [r7, #48]	@ 0x30
 800894c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e6      	bne.n	800892c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3308      	adds	r3, #8
 8008964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	60fb      	str	r3, [r7, #12]
   return(result);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f023 0301 	bic.w	r3, r3, #1
 8008974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3308      	adds	r3, #8
 800897c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800897e:	61fa      	str	r2, [r7, #28]
 8008980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	69b9      	ldr	r1, [r7, #24]
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	617b      	str	r3, [r7, #20]
   return(result);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e5      	bne.n	800895e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2220      	movs	r2, #32
 8008996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e012      	b.n	80089cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2220      	movs	r2, #32
 80089b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3758      	adds	r7, #88	@ 0x58
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	4613      	mov	r3, r2
 80089e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e4:	e04f      	b.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ec:	d04b      	beq.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ee:	f7f9 fb7b 	bl	80020e8 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d302      	bcc.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e04e      	b.n	8008aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0304 	and.w	r3, r3, #4
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d037      	beq.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b80      	cmp	r3, #128	@ 0x80
 8008a1a:	d034      	beq.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b40      	cmp	r3, #64	@ 0x40
 8008a20:	d031      	beq.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	f003 0308 	and.w	r3, r3, #8
 8008a2c:	2b08      	cmp	r3, #8
 8008a2e:	d110      	bne.n	8008a52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2208      	movs	r2, #8
 8008a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 f838 	bl	8008aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2208      	movs	r2, #8
 8008a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e029      	b.n	8008aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a60:	d111      	bne.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 f81e 	bl	8008aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e00f      	b.n	8008aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69da      	ldr	r2, [r3, #28]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	bf0c      	ite	eq
 8008a96:	2301      	moveq	r3, #1
 8008a98:	2300      	movne	r3, #0
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	79fb      	ldrb	r3, [r7, #7]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d0a0      	beq.n	80089e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b095      	sub	sp, #84	@ 0x54
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008abe:	e853 3f00 	ldrex	r3, [r3]
 8008ac2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ad6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ada:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008adc:	e841 2300 	strex	r3, r2, [r1]
 8008ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e6      	bne.n	8008ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3308      	adds	r3, #8
 8008aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008afe:	f023 0301 	bic.w	r3, r3, #1
 8008b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3308      	adds	r3, #8
 8008b0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e3      	bne.n	8008ae8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d118      	bne.n	8008b5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f023 0310 	bic.w	r3, r3, #16
 8008b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b46:	61bb      	str	r3, [r7, #24]
 8008b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	6979      	ldr	r1, [r7, #20]
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	613b      	str	r3, [r7, #16]
   return(result);
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e6      	bne.n	8008b28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b6e:	bf00      	nop
 8008b70:	3754      	adds	r7, #84	@ 0x54
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7ff fabd 	bl	8008118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b08f      	sub	sp, #60	@ 0x3c
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bb4:	2b21      	cmp	r3, #33	@ 0x21
 8008bb6:	d14c      	bne.n	8008c52 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d132      	bne.n	8008c2a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008be4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e6      	bne.n	8008bc4 <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	461a      	mov	r2, r3
 8008c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c18:	6979      	ldr	r1, [r7, #20]
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	e841 2300 	strex	r3, r2, [r1]
 8008c20:	613b      	str	r3, [r7, #16]
   return(result);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1e6      	bne.n	8008bf6 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008c28:	e013      	b.n	8008c52 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008c52:	bf00      	nop
 8008c54:	373c      	adds	r7, #60	@ 0x3c
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b091      	sub	sp, #68	@ 0x44
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c6c:	2b21      	cmp	r3, #33	@ 0x21
 8008c6e:	d151      	bne.n	8008d14 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d132      	bne.n	8008ce2 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	623b      	str	r3, [r7, #32]
   return(result);
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e6      	bne.n	8008c7c <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ccc:	61fb      	str	r3, [r7, #28]
 8008cce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	69b9      	ldr	r1, [r7, #24]
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e6      	bne.n	8008cae <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008ce0:	e018      	b.n	8008d14 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cea:	881a      	ldrh	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cf4:	b292      	uxth	r2, r2
 8008cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cfc:	1c9a      	adds	r2, r3, #2
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008d14:	bf00      	nop
 8008d16:	3744      	adds	r7, #68	@ 0x44
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b091      	sub	sp, #68	@ 0x44
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d2e:	2b21      	cmp	r3, #33	@ 0x21
 8008d30:	d160      	bne.n	8008df4 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d38:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008d3a:	e057      	b.n	8008dec <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d133      	bne.n	8008db0 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	623b      	str	r3, [r7, #32]
   return(result);
 8008d58:	6a3b      	ldr	r3, [r7, #32]
 8008d5a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3308      	adds	r3, #8
 8008d66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d68:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e5      	bne.n	8008d48 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	e853 3f00 	ldrex	r3, [r3]
 8008d88:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9a:	61fb      	str	r3, [r7, #28]
 8008d9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9e:	69b9      	ldr	r1, [r7, #24]
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	617b      	str	r3, [r7, #20]
   return(result);
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1e6      	bne.n	8008d7c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008dae:	e021      	b.n	8008df4 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d013      	beq.n	8008de6 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc2:	781a      	ldrb	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008de6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008de8:	3b01      	subs	r3, #1
 8008dea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008dec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1a4      	bne.n	8008d3c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008df2:	e7ff      	b.n	8008df4 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008df4:	bf00      	nop
 8008df6:	3744      	adds	r7, #68	@ 0x44
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b091      	sub	sp, #68	@ 0x44
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e0e:	2b21      	cmp	r3, #33	@ 0x21
 8008e10:	d165      	bne.n	8008ede <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e18:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008e1a:	e05c      	b.n	8008ed6 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d133      	bne.n	8008e90 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3308      	adds	r3, #8
 8008e46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e50:	e841 2300 	strex	r3, r2, [r1]
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e5      	bne.n	8008e28 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7a:	61bb      	str	r3, [r7, #24]
 8008e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6979      	ldr	r1, [r7, #20]
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	613b      	str	r3, [r7, #16]
   return(result);
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e6      	bne.n	8008e5c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008e8e:	e026      	b.n	8008ede <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d018      	beq.n	8008ed0 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea6:	881a      	ldrh	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008eb0:	b292      	uxth	r2, r2
 8008eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eb8:	1c9a      	adds	r2, r3, #2
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008ed0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008ed6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d19f      	bne.n	8008e1c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008edc:	e7ff      	b.n	8008ede <UART_TxISR_16BIT_FIFOEN+0xde>
 8008ede:	bf00      	nop
 8008ee0:	3744      	adds	r7, #68	@ 0x44
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b088      	sub	sp, #32
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f06:	61fb      	str	r3, [r7, #28]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6979      	ldr	r1, [r7, #20]
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e6      	bne.n	8008ef2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2220      	movs	r2, #32
 8008f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7f8 f96c 	bl	8001210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f38:	bf00      	nop
 8008f3a:	3720      	adds	r7, #32
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d101      	bne.n	8008f92 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e027      	b.n	8008fe2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2224      	movs	r2, #36	@ 0x24
 8008f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0201 	bic.w	r2, r2, #1
 8008fb8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008fc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d101      	bne.n	8009006 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009002:	2302      	movs	r3, #2
 8009004:	e02d      	b.n	8009062 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2224      	movs	r2, #36	@ 0x24
 8009012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f022 0201 	bic.w	r2, r2, #1
 800902c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	430a      	orrs	r2, r1
 8009040:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f850 	bl	80090e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2220      	movs	r2, #32
 8009054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800907a:	2b01      	cmp	r3, #1
 800907c:	d101      	bne.n	8009082 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800907e:	2302      	movs	r3, #2
 8009080:	e02d      	b.n	80090de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2224      	movs	r2, #36	@ 0x24
 800908e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 0201 	bic.w	r2, r2, #1
 80090a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f812 	bl	80090e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2220      	movs	r2, #32
 80090d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d108      	bne.n	800910a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009108:	e031      	b.n	800916e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800910a:	2308      	movs	r3, #8
 800910c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800910e:	2308      	movs	r3, #8
 8009110:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	0e5b      	lsrs	r3, r3, #25
 800911a:	b2db      	uxtb	r3, r3
 800911c:	f003 0307 	and.w	r3, r3, #7
 8009120:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	0f5b      	lsrs	r3, r3, #29
 800912a:	b2db      	uxtb	r3, r3
 800912c:	f003 0307 	and.w	r3, r3, #7
 8009130:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	7b3a      	ldrb	r2, [r7, #12]
 8009136:	4911      	ldr	r1, [pc, #68]	@ (800917c <UARTEx_SetNbDataToProcess+0x94>)
 8009138:	5c8a      	ldrb	r2, [r1, r2]
 800913a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800913e:	7b3a      	ldrb	r2, [r7, #12]
 8009140:	490f      	ldr	r1, [pc, #60]	@ (8009180 <UARTEx_SetNbDataToProcess+0x98>)
 8009142:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009144:	fb93 f3f2 	sdiv	r3, r3, r2
 8009148:	b29a      	uxth	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	7b7a      	ldrb	r2, [r7, #13]
 8009154:	4909      	ldr	r1, [pc, #36]	@ (800917c <UARTEx_SetNbDataToProcess+0x94>)
 8009156:	5c8a      	ldrb	r2, [r1, r2]
 8009158:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800915c:	7b7a      	ldrb	r2, [r7, #13]
 800915e:	4908      	ldr	r1, [pc, #32]	@ (8009180 <UARTEx_SetNbDataToProcess+0x98>)
 8009160:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009162:	fb93 f3f2 	sdiv	r3, r3, r2
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800916e:	bf00      	nop
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	08009254 	.word	0x08009254
 8009180:	0800925c 	.word	0x0800925c

08009184 <memset>:
 8009184:	4402      	add	r2, r0
 8009186:	4603      	mov	r3, r0
 8009188:	4293      	cmp	r3, r2
 800918a:	d100      	bne.n	800918e <memset+0xa>
 800918c:	4770      	bx	lr
 800918e:	f803 1b01 	strb.w	r1, [r3], #1
 8009192:	e7f9      	b.n	8009188 <memset+0x4>

08009194 <__libc_init_array>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4d0d      	ldr	r5, [pc, #52]	@ (80091cc <__libc_init_array+0x38>)
 8009198:	4c0d      	ldr	r4, [pc, #52]	@ (80091d0 <__libc_init_array+0x3c>)
 800919a:	1b64      	subs	r4, r4, r5
 800919c:	10a4      	asrs	r4, r4, #2
 800919e:	2600      	movs	r6, #0
 80091a0:	42a6      	cmp	r6, r4
 80091a2:	d109      	bne.n	80091b8 <__libc_init_array+0x24>
 80091a4:	4d0b      	ldr	r5, [pc, #44]	@ (80091d4 <__libc_init_array+0x40>)
 80091a6:	4c0c      	ldr	r4, [pc, #48]	@ (80091d8 <__libc_init_array+0x44>)
 80091a8:	f000 f818 	bl	80091dc <_init>
 80091ac:	1b64      	subs	r4, r4, r5
 80091ae:	10a4      	asrs	r4, r4, #2
 80091b0:	2600      	movs	r6, #0
 80091b2:	42a6      	cmp	r6, r4
 80091b4:	d105      	bne.n	80091c2 <__libc_init_array+0x2e>
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091bc:	4798      	blx	r3
 80091be:	3601      	adds	r6, #1
 80091c0:	e7ee      	b.n	80091a0 <__libc_init_array+0xc>
 80091c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c6:	4798      	blx	r3
 80091c8:	3601      	adds	r6, #1
 80091ca:	e7f2      	b.n	80091b2 <__libc_init_array+0x1e>
 80091cc:	0800926c 	.word	0x0800926c
 80091d0:	0800926c 	.word	0x0800926c
 80091d4:	0800926c 	.word	0x0800926c
 80091d8:	08009270 	.word	0x08009270

080091dc <_init>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	bf00      	nop
 80091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e2:	bc08      	pop	{r3}
 80091e4:	469e      	mov	lr, r3
 80091e6:	4770      	bx	lr

080091e8 <_fini>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	bf00      	nop
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr
