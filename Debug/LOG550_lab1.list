
LOG550_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006104  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080062c0  080062c0  000072c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006330  08006330  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006330  08006330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006338  08006338  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006338  08006338  00007338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800633c  0800633c  0000733c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006340  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  2000000c  0800634c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800634c  00008504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191af  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c24  00000000  00000000  000211eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00023e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f7  00000000  00000000  000253d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb61  00000000  00000000  000264c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e2b  00000000  00000000  00053028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118fd8  00000000  00000000  0006ce53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d9c  00000000  00000000  00185e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018bc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080062a8 	.word	0x080062a8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080062a8 	.word	0x080062a8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f001 f93b 	bl	800176a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f82a 	bl	800054c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f8:	f000 f88a 	bl	8000610 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fbe0 	bl	8000cc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000500:	f000 f8b6 	bl	8000670 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000504:	f000 f918 	bl	8000738 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000508:	f000 f94e 	bl	80007a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f98c 	bl	8000828 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000510:	f000 f9ca 	bl	80008a8 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000514:	f000 fa1e 	bl	8000954 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000518:	f000 fa5a 	bl	80009d0 <MX_SPI3_Init>
  MX_UART4_Init();
 800051c:	f000 fa96 	bl	8000a4c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000520:	f000 fae0 	bl	8000ae4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000524:	f000 fb2a 	bl	8000b7c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000528:	f000 fb76 	bl	8000c18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800052c:	f000 fbc0 	bl	8000cb0 <MX_USB_OTG_FS_USB_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000530:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000534:	4804      	ldr	r0, [pc, #16]	@ (8000548 <main+0x5c>)
 8000536:	f002 fc5b 	bl	8002df0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800053a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800053e:	f001 f989 	bl	8001854 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000542:	bf00      	nop
 8000544:	e7f4      	b.n	8000530 <main+0x44>
 8000546:	bf00      	nop
 8000548:	48000400 	.word	0x48000400

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b096      	sub	sp, #88	@ 0x58
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2244      	movs	r2, #68	@ 0x44
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f005 fe78 	bl	8006250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800056e:	2000      	movs	r0, #0
 8000570:	f003 fab8 	bl	8003ae4 <HAL_PWREx_ControlVoltageScaling>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800057a:	f000 fce3 	bl	8000f44 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800057e:	f003 fa81 	bl	8003a84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000582:	4b22      	ldr	r3, [pc, #136]	@ (800060c <SystemClock_Config+0xc0>)
 8000584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000588:	4a20      	ldr	r2, [pc, #128]	@ (800060c <SystemClock_Config+0xc0>)
 800058a:	f023 0318 	bic.w	r3, r3, #24
 800058e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000592:	2314      	movs	r3, #20
 8000594:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000596:	2301      	movs	r3, #1
 8000598:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a2:	2360      	movs	r3, #96	@ 0x60
 80005a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005aa:	2301      	movs	r3, #1
 80005ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005b2:	233c      	movs	r3, #60	@ 0x3c
 80005b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fb30 	bl	8003c2c <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005d2:	f000 fcb7 	bl	8000f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2105      	movs	r1, #5
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 ff36 	bl	8004460 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005fa:	f000 fca3 	bl	8000f44 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005fe:	f004 fd1d 	bl	800503c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000602:	bf00      	nop
 8000604:	3758      	adds	r7, #88	@ 0x58
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0a6      	sub	sp, #152	@ 0x98
 8000614:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2294      	movs	r2, #148	@ 0x94
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f005 fe17 	bl	8006250 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000622:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000626:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000628:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800062c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000630:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000634:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000636:	2301      	movs	r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800063e:	2318      	movs	r3, #24
 8000640:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800064e:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8000652:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4618      	mov	r0, r3
 8000658:	f004 f9c0 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000662:	f000 fc6f 	bl	8000f44 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3798      	adds	r7, #152	@ 0x98
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000686:	4b29      	ldr	r3, [pc, #164]	@ (800072c <MX_ADC1_Init+0xbc>)
 8000688:	4a29      	ldr	r2, [pc, #164]	@ (8000730 <MX_ADC1_Init+0xc0>)
 800068a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800068c:	4b27      	ldr	r3, [pc, #156]	@ (800072c <MX_ADC1_Init+0xbc>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000692:	4b26      	ldr	r3, [pc, #152]	@ (800072c <MX_ADC1_Init+0xbc>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000698:	4b24      	ldr	r3, [pc, #144]	@ (800072c <MX_ADC1_Init+0xbc>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800069e:	4b23      	ldr	r3, [pc, #140]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a4:	4b21      	ldr	r3, [pc, #132]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006a6:	2204      	movs	r2, #4
 80006a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006aa:	4b20      	ldr	r3, [pc, #128]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ca:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d0:	4b16      	ldr	r3, [pc, #88]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006de:	4b13      	ldr	r3, [pc, #76]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e6:	4811      	ldr	r0, [pc, #68]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006e8:	f001 fa78 	bl	8001bdc <HAL_ADC_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006f2:	f000 fc27 	bl	8000f44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_ADC1_Init+0xc4>)
 80006f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006fa:	2306      	movs	r3, #6
 80006fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000702:	237f      	movs	r3, #127	@ 0x7f
 8000704:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000706:	2304      	movs	r3, #4
 8000708:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	@ (800072c <MX_ADC1_Init+0xbc>)
 8000714:	f001 fba8 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800071e:	f000 fc11 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028
 8000730:	50040000 	.word	0x50040000
 8000734:	04300002 	.word	0x04300002

08000738 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 800073e:	4a19      	ldr	r2, [pc, #100]	@ (80007a4 <MX_DFSDM1_Init+0x6c>)
 8000740:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 8000744:	2201      	movs	r2, #1
 8000746:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 8000750:	2202      	movs	r2, #2
 8000752:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 800076e:	2204      	movs	r2, #4
 8000770:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 800077a:	2201      	movs	r2, #1
 800077c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_DFSDM1_Init+0x68>)
 800078c:	f002 f87a 	bl	8002884 <HAL_DFSDM_ChannelInit>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000796:	f000 fbd5 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000090 	.word	0x20000090
 80007a4:	40016040 	.word	0x40016040

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_I2C1_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <MX_I2C1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_I2C1_Init+0x74>)
 80007b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000824 <MX_I2C1_Init+0x7c>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b8:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_I2C1_Init+0x74>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d6:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e2:	480e      	ldr	r0, [pc, #56]	@ (800081c <MX_I2C1_Init+0x74>)
 80007e4:	f002 fb41 	bl	8002e6a <HAL_I2C_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ee:	f000 fba9 	bl	8000f44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4809      	ldr	r0, [pc, #36]	@ (800081c <MX_I2C1_Init+0x74>)
 80007f6:	f002 fbd3 	bl	8002fa0 <HAL_I2CEx_ConfigAnalogFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000800:	f000 fba0 	bl	8000f44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_I2C1_Init+0x74>)
 8000808:	f002 fc15 	bl	8003036 <HAL_I2CEx_ConfigDigitalFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 fb97 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000c8 	.word	0x200000c8
 8000820:	40005400 	.word	0x40005400
 8000824:	307075b1 	.word	0x307075b1

08000828 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_I2C2_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	@ (80008a0 <MX_I2C2_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_I2C2_Init+0x74>)
 8000834:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <MX_I2C2_Init+0x7c>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_I2C2_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_I2C2_Init+0x74>)
 8000840:	2201      	movs	r2, #1
 8000842:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_I2C2_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_I2C2_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000862:	480e      	ldr	r0, [pc, #56]	@ (800089c <MX_I2C2_Init+0x74>)
 8000864:	f002 fb01 	bl	8002e6a <HAL_I2C_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800086e:	f000 fb69 	bl	8000f44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4809      	ldr	r0, [pc, #36]	@ (800089c <MX_I2C2_Init+0x74>)
 8000876:	f002 fb93 	bl	8002fa0 <HAL_I2CEx_ConfigAnalogFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000880:	f000 fb60 	bl	8000f44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_I2C2_Init+0x74>)
 8000888:	f002 fbd5 	bl	8003036 <HAL_I2CEx_ConfigDigitalFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 fb57 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000011c 	.word	0x2000011c
 80008a0:	40005800 	.word	0x40005800
 80008a4:	307075b1 	.word	0x307075b1

080008a8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008bc:	4b23      	ldr	r3, [pc, #140]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008be:	4a24      	ldr	r2, [pc, #144]	@ (8000950 <MX_OCTOSPI1_Init+0xa8>)
 80008c0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008c2:	4b22      	ldr	r3, [pc, #136]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008c8:	4b20      	ldr	r3, [pc, #128]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80008d4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008d8:	2220      	movs	r2, #32
 80008da:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008de:	2201      	movs	r2, #1
 80008e0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80008e8:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 8000908:	2208      	movs	r2, #8
 800090a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800090c:	480f      	ldr	r0, [pc, #60]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 800090e:	f002 fbdf 	bl	80030d0 <HAL_OSPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000918:	f000 fb14 	bl	8000f44 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000924:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000928:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	@ (800094c <MX_OCTOSPI1_Init+0xa4>)
 8000934:	f002 fc86 	bl	8003244 <HAL_OSPIM_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800093e:	f000 fb01 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000170 	.word	0x20000170
 8000950:	a0001000 	.word	0xa0001000

08000954 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_SPI1_Init+0x74>)
 800095a:	4a1c      	ldr	r2, [pc, #112]	@ (80009cc <MX_SPI1_Init+0x78>)
 800095c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_SPI1_Init+0x74>)
 8000960:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_SPI1_Init+0x74>)
 800096e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000972:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_SPI1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_SPI1_Init+0x74>)
 8000982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000986:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_SPI1_Init+0x74>)
 800098a:	2208      	movs	r2, #8
 800098c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_SPI1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_SPI1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_SPI1_Init+0x74>)
 80009a2:	2207      	movs	r2, #7
 80009a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_SPI1_Init+0x74>)
 80009ae:	2208      	movs	r2, #8
 80009b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_SPI1_Init+0x74>)
 80009b4:	f004 fd3a 	bl	800542c <HAL_SPI_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009be:	f000 fac1 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200001c0 	.word	0x200001c0
 80009cc:	40013000 	.word	0x40013000

080009d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <MX_SPI3_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a48 <MX_SPI3_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <MX_SPI3_Init+0x74>)
 80009dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009e2:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <MX_SPI3_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_SPI3_Init+0x74>)
 80009ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_SPI3_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <MX_SPI3_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_SPI3_Init+0x74>)
 80009fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_SPI3_Init+0x74>)
 8000a06:	2208      	movs	r2, #8
 8000a08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_SPI3_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_SPI3_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <MX_SPI3_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_SPI3_Init+0x74>)
 8000a1e:	2207      	movs	r2, #7
 8000a20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <MX_SPI3_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_SPI3_Init+0x74>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_SPI3_Init+0x74>)
 8000a30:	f004 fcfc 	bl	800542c <HAL_SPI_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fa83 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000224 	.word	0x20000224
 8000a48:	40003c00 	.word	0x40003c00

08000a4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a50:	4b22      	ldr	r3, [pc, #136]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a52:	4a23      	ldr	r2, [pc, #140]	@ (8000ae0 <MX_UART4_Init+0x94>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a56:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a94:	4811      	ldr	r0, [pc, #68]	@ (8000adc <MX_UART4_Init+0x90>)
 8000a96:	f004 fd6c 	bl	8005572 <HAL_UART_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000aa0:	f000 fa50 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	480d      	ldr	r0, [pc, #52]	@ (8000adc <MX_UART4_Init+0x90>)
 8000aa8:	f005 fb08 	bl	80060bc <HAL_UARTEx_SetTxFifoThreshold>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ab2:	f000 fa47 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4808      	ldr	r0, [pc, #32]	@ (8000adc <MX_UART4_Init+0x90>)
 8000aba:	f005 fb3d 	bl	8006138 <HAL_UARTEx_SetRxFifoThreshold>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ac4:	f000 fa3e 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	@ (8000adc <MX_UART4_Init+0x90>)
 8000aca:	f005 fabe 	bl	800604a <HAL_UARTEx_DisableFifoMode>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 fa36 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000288 	.word	0x20000288
 8000ae0:	40004c00 	.word	0x40004c00

08000ae4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae8:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000aea:	4a23      	ldr	r2, [pc, #140]	@ (8000b78 <MX_USART1_UART_Init+0x94>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aee:	4b21      	ldr	r3, [pc, #132]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b26:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2c:	4811      	ldr	r0, [pc, #68]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b2e:	f004 fd20 	bl	8005572 <HAL_UART_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b38:	f000 fa04 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b40:	f005 fabc 	bl	80060bc <HAL_UARTEx_SetTxFifoThreshold>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b4a:	f000 f9fb 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4808      	ldr	r0, [pc, #32]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b52:	f005 faf1 	bl	8006138 <HAL_UARTEx_SetRxFifoThreshold>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b5c:	f000 f9f2 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b62:	f005 fa72 	bl	800604a <HAL_UARTEx_DisableFifoMode>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b6c:	f000 f9ea 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000031c 	.word	0x2000031c
 8000b78:	40013800 	.word	0x40013800

08000b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b23      	ldr	r3, [pc, #140]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000b82:	4a24      	ldr	r2, [pc, #144]	@ (8000c14 <MX_USART2_UART_Init+0x98>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b86:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000ba8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bac:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc6:	4812      	ldr	r0, [pc, #72]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000bc8:	f004 fcd3 	bl	8005572 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000bd2:	f000 f9b7 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000bda:	f005 fa6f 	bl	80060bc <HAL_UARTEx_SetTxFifoThreshold>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000be4:	f000 f9ae 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be8:	2100      	movs	r1, #0
 8000bea:	4809      	ldr	r0, [pc, #36]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000bec:	f005 faa4 	bl	8006138 <HAL_UARTEx_SetRxFifoThreshold>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000bf6:	f000 f9a5 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000bfc:	f005 fa25 	bl	800604a <HAL_UARTEx_DisableFifoMode>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000c06:	f000 f99d 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200003b0 	.word	0x200003b0
 8000c14:	40004400 	.word	0x40004400

08000c18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c1e:	4a23      	ldr	r2, [pc, #140]	@ (8000cac <MX_USART3_UART_Init+0x94>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c22:	4b21      	ldr	r3, [pc, #132]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c60:	4811      	ldr	r0, [pc, #68]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c62:	f004 fc86 	bl	8005572 <HAL_UART_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c6c:	f000 f96a 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c74:	f005 fa22 	bl	80060bc <HAL_UARTEx_SetTxFifoThreshold>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7e:	f000 f961 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4808      	ldr	r0, [pc, #32]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c86:	f005 fa57 	bl	8006138 <HAL_UARTEx_SetRxFifoThreshold>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c90:	f000 f958 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c96:	f005 f9d8 	bl	800604a <HAL_UARTEx_DisableFifoMode>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ca0:	f000 f950 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000444 	.word	0x20000444
 8000cac:	40004800 	.word	0x40004800

08000cb0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	@ 0x30
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd6:	4b96      	ldr	r3, [pc, #600]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a95      	ldr	r2, [pc, #596]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000cdc:	f043 0310 	orr.w	r3, r3, #16
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b93      	ldr	r3, [pc, #588]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b90      	ldr	r3, [pc, #576]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	4a8f      	ldr	r2, [pc, #572]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	4b8a      	ldr	r3, [pc, #552]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	4a89      	ldr	r2, [pc, #548]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d12:	4b87      	ldr	r3, [pc, #540]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b84      	ldr	r3, [pc, #528]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	4a83      	ldr	r2, [pc, #524]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2a:	4b81      	ldr	r3, [pc, #516]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b7e      	ldr	r3, [pc, #504]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	4a7d      	ldr	r2, [pc, #500]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d42:	4b7b      	ldr	r3, [pc, #492]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4e:	4b78      	ldr	r3, [pc, #480]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	4a77      	ldr	r2, [pc, #476]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5a:	4b75      	ldr	r3, [pc, #468]	@ (8000f30 <MX_GPIO_Init+0x270>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f240 1105 	movw	r1, #261	@ 0x105
 8000d6c:	4871      	ldr	r0, [pc, #452]	@ (8000f34 <MX_GPIO_Init+0x274>)
 8000d6e:	f002 f827 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000d72:	2200      	movs	r2, #0
 8000d74:	f248 111c 	movw	r1, #33052	@ 0x811c
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7c:	f002 f820 	bl	8002dc0 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d80:	2200      	movs	r2, #0
 8000d82:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000d86:	486c      	ldr	r0, [pc, #432]	@ (8000f38 <MX_GPIO_Init+0x278>)
 8000d88:	f002 f81a 	bl	8002dc0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f242 0183 	movw	r1, #8323	@ 0x2083
 8000d92:	486a      	ldr	r0, [pc, #424]	@ (8000f3c <MX_GPIO_Init+0x27c>)
 8000d94:	f002 f814 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000d9e:	4868      	ldr	r0, [pc, #416]	@ (8000f40 <MX_GPIO_Init+0x280>)
 8000da0:	f002 f80e 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000da4:	f240 1305 	movw	r3, #261	@ 0x105
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	485d      	ldr	r0, [pc, #372]	@ (8000f34 <MX_GPIO_Init+0x274>)
 8000dbe:	f001 fe6d 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000dc2:	237a      	movs	r3, #122	@ 0x7a
 8000dc4:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4857      	ldr	r0, [pc, #348]	@ (8000f34 <MX_GPIO_Init+0x274>)
 8000dd8:	f001 fe60 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ddc:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4853      	ldr	r0, [pc, #332]	@ (8000f40 <MX_GPIO_Init+0x280>)
 8000df4:	f001 fe52 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000df8:	f248 131c 	movw	r3, #33052	@ 0x811c
 8000dfc:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e14:	f001 fe42 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4842      	ldr	r0, [pc, #264]	@ (8000f38 <MX_GPIO_Init+0x278>)
 8000e2e:	f001 fe35 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	483a      	ldr	r0, [pc, #232]	@ (8000f38 <MX_GPIO_Init+0x278>)
 8000e4e:	f001 fe25 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e52:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000e56:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4833      	ldr	r0, [pc, #204]	@ (8000f38 <MX_GPIO_Init+0x278>)
 8000e6c:	f001 fe16 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000e70:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8000e74:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	482d      	ldr	r0, [pc, #180]	@ (8000f3c <MX_GPIO_Init+0x27c>)
 8000e88:	f001 fe08 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000e8c:	f242 0383 	movw	r3, #8323	@ 0x2083
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4825      	ldr	r0, [pc, #148]	@ (8000f3c <MX_GPIO_Init+0x27c>)
 8000ea6:	f001 fdf9 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000eaa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	481f      	ldr	r0, [pc, #124]	@ (8000f40 <MX_GPIO_Init+0x280>)
 8000ec4:	f001 fdea 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000ec8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee0:	f001 fddc 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000ee4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f04:	f001 fdca 	bl	8002a9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2017      	movs	r0, #23
 8000f0e:	f001 fc82 	bl	8002816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f12:	2017      	movs	r0, #23
 8000f14:	f001 fc9b 	bl	800284e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2028      	movs	r0, #40	@ 0x28
 8000f1e:	f001 fc7a 	bl	8002816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f22:	2028      	movs	r0, #40	@ 0x28
 8000f24:	f001 fc93 	bl	800284e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f28:	bf00      	nop
 8000f2a:	3730      	adds	r7, #48	@ 0x30
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48001000 	.word	0x48001000
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	48000c00 	.word	0x48000c00
 8000f40:	48000800 	.word	0x48000800

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <Error_Handler+0x8>

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f62:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f72:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000

08000f98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a15      	ldr	r2, [pc, #84]	@ (800100c <HAL_ADC_MspInit+0x74>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d123      	bne.n	8001002 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <HAL_ADC_MspInit+0x78>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a14      	ldr	r2, [pc, #80]	@ (8001010 <HAL_ADC_MspInit+0x78>)
 8000fc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_ADC_MspInit+0x78>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_ADC_MspInit+0x78>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <HAL_ADC_MspInit+0x78>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_ADC_MspInit+0x78>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000fea:	233f      	movs	r3, #63	@ 0x3f
 8000fec:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fee:	230b      	movs	r3, #11
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <HAL_ADC_MspInit+0x7c>)
 8000ffe:	f001 fd4d 	bl	8002a9c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	@ 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	50040000 	.word	0x50040000
 8001010:	40021000 	.word	0x40021000
 8001014:	48000800 	.word	0x48000800

08001018 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0ae      	sub	sp, #184	@ 0xb8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2294      	movs	r2, #148	@ 0x94
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f005 f909 	bl	8006250 <memset>
  if(DFSDM1_Init == 0)
 800103e:	4b25      	ldr	r3, [pc, #148]	@ (80010d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d142      	bne.n	80010cc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001046:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800104a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4618      	mov	r0, r3
 8001058:	f003 fcc0 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001062:	f7ff ff6f 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106a:	4a1b      	ldr	r2, [pc, #108]	@ (80010d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800106c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001070:	6613      	str	r3, [r2, #96]	@ 0x60
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001076:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	4a15      	ldr	r2, [pc, #84]	@ (80010d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001096:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800109a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010b0:	2306      	movs	r3, #6
 80010b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4807      	ldr	r0, [pc, #28]	@ (80010dc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80010be:	f001 fced 	bl	8002a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80010c2:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a02      	ldr	r2, [pc, #8]	@ (80010d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010ca:	6013      	str	r3, [r2, #0]
  }

}
 80010cc:	bf00      	nop
 80010ce:	37b8      	adds	r7, #184	@ 0xb8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200004d8 	.word	0x200004d8
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48001000 	.word	0x48001000

080010e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0b0      	sub	sp, #192	@ 0xc0
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	2294      	movs	r2, #148	@ 0x94
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f005 f8a5 	bl	8006250 <memset>
  if(hi2c->Instance==I2C1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a42      	ldr	r2, [pc, #264]	@ (8001214 <HAL_I2C_MspInit+0x134>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d13c      	bne.n	800118a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001110:	2340      	movs	r3, #64	@ 0x40
 8001112:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001114:	2300      	movs	r3, #0
 8001116:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fc5d 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001128:	f7ff ff0c 	bl	8000f44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	4b3a      	ldr	r3, [pc, #232]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	4a39      	ldr	r2, [pc, #228]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001138:	4b37      	ldr	r3, [pc, #220]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001144:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114c:	2312      	movs	r3, #18
 800114e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001152:	2301      	movs	r3, #1
 8001154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800115e:	2304      	movs	r3, #4
 8001160:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001168:	4619      	mov	r1, r3
 800116a:	482c      	ldr	r0, [pc, #176]	@ (800121c <HAL_I2C_MspInit+0x13c>)
 800116c:	f001 fc96 	bl	8002a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001170:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001174:	4a28      	ldr	r2, [pc, #160]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 8001176:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800117a:	6593      	str	r3, [r2, #88]	@ 0x58
 800117c:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001188:	e040      	b.n	800120c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a24      	ldr	r2, [pc, #144]	@ (8001220 <HAL_I2C_MspInit+0x140>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d13b      	bne.n	800120c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001198:	2300      	movs	r3, #0
 800119a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 fc1b 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80011ac:	f7ff feca 	bl	8000f44 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b4:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d0:	2312      	movs	r3, #18
 80011d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011e2:	2304      	movs	r3, #4
 80011e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80011ec:	4619      	mov	r1, r3
 80011ee:	480b      	ldr	r0, [pc, #44]	@ (800121c <HAL_I2C_MspInit+0x13c>)
 80011f0:	f001 fc54 	bl	8002a9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f8:	4a07      	ldr	r2, [pc, #28]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 80011fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_I2C_MspInit+0x138>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
}
 800120c:	bf00      	nop
 800120e:	37c0      	adds	r7, #192	@ 0xc0
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40005400 	.word	0x40005400
 8001218:	40021000 	.word	0x40021000
 800121c:	48000400 	.word	0x48000400
 8001220:	40005800 	.word	0x40005800

08001224 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0b0      	sub	sp, #192	@ 0xc0
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	2294      	movs	r2, #148	@ 0x94
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f005 f803 	bl	8006250 <memset>
  if(hospi->Instance==OCTOSPI1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a28      	ldr	r2, [pc, #160]	@ (80012f0 <HAL_OSPI_MspInit+0xcc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d149      	bne.n	80012e8 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001254:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001258:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	4618      	mov	r0, r3
 8001266:	f003 fbb9 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001270:	f7ff fe68 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <HAL_OSPI_MspInit+0xd0>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001278:	4a1e      	ldr	r2, [pc, #120]	@ (80012f4 <HAL_OSPI_MspInit+0xd0>)
 800127a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800127e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001280:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <HAL_OSPI_MspInit+0xd0>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <HAL_OSPI_MspInit+0xd0>)
 800128e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001290:	4a18      	ldr	r2, [pc, #96]	@ (80012f4 <HAL_OSPI_MspInit+0xd0>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001296:	6513      	str	r3, [r2, #80]	@ 0x50
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <HAL_OSPI_MspInit+0xd0>)
 800129a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800129c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <HAL_OSPI_MspInit+0xd0>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a8:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <HAL_OSPI_MspInit+0xd0>)
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <HAL_OSPI_MspInit+0xd0>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80012bc:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80012c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012d6:	230a      	movs	r3, #10
 80012d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <HAL_OSPI_MspInit+0xd4>)
 80012e4:	f001 fbda 	bl	8002a9c <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 80012e8:	bf00      	nop
 80012ea:	37c0      	adds	r7, #192	@ 0xc0
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	a0001000 	.word	0xa0001000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48001000 	.word	0x48001000

080012fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	@ 0x30
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a2f      	ldr	r2, [pc, #188]	@ (80013d8 <HAL_SPI_MspInit+0xdc>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d129      	bne.n	8001372 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800131e:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001322:	4a2e      	ldr	r2, [pc, #184]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 8001324:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001328:	6613      	str	r3, [r2, #96]	@ 0x60
 800132a:	4b2c      	ldr	r3, [pc, #176]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b29      	ldr	r3, [pc, #164]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a28      	ldr	r2, [pc, #160]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800134e:	23e0      	movs	r3, #224	@ 0xe0
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135e:	2305      	movs	r3, #5
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136c:	f001 fb96 	bl	8002a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001370:	e02d      	b.n	80013ce <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a1a      	ldr	r2, [pc, #104]	@ (80013e0 <HAL_SPI_MspInit+0xe4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d128      	bne.n	80013ce <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001380:	4a16      	ldr	r2, [pc, #88]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 8001382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001386:	6593      	str	r3, [r2, #88]	@ 0x58
 8001388:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001398:	4a10      	ldr	r2, [pc, #64]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a0:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <HAL_SPI_MspInit+0xe0>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80013ac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013be:	2306      	movs	r3, #6
 80013c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <HAL_SPI_MspInit+0xe8>)
 80013ca:	f001 fb67 	bl	8002a9c <HAL_GPIO_Init>
}
 80013ce:	bf00      	nop
 80013d0:	3730      	adds	r7, #48	@ 0x30
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40013000 	.word	0x40013000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40003c00 	.word	0x40003c00
 80013e4:	48000800 	.word	0x48000800

080013e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0b4      	sub	sp, #208	@ 0xd0
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001404:	2294      	movs	r2, #148	@ 0x94
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f004 ff21 	bl	8006250 <memset>
  if(huart->Instance==UART4)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a83      	ldr	r2, [pc, #524]	@ (8001620 <HAL_UART_MspInit+0x238>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d13c      	bne.n	8001492 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001418:	2308      	movs	r3, #8
 800141a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800141c:	2300      	movs	r3, #0
 800141e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001424:	4618      	mov	r0, r3
 8001426:	f003 fad9 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001430:	f7ff fd88 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001434:	4b7b      	ldr	r3, [pc, #492]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001438:	4a7a      	ldr	r2, [pc, #488]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 800143a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800143e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001440:	4b78      	ldr	r3, [pc, #480]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001444:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b75      	ldr	r3, [pc, #468]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001450:	4a74      	ldr	r2, [pc, #464]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001458:	4b72      	ldr	r3, [pc, #456]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	623b      	str	r3, [r7, #32]
 8001462:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001464:	2303      	movs	r3, #3
 8001466:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800147c:	2308      	movs	r3, #8
 800147e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001486:	4619      	mov	r1, r3
 8001488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148c:	f001 fb06 	bl	8002a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001490:	e0c2      	b.n	8001618 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a64      	ldr	r2, [pc, #400]	@ (8001628 <HAL_UART_MspInit+0x240>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d13b      	bne.n	8001514 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800149c:	2301      	movs	r3, #1
 800149e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014a0:	2300      	movs	r3, #0
 80014a2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fa97 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80014b4:	f7ff fd46 	bl	8000f44 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b8:	4b5a      	ldr	r3, [pc, #360]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80014ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014bc:	4a59      	ldr	r2, [pc, #356]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80014be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80014c4:	4b57      	ldr	r3, [pc, #348]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80014c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b54      	ldr	r3, [pc, #336]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d4:	4a53      	ldr	r2, [pc, #332]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014dc:	4b51      	ldr	r3, [pc, #324]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80014e8:	23c0      	movs	r3, #192	@ 0xc0
 80014ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001500:	2307      	movs	r3, #7
 8001502:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800150a:	4619      	mov	r1, r3
 800150c:	4847      	ldr	r0, [pc, #284]	@ (800162c <HAL_UART_MspInit+0x244>)
 800150e:	f001 fac5 	bl	8002a9c <HAL_GPIO_Init>
}
 8001512:	e081      	b.n	8001618 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a45      	ldr	r2, [pc, #276]	@ (8001630 <HAL_UART_MspInit+0x248>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d13b      	bne.n	8001596 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001522:	2300      	movs	r3, #0
 8001524:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001526:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152a:	4618      	mov	r0, r3
 800152c:	f003 fa56 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001536:	f7ff fd05 	bl	8000f44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800153a:	4b3a      	ldr	r3, [pc, #232]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	4a39      	ldr	r2, [pc, #228]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 8001540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001544:	6593      	str	r3, [r2, #88]	@ 0x58
 8001546:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	4b34      	ldr	r3, [pc, #208]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	4a33      	ldr	r2, [pc, #204]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800156a:	2378      	movs	r3, #120	@ 0x78
 800156c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001582:	2307      	movs	r3, #7
 8001584:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001588:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800158c:	4619      	mov	r1, r3
 800158e:	4829      	ldr	r0, [pc, #164]	@ (8001634 <HAL_UART_MspInit+0x24c>)
 8001590:	f001 fa84 	bl	8002a9c <HAL_GPIO_Init>
}
 8001594:	e040      	b.n	8001618 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a27      	ldr	r2, [pc, #156]	@ (8001638 <HAL_UART_MspInit+0x250>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d13b      	bne.n	8001618 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015a0:	2304      	movs	r3, #4
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 fa15 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80015b8:	f7ff fcc4 	bl	8000f44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c0:	4a18      	ldr	r2, [pc, #96]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80015c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c8:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d8:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e0:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <HAL_UART_MspInit+0x23c>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80015ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001606:	2307      	movs	r3, #7
 8001608:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001610:	4619      	mov	r1, r3
 8001612:	4808      	ldr	r0, [pc, #32]	@ (8001634 <HAL_UART_MspInit+0x24c>)
 8001614:	f001 fa42 	bl	8002a9c <HAL_GPIO_Init>
}
 8001618:	bf00      	nop
 800161a:	37d0      	adds	r7, #208	@ 0xd0
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40004c00 	.word	0x40004c00
 8001624:	40021000 	.word	0x40021000
 8001628:	40013800 	.word	0x40013800
 800162c:	48000400 	.word	0x48000400
 8001630:	40004400 	.word	0x40004400
 8001634:	48000c00 	.word	0x48000c00
 8001638:	40004800 	.word	0x40004800

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <NMI_Handler+0x4>

08001644 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <MemManage_Handler+0x4>

08001654 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <UsageFault_Handler+0x4>

08001664 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001692:	f000 f8bf 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}

0800169a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800169e:	2020      	movs	r0, #32
 80016a0:	f001 fbc0 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80016a4:	2040      	movs	r0, #64	@ 0x40
 80016a6:	f001 fbbd 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016aa:	2080      	movs	r0, #128	@ 0x80
 80016ac:	f001 fbba 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016b0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016b4:	f001 fbb6 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80016c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80016c4:	f001 fbae 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80016c8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80016cc:	f001 fbaa 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80016d0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80016d4:	f001 fba6 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80016d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016dc:	f001 fba2 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80016e0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80016e4:	f001 fb9e 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80016e8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80016ec:	f001 fb9a 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001750 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800171c:	f7ff ffea 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <LoopForever+0x6>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	@ (8001758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <LoopForever+0xe>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	@ (8001764 <LoopForever+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001746:	f004 fd8b 	bl	8006260 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800174a:	f7fe fecf 	bl	80004ec <main>

0800174e <LoopForever>:

LoopForever:
    b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001750:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800175c:	08006340 	.word	0x08006340
  ldr r2, =_sbss
 8001760:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001764:	20000504 	.word	0x20000504

08001768 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_IRQHandler>

0800176a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f001 f843 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f80e 	bl	800179c <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	e001      	b.n	8001790 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800178c:	f7ff fbe0 	bl	8000f50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001790:	79fb      	ldrb	r3, [r7, #7]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017a8:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <HAL_InitTick+0x6c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d023      	beq.n	80017f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <HAL_InitTick+0x70>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <HAL_InitTick+0x6c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017be:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 f84f 	bl	800286a <HAL_SYSTICK_Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10f      	bne.n	80017f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d809      	bhi.n	80017ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d8:	2200      	movs	r2, #0
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f001 f819 	bl	8002816 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <HAL_InitTick+0x74>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e007      	b.n	80017fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e004      	b.n	80017fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	e001      	b.n	80017fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	@ (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008
 8001838:	200004dc 	.word	0x200004dc

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200004dc 	.word	0x200004dc

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff ffee 	bl	800183c <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800186e:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffde 	bl	800183c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008

0800189c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	609a      	str	r2, [r3, #8]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	609a      	str	r2, [r3, #8]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3360      	adds	r3, #96	@ 0x60
 8001916:	461a      	mov	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <LL_ADC_SetOffset+0x44>)
 8001926:	4013      	ands	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	4313      	orrs	r3, r2
 8001934:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800193c:	bf00      	nop
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	03fff000 	.word	0x03fff000

0800194c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3360      	adds	r3, #96	@ 0x60
 800195a:	461a      	mov	r2, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3360      	adds	r3, #96	@ 0x60
 8001988:	461a      	mov	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	431a      	orrs	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	615a      	str	r2, [r3, #20]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3330      	adds	r3, #48	@ 0x30
 80019e4:	461a      	mov	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	4413      	add	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	211f      	movs	r1, #31
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	0e9b      	lsrs	r3, r3, #26
 8001a0c:	f003 011f 	and.w	r1, r3, #31
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3314      	adds	r3, #20
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	0e5b      	lsrs	r3, r3, #25
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	4413      	add	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	0d1b      	lsrs	r3, r3, #20
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2107      	movs	r1, #7
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	401a      	ands	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	0d1b      	lsrs	r3, r3, #20
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	431a      	orrs	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0318 	and.w	r3, r3, #24
 8001aa6:	4908      	ldr	r1, [pc, #32]	@ (8001ac8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001aa8:	40d9      	lsrs	r1, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	400b      	ands	r3, r1
 8001aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	0007ffff 	.word	0x0007ffff

08001acc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001adc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6093      	str	r3, [r2, #8]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b04:	d101      	bne.n	8001b0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b54:	d101      	bne.n	8001b5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <LL_ADC_IsEnabled+0x18>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <LL_ADC_IsEnabled+0x1a>
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d101      	bne.n	8001bcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e129      	b.n	8001e4a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff f9c7 	bl	8000f98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff67 	bl	8001af0 <LL_ADC_IsDeepPowerDownEnabled>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff4d 	bl	8001acc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff82 	bl	8001b40 <LL_ADC_IsInternalRegulatorEnabled>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d115      	bne.n	8001c6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff66 	bl	8001b18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c4c:	4b81      	ldr	r3, [pc, #516]	@ (8001e54 <HAL_ADC_Init+0x278>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	4a81      	ldr	r2, [pc, #516]	@ (8001e58 <HAL_ADC_Init+0x27c>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	099b      	lsrs	r3, r3, #6
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c60:	e002      	b.n	8001c68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f9      	bne.n	8001c62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff64 	bl	8001b40 <LL_ADC_IsInternalRegulatorEnabled>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10d      	bne.n	8001c9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c82:	f043 0210 	orr.w	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8e:	f043 0201 	orr.w	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff75 	bl	8001b8e <LL_ADC_REG_IsConversionOngoing>
 8001ca4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 80c2 	bne.w	8001e38 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f040 80be 	bne.w	8001e38 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cc4:	f043 0202 	orr.w	r2, r3, #2
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff49 	bl	8001b68 <LL_ADC_IsEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10b      	bne.n	8001cf4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cdc:	485f      	ldr	r0, [pc, #380]	@ (8001e5c <HAL_ADC_Init+0x280>)
 8001cde:	f7ff ff43 	bl	8001b68 <LL_ADC_IsEnabled>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d105      	bne.n	8001cf4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4619      	mov	r1, r3
 8001cee:	485c      	ldr	r0, [pc, #368]	@ (8001e60 <HAL_ADC_Init+0x284>)
 8001cf0:	f7ff fdd4 	bl	800189c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7e5b      	ldrb	r3, [r3, #25]
 8001cf8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cfe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d04:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d0a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d12:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d106      	bne.n	8001d30 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	3b01      	subs	r3, #1
 8001d28:	045b      	lsls	r3, r3, #17
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	4b44      	ldr	r3, [pc, #272]	@ (8001e64 <HAL_ADC_Init+0x288>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff25 	bl	8001bb4 <LL_ADC_INJ_IsConversionOngoing>
 8001d6a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d140      	bne.n	8001df4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d13d      	bne.n	8001df4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7e1b      	ldrb	r3, [r3, #24]
 8001d80:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d82:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d8a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d9a:	f023 0306 	bic.w	r3, r3, #6
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d118      	bne.n	8001de4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dc8:	4311      	orrs	r1, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	e007      	b.n	8001df4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d10c      	bne.n	8001e16 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f023 010f 	bic.w	r1, r3, #15
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	1e5a      	subs	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e14:	e007      	b.n	8001e26 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 020f 	bic.w	r2, r2, #15
 8001e24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2a:	f023 0303 	bic.w	r3, r3, #3
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e36:	e007      	b.n	8001e48 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	f043 0210 	orr.w	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000000 	.word	0x20000000
 8001e58:	053e2d63 	.word	0x053e2d63
 8001e5c:	50040000 	.word	0x50040000
 8001e60:	50040300 	.word	0x50040300
 8001e64:	fff0c007 	.word	0xfff0c007

08001e68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b0b6      	sub	sp, #216	@ 0xd8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x22>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e3d5      	b.n	8002636 <HAL_ADC_ConfigChannel+0x7ce>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fe79 	bl	8001b8e <LL_ADC_REG_IsConversionOngoing>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 83ba 	bne.w	8002618 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	d824      	bhi.n	8001efe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	3b02      	subs	r3, #2
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d81b      	bhi.n	8001ef6 <HAL_ADC_ConfigChannel+0x8e>
 8001ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec4 <HAL_ADC_ConfigChannel+0x5c>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001edd 	.word	0x08001edd
 8001ecc:	08001ee5 	.word	0x08001ee5
 8001ed0:	08001eed 	.word	0x08001eed
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ed4:	230c      	movs	r3, #12
 8001ed6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001eda:	e010      	b.n	8001efe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001edc:	2312      	movs	r3, #18
 8001ede:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ee2:	e00c      	b.n	8001efe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ee4:	2318      	movs	r3, #24
 8001ee6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001eea:	e008      	b.n	8001efe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001eec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ef4:	e003      	b.n	8001efe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001ef6:	2306      	movs	r3, #6
 8001ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001efc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001f0c:	f7ff fd62 	bl	80019d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fe3a 	bl	8001b8e <LL_ADC_REG_IsConversionOngoing>
 8001f1a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fe46 	bl	8001bb4 <LL_ADC_INJ_IsConversionOngoing>
 8001f28:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f040 81bf 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 81ba 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f48:	d10f      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2200      	movs	r2, #0
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7ff fd69 	bl	8001a2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fd23 	bl	80019ae <LL_ADC_SetSamplingTimeCommonConfig>
 8001f68:	e00e      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7ff fd58 	bl	8001a2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fd13 	bl	80019ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	08db      	lsrs	r3, r3, #3
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6919      	ldr	r1, [r3, #16]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fba:	f7ff fca3 	bl	8001904 <LL_ADC_SetOffset>
 8001fbe:	e179      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fcc0 	bl	800194c <LL_ADC_GetOffsetChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10a      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x184>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fcb5 	bl	800194c <LL_ADC_GetOffsetChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	0e9b      	lsrs	r3, r3, #26
 8001fe6:	f003 021f 	and.w	r2, r3, #31
 8001fea:	e01e      	b.n	800202a <HAL_ADC_ConfigChannel+0x1c2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fcaa 	bl	800194c <LL_ADC_GetOffsetChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800200a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800200e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002012:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800201a:	2320      	movs	r3, #32
 800201c:	e004      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800201e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002032:	2b00      	cmp	r3, #0
 8002034:	d105      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x1da>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0e9b      	lsrs	r3, r3, #26
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	e018      	b.n	8002074 <HAL_ADC_ConfigChannel+0x20c>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800205a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800205e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002066:	2320      	movs	r3, #32
 8002068:	e004      	b.n	8002074 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800206a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002074:	429a      	cmp	r2, r3
 8002076:	d106      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2200      	movs	r2, #0
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fc79 	bl	8001978 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2101      	movs	r1, #1
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fc5d 	bl	800194c <LL_ADC_GetOffsetChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x24a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2101      	movs	r1, #1
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fc52 	bl	800194c <LL_ADC_GetOffsetChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	0e9b      	lsrs	r3, r3, #26
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	e01e      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x288>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2101      	movs	r1, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fc47 	bl	800194c <LL_ADC_GetOffsetChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80020d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80020d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e004      	b.n	80020ee <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80020e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x2a0>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	e018      	b.n	800213a <HAL_ADC_ConfigChannel+0x2d2>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800211c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002124:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800212c:	2320      	movs	r3, #32
 800212e:	e004      	b.n	800213a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002130:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800213a:	429a      	cmp	r2, r3
 800213c:	d106      	bne.n	800214c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	2101      	movs	r1, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fc16 	bl	8001978 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2102      	movs	r1, #2
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fbfa 	bl	800194c <LL_ADC_GetOffsetChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10a      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x310>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2102      	movs	r1, #2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fbef 	bl	800194c <LL_ADC_GetOffsetChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	0e9b      	lsrs	r3, r3, #26
 8002172:	f003 021f 	and.w	r2, r3, #31
 8002176:	e01e      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x34e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2102      	movs	r1, #2
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fbe4 	bl	800194c <LL_ADC_GetOffsetChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002196:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800219a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800219e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80021a6:	2320      	movs	r3, #32
 80021a8:	e004      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80021aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x366>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0e9b      	lsrs	r3, r3, #26
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	e014      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80021dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80021e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80021ea:	2320      	movs	r3, #32
 80021ec:	e004      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80021ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d106      	bne.n	800220a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2200      	movs	r2, #0
 8002202:	2102      	movs	r1, #2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fbb7 	bl	8001978 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2103      	movs	r1, #3
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fb9b 	bl	800194c <LL_ADC_GetOffsetChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10a      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x3ce>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2103      	movs	r1, #3
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fb90 	bl	800194c <LL_ADC_GetOffsetChannel>
 800222c:	4603      	mov	r3, r0
 800222e:	0e9b      	lsrs	r3, r3, #26
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	e017      	b.n	8002266 <HAL_ADC_ConfigChannel+0x3fe>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2103      	movs	r1, #3
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fb85 	bl	800194c <LL_ADC_GetOffsetChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800224e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002250:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e003      	b.n	8002264 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800225c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_ADC_ConfigChannel+0x416>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0e9b      	lsrs	r3, r3, #26
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	e011      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x43a>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800228c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800228e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002290:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002296:	2320      	movs	r3, #32
 8002298:	e003      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800229a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d106      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2200      	movs	r2, #0
 80022ac:	2103      	movs	r1, #3
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fb62 	bl	8001978 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fc55 	bl	8001b68 <LL_ADC_IsEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 813f 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f7ff fbd6 	bl	8001a84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a8e      	ldr	r2, [pc, #568]	@ (8002518 <HAL_ADC_ConfigChannel+0x6b0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	f040 8130 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <HAL_ADC_ConfigChannel+0x4a4>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	3301      	adds	r3, #1
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2b09      	cmp	r3, #9
 8002302:	bf94      	ite	ls
 8002304:	2301      	movls	r3, #1
 8002306:	2300      	movhi	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e019      	b.n	8002340 <HAL_ADC_ConfigChannel+0x4d8>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800231a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800231c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800231e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e003      	b.n	8002330 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2b09      	cmp	r3, #9
 8002338:	bf94      	ite	ls
 800233a:	2301      	movls	r3, #1
 800233c:	2300      	movhi	r3, #0
 800233e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002340:	2b00      	cmp	r3, #0
 8002342:	d079      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d107      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x4f8>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	3301      	adds	r3, #1
 8002358:	069b      	lsls	r3, r3, #26
 800235a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800235e:	e015      	b.n	800238c <HAL_ADC_ConfigChannel+0x524>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800236e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002370:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e003      	b.n	8002384 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800237c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	069b      	lsls	r3, r3, #26
 8002388:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x544>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	3301      	adds	r3, #1
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	e017      	b.n	80023dc <HAL_ADC_ConfigChannel+0x574>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80023ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80023be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80023c4:	2320      	movs	r3, #32
 80023c6:	e003      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80023c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	ea42 0103 	orr.w	r1, r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x59a>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0e9b      	lsrs	r3, r3, #26
 80023f2:	3301      	adds	r3, #1
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	051b      	lsls	r3, r3, #20
 8002400:	e018      	b.n	8002434 <HAL_ADC_ConfigChannel+0x5cc>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002412:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e003      	b.n	8002426 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	3301      	adds	r3, #1
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002434:	430b      	orrs	r3, r1
 8002436:	e080      	b.n	800253a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x5ec>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	3301      	adds	r3, #1
 800244c:	069b      	lsls	r3, r3, #26
 800244e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002452:	e015      	b.n	8002480 <HAL_ADC_ConfigChannel+0x618>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e003      	b.n	8002478 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	069b      	lsls	r3, r3, #26
 800247c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x638>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	3301      	adds	r3, #1
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	e017      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x668>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	61bb      	str	r3, [r7, #24]
  return result;
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e003      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	ea42 0103 	orr.w	r1, r2, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10d      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x694>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	3301      	adds	r3, #1
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	3b1e      	subs	r3, #30
 80024f4:	051b      	lsls	r3, r3, #20
 80024f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024fa:	e01d      	b.n	8002538 <HAL_ADC_ConfigChannel+0x6d0>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	60fb      	str	r3, [r7, #12]
  return result;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e005      	b.n	8002524 <HAL_ADC_ConfigChannel+0x6bc>
 8002518:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f003 021f 	and.w	r2, r3, #31
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	3b1e      	subs	r3, #30
 8002532:	051b      	lsls	r3, r3, #20
 8002534:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002538:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253e:	4619      	mov	r1, r3
 8002540:	f7ff fa74 	bl	8001a2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b3d      	ldr	r3, [pc, #244]	@ (8002640 <HAL_ADC_ConfigChannel+0x7d8>)
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d06c      	beq.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002550:	483c      	ldr	r0, [pc, #240]	@ (8002644 <HAL_ADC_ConfigChannel+0x7dc>)
 8002552:	f7ff f9c9 	bl	80018e8 <LL_ADC_GetCommonPathInternalCh>
 8002556:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a3a      	ldr	r2, [pc, #232]	@ (8002648 <HAL_ADC_ConfigChannel+0x7e0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d127      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002564:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002568:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d121      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a35      	ldr	r2, [pc, #212]	@ (800264c <HAL_ADC_ConfigChannel+0x7e4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d157      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800257a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800257e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002582:	4619      	mov	r1, r3
 8002584:	482f      	ldr	r0, [pc, #188]	@ (8002644 <HAL_ADC_ConfigChannel+0x7dc>)
 8002586:	f7ff f99c 	bl	80018c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800258a:	4b31      	ldr	r3, [pc, #196]	@ (8002650 <HAL_ADC_ConfigChannel+0x7e8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	099b      	lsrs	r3, r3, #6
 8002590:	4a30      	ldr	r2, [pc, #192]	@ (8002654 <HAL_ADC_ConfigChannel+0x7ec>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80025a4:	e002      	b.n	80025ac <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f9      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b2:	e03a      	b.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a27      	ldr	r2, [pc, #156]	@ (8002658 <HAL_ADC_ConfigChannel+0x7f0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d113      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1f      	ldr	r2, [pc, #124]	@ (800264c <HAL_ADC_ConfigChannel+0x7e4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d12a      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025dc:	4619      	mov	r1, r3
 80025de:	4819      	ldr	r0, [pc, #100]	@ (8002644 <HAL_ADC_ConfigChannel+0x7dc>)
 80025e0:	f7ff f96f 	bl	80018c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025e4:	e021      	b.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1c      	ldr	r2, [pc, #112]	@ (800265c <HAL_ADC_ConfigChannel+0x7f4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d11c      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d116      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a12      	ldr	r2, [pc, #72]	@ (800264c <HAL_ADC_ConfigChannel+0x7e4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d111      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002606:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800260a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800260e:	4619      	mov	r1, r3
 8002610:	480c      	ldr	r0, [pc, #48]	@ (8002644 <HAL_ADC_ConfigChannel+0x7dc>)
 8002612:	f7ff f956 	bl	80018c2 <LL_ADC_SetCommonPathInternalCh>
 8002616:	e008      	b.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002632:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002636:	4618      	mov	r0, r3
 8002638:	37d8      	adds	r7, #216	@ 0xd8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	80080000 	.word	0x80080000
 8002644:	50040300 	.word	0x50040300
 8002648:	c7520000 	.word	0xc7520000
 800264c:	50040000 	.word	0x50040000
 8002650:	20000000 	.word	0x20000000
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	cb840000 	.word	0xcb840000
 800265c:	80000001 	.word	0x80000001

08002660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002688:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800268c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0b      	blt.n	80026ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4907      	ldr	r1, [pc, #28]	@ (80026fc <__NVIC_EnableIRQ+0x38>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	@ (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	@ (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
         );
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	@ 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027cc:	d301      	bcc.n	80027d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d2:	4a0a      	ldr	r2, [pc, #40]	@ (80027fc <SysTick_Config+0x40>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027da:	210f      	movs	r1, #15
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f7ff ff8e 	bl	8002700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <SysTick_Config+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ea:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <SysTick_Config+0x40>)
 80027ec:	2207      	movs	r2, #7
 80027ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff29 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff3e 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff8e 	bl	8002754 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5d 	bl	8002700 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff31 	bl	80026c4 <__NVIC_EnableIRQ>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffa2 	bl	80027bc <SysTick_Config>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0ac      	b.n	80029f0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f8b2 	bl	8002a04 <DFSDM_GetChannelFromInstance>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4a55      	ldr	r2, [pc, #340]	@ (80029f8 <HAL_DFSDM_ChannelInit+0x174>)
 80028a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e09f      	b.n	80029f0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7fe fbb1 	bl	8001018 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80028b6:	4b51      	ldr	r3, [pc, #324]	@ (80029fc <HAL_DFSDM_ChannelInit+0x178>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	4a4f      	ldr	r2, [pc, #316]	@ (80029fc <HAL_DFSDM_ChannelInit+0x178>)
 80028be:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80028c0:	4b4e      	ldr	r3, [pc, #312]	@ (80029fc <HAL_DFSDM_ChannelInit+0x178>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d125      	bne.n	8002914 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80028c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80028ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028d2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80028d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4948      	ldr	r1, [pc, #288]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80028e2:	4b47      	ldr	r3, [pc, #284]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a46      	ldr	r2, [pc, #280]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80028e8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80028ec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	791b      	ldrb	r3, [r3, #4]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d108      	bne.n	8002908 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80028f6:	4b42      	ldr	r3, [pc, #264]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	3b01      	subs	r3, #1
 8002900:	041b      	lsls	r3, r3, #16
 8002902:	493f      	ldr	r1, [pc, #252]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002908:	4b3d      	ldr	r3, [pc, #244]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x17c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a00 <HAL_DFSDM_ChannelInit+0x17c>)
 800290e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002912:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002922:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002932:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002938:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 020f 	bic.w	r2, r2, #15
 8002950:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002978:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f002 0207 	and.w	r2, r2, #7
 80029a4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029d0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f810 	bl	8002a04 <DFSDM_GetChannelFromInstance>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4904      	ldr	r1, [pc, #16]	@ (80029f8 <HAL_DFSDM_ChannelInit+0x174>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200004e4 	.word	0x200004e4
 80029fc:	200004e0 	.word	0x200004e0
 8002a00:	40016000 	.word	0x40016000

08002a04 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a80 <DFSDM_GetChannelFromInstance+0x7c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d102      	bne.n	8002a1a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e02b      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	@ (8002a84 <DFSDM_GetChannelFromInstance+0x80>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d102      	bne.n	8002a28 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	e024      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a17      	ldr	r2, [pc, #92]	@ (8002a88 <DFSDM_GetChannelFromInstance+0x84>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d102      	bne.n	8002a36 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002a30:	2302      	movs	r3, #2
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e01d      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a14      	ldr	r2, [pc, #80]	@ (8002a8c <DFSDM_GetChannelFromInstance+0x88>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d102      	bne.n	8002a44 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e016      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <DFSDM_GetChannelFromInstance+0x8c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d102      	bne.n	8002a52 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002a4c:	2305      	movs	r3, #5
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e00f      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a0f      	ldr	r2, [pc, #60]	@ (8002a94 <DFSDM_GetChannelFromInstance+0x90>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d102      	bne.n	8002a60 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e008      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a0d      	ldr	r2, [pc, #52]	@ (8002a98 <DFSDM_GetChannelFromInstance+0x94>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d102      	bne.n	8002a6e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002a68:	2307      	movs	r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e001      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40016000 	.word	0x40016000
 8002a84:	40016020 	.word	0x40016020
 8002a88:	40016040 	.word	0x40016040
 8002a8c:	40016080 	.word	0x40016080
 8002a90:	400160a0 	.word	0x400160a0
 8002a94:	400160c0 	.word	0x400160c0
 8002a98:	400160e0 	.word	0x400160e0

08002a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aaa:	e166      	b.n	8002d7a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8158 	beq.w	8002d74 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d005      	beq.n	8002adc <HAL_GPIO_Init+0x40>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d130      	bne.n	8002b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b12:	2201      	movs	r2, #1
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 0201 	and.w	r2, r3, #1
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d017      	beq.n	8002b7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d123      	bne.n	8002bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	6939      	ldr	r1, [r7, #16]
 8002bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	2203      	movs	r2, #3
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0203 	and.w	r2, r3, #3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80b2 	beq.w	8002d74 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c10:	4b61      	ldr	r3, [pc, #388]	@ (8002d98 <HAL_GPIO_Init+0x2fc>)
 8002c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c14:	4a60      	ldr	r2, [pc, #384]	@ (8002d98 <HAL_GPIO_Init+0x2fc>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8002d98 <HAL_GPIO_Init+0x2fc>)
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c28:	4a5c      	ldr	r2, [pc, #368]	@ (8002d9c <HAL_GPIO_Init+0x300>)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	089b      	lsrs	r3, r3, #2
 8002c2e:	3302      	adds	r3, #2
 8002c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	220f      	movs	r2, #15
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c52:	d02b      	beq.n	8002cac <HAL_GPIO_Init+0x210>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a52      	ldr	r2, [pc, #328]	@ (8002da0 <HAL_GPIO_Init+0x304>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d025      	beq.n	8002ca8 <HAL_GPIO_Init+0x20c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a51      	ldr	r2, [pc, #324]	@ (8002da4 <HAL_GPIO_Init+0x308>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d01f      	beq.n	8002ca4 <HAL_GPIO_Init+0x208>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a50      	ldr	r2, [pc, #320]	@ (8002da8 <HAL_GPIO_Init+0x30c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d019      	beq.n	8002ca0 <HAL_GPIO_Init+0x204>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a4f      	ldr	r2, [pc, #316]	@ (8002dac <HAL_GPIO_Init+0x310>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_GPIO_Init+0x200>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a4e      	ldr	r2, [pc, #312]	@ (8002db0 <HAL_GPIO_Init+0x314>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00d      	beq.n	8002c98 <HAL_GPIO_Init+0x1fc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a4d      	ldr	r2, [pc, #308]	@ (8002db4 <HAL_GPIO_Init+0x318>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <HAL_GPIO_Init+0x1f8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a4c      	ldr	r2, [pc, #304]	@ (8002db8 <HAL_GPIO_Init+0x31c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_GPIO_Init+0x1f4>
 8002c8c:	2307      	movs	r3, #7
 8002c8e:	e00e      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002c90:	2308      	movs	r3, #8
 8002c92:	e00c      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002c94:	2306      	movs	r3, #6
 8002c96:	e00a      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002c98:	2305      	movs	r3, #5
 8002c9a:	e008      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	e006      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e004      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e002      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002cac:	2300      	movs	r3, #0
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	f002 0203 	and.w	r2, r2, #3
 8002cb4:	0092      	lsls	r2, r2, #2
 8002cb6:	4093      	lsls	r3, r2
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cbe:	4937      	ldr	r1, [pc, #220]	@ (8002d9c <HAL_GPIO_Init+0x300>)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dbc <HAL_GPIO_Init+0x320>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cf0:	4a32      	ldr	r2, [pc, #200]	@ (8002dbc <HAL_GPIO_Init+0x320>)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cf6:	4b31      	ldr	r3, [pc, #196]	@ (8002dbc <HAL_GPIO_Init+0x320>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d1a:	4a28      	ldr	r2, [pc, #160]	@ (8002dbc <HAL_GPIO_Init+0x320>)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d20:	4b26      	ldr	r3, [pc, #152]	@ (8002dbc <HAL_GPIO_Init+0x320>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d44:	4a1d      	ldr	r2, [pc, #116]	@ (8002dbc <HAL_GPIO_Init+0x320>)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dbc <HAL_GPIO_Init+0x320>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d6e:	4a13      	ldr	r2, [pc, #76]	@ (8002dbc <HAL_GPIO_Init+0x320>)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3301      	adds	r3, #1
 8002d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f47f ae91 	bne.w	8002aac <HAL_GPIO_Init+0x10>
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	bf00      	nop
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	48000400 	.word	0x48000400
 8002da4:	48000800 	.word	0x48000800
 8002da8:	48000c00 	.word	0x48000c00
 8002dac:	48001000 	.word	0x48001000
 8002db0:	48001400 	.word	0x48001400
 8002db4:	48001800 	.word	0x48001800
 8002db8:	48001c00 	.word	0x48001c00
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ddc:	e002      	b.n	8002de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	041a      	lsls	r2, r3, #16
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	43d9      	mvns	r1, r3
 8002e0e:	887b      	ldrh	r3, [r7, #2]
 8002e10:	400b      	ands	r3, r1
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	619a      	str	r2, [r3, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e2e:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e3a:	4a05      	ldr	r2, [pc, #20]	@ (8002e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f806 	bl	8002e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40010400 	.word	0x40010400

08002e54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e08d      	b.n	8002f98 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fe f925 	bl	80010e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2224      	movs	r2, #36	@ 0x24
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002eba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002eca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	e006      	b.n	8002ef2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ef0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d108      	bne.n	8002f0c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	e007      	b.n	8002f1c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f2e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69d9      	ldr	r1, [r3, #28]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1a      	ldr	r2, [r3, #32]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d138      	bne.n	8003028 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e032      	b.n	800302a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	@ 0x24
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ff2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003036:	b480      	push	{r7}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	d139      	bne.n	80030c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003056:	2302      	movs	r3, #2
 8003058:	e033      	b.n	80030c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2224      	movs	r2, #36	@ 0x24
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003088:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7fe fbae 	bl	800183c <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	e092      	b.n	8003214 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f040 808b 	bne.w	8003214 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe f890 	bl	8001224 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003104:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f88b 	bl	8003224 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	4b42      	ldr	r3, [pc, #264]	@ (8003220 <HAL_OSPI_Init+0x150>)
 8003116:	4013      	ands	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68d1      	ldr	r1, [r2, #12]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6912      	ldr	r2, [r2, #16]
 8003120:	3a01      	subs	r2, #1
 8003122:	0412      	lsls	r2, r2, #16
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6952      	ldr	r2, [r2, #20]
 800312a:	3a01      	subs	r2, #1
 800312c:	0212      	lsls	r2, r2, #8
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003134:	4311      	orrs	r1, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	69d2      	ldr	r2, [r2, #28]
 800313a:	4311      	orrs	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	430b      	orrs	r3, r1
 8003142:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0412      	lsls	r2, r2, #16
 800314e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	021a      	lsls	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2200      	movs	r2, #0
 8003174:	2120      	movs	r1, #32
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fb9c 	bl	80038b4 <OSPI_WaitFlagStateUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d146      	bne.n	8003214 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	1e5a      	subs	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80031bc:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d107      	bne.n	80031fc <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0202 	orr.w	r2, r2, #2
 80031fa:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003204:	d103      	bne.n	800320e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	645a      	str	r2, [r3, #68]	@ 0x44
 800320c:	e002      	b.n	8003214 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2202      	movs	r2, #2
 8003212:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	f8e0f8f4 	.word	0xf8e0f8f4

08003224 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b092      	sub	sp, #72	@ 0x48
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a08      	ldr	r2, [pc, #32]	@ (8003284 <HAL_OSPIM_Config+0x40>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d105      	bne.n	8003272 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8003270:	e004      	b.n	800327c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003272:	2301      	movs	r3, #1
 8003274:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800327c:	2300      	movs	r3, #0
 800327e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003282:	e01f      	b.n	80032c4 <HAL_OSPIM_Config+0x80>
 8003284:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003288:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800328c:	3301      	adds	r3, #1
 800328e:	b2d8      	uxtb	r0, r3
 8003290:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003294:	f107 0114 	add.w	r1, r7, #20
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	4619      	mov	r1, r3
 80032a4:	f000 fb3e 	bl	8003924 <OSPIM_GetConfig>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2208      	movs	r2, #8
 80032b8:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80032ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80032be:	3301      	adds	r3, #1
 80032c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80032c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d9dd      	bls.n	8003288 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80032cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f040 82e3 	bne.w	800389c <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80032d6:	4bc5      	ldr	r3, [pc, #788]	@ (80035ec <HAL_OSPIM_Config+0x3a8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80032e2:	4bc2      	ldr	r3, [pc, #776]	@ (80035ec <HAL_OSPIM_Config+0x3a8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4ac1      	ldr	r2, [pc, #772]	@ (80035ec <HAL_OSPIM_Config+0x3a8>)
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80032ee:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80032fa:	4bbd      	ldr	r3, [pc, #756]	@ (80035f0 <HAL_OSPIM_Config+0x3ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003306:	4bba      	ldr	r3, [pc, #744]	@ (80035f0 <HAL_OSPIM_Config+0x3ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4ab9      	ldr	r2, [pc, #740]	@ (80035f0 <HAL_OSPIM_Config+0x3ac>)
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003312:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003316:	f043 0302 	orr.w	r3, r3, #2
 800331a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800331e:	49b5      	ldr	r1, [pc, #724]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 8003320:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	3348      	adds	r3, #72	@ 0x48
 800332c:	443b      	add	r3, r7
 800332e:	3b2c      	subs	r3, #44	@ 0x2c
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3b01      	subs	r3, #1
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	48ae      	ldr	r0, [pc, #696]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 800333c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	3348      	adds	r3, #72	@ 0x48
 8003348:	443b      	add	r3, r7
 800334a:	3b2c      	subs	r3, #44	@ 0x2c
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3b01      	subs	r3, #1
 8003350:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4403      	add	r3, r0
 8003358:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800335a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	3348      	adds	r3, #72	@ 0x48
 8003366:	443b      	add	r3, r7
 8003368:	3b34      	subs	r3, #52	@ 0x34
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80a1 	beq.w	80034b4 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003372:	49a0      	ldr	r1, [pc, #640]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 8003374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	3348      	adds	r3, #72	@ 0x48
 8003380:	443b      	add	r3, r7
 8003382:	3b34      	subs	r3, #52	@ 0x34
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3b01      	subs	r3, #1
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	4899      	ldr	r0, [pc, #612]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 8003390:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	3348      	adds	r3, #72	@ 0x48
 800339c:	443b      	add	r3, r7
 800339e:	3b34      	subs	r3, #52	@ 0x34
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	f021 0201 	bic.w	r2, r1, #1
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4403      	add	r3, r0
 80033ac:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80033ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	3348      	adds	r3, #72	@ 0x48
 80033ba:	443b      	add	r3, r7
 80033bc:	3b30      	subs	r3, #48	@ 0x30
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01d      	beq.n	8003400 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80033c4:	498b      	ldr	r1, [pc, #556]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 80033c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	3348      	adds	r3, #72	@ 0x48
 80033d2:	443b      	add	r3, r7
 80033d4:	3b30      	subs	r3, #48	@ 0x30
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3b01      	subs	r3, #1
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	4884      	ldr	r0, [pc, #528]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 80033e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	3348      	adds	r3, #72	@ 0x48
 80033ee:	443b      	add	r3, r7
 80033f0:	3b30      	subs	r3, #48	@ 0x30
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	f021 0210 	bic.w	r2, r1, #16
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4403      	add	r3, r0
 80033fe:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	3348      	adds	r3, #72	@ 0x48
 800340c:	443b      	add	r3, r7
 800340e:	3b28      	subs	r3, #40	@ 0x28
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d021      	beq.n	800345a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003416:	4977      	ldr	r1, [pc, #476]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 8003418:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	3348      	adds	r3, #72	@ 0x48
 8003424:	443b      	add	r3, r7
 8003426:	3b28      	subs	r3, #40	@ 0x28
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3b01      	subs	r3, #1
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	486f      	ldr	r0, [pc, #444]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 8003438:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	3348      	adds	r3, #72	@ 0x48
 8003444:	443b      	add	r3, r7
 8003446:	3b28      	subs	r3, #40	@ 0x28
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3b01      	subs	r3, #1
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4403      	add	r3, r0
 8003458:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800345a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	3348      	adds	r3, #72	@ 0x48
 8003466:	443b      	add	r3, r7
 8003468:	3b24      	subs	r3, #36	@ 0x24
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d021      	beq.n	80034b4 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003470:	4960      	ldr	r1, [pc, #384]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 8003472:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	3348      	adds	r3, #72	@ 0x48
 800347e:	443b      	add	r3, r7
 8003480:	3b24      	subs	r3, #36	@ 0x24
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3b01      	subs	r3, #1
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	4858      	ldr	r0, [pc, #352]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 8003492:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3348      	adds	r3, #72	@ 0x48
 800349e:	443b      	add	r3, r7
 80034a0:	3b24      	subs	r3, #36	@ 0x24
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4403      	add	r3, r0
 80034b2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	3348      	adds	r3, #72	@ 0x48
 80034c6:	443b      	add	r3, r7
 80034c8:	3b34      	subs	r3, #52	@ 0x34
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4299      	cmp	r1, r3
 80034ce:	d03c      	beq.n	800354a <HAL_OSPIM_Config+0x306>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6899      	ldr	r1, [r3, #8]
 80034d4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	3348      	adds	r3, #72	@ 0x48
 80034e2:	443b      	add	r3, r7
 80034e4:	3b2c      	subs	r3, #44	@ 0x2c
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4299      	cmp	r1, r3
 80034ea:	d02e      	beq.n	800354a <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	3348      	adds	r3, #72	@ 0x48
 80034fe:	443b      	add	r3, r7
 8003500:	3b30      	subs	r3, #48	@ 0x30
 8003502:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8003504:	4299      	cmp	r1, r3
 8003506:	d103      	bne.n	8003510 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d11c      	bne.n	800354a <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	68d9      	ldr	r1, [r3, #12]
 8003514:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	3348      	adds	r3, #72	@ 0x48
 8003522:	443b      	add	r3, r7
 8003524:	3b28      	subs	r3, #40	@ 0x28
 8003526:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003528:	4299      	cmp	r1, r3
 800352a:	d00e      	beq.n	800354a <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	6919      	ldr	r1, [r3, #16]
 8003530:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	3348      	adds	r3, #72	@ 0x48
 800353e:	443b      	add	r3, r7
 8003540:	3b24      	subs	r3, #36	@ 0x24
 8003542:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003544:	4299      	cmp	r1, r3
 8003546:	f040 80d4 	bne.w	80036f2 <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800354a:	492a      	ldr	r1, [pc, #168]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 800354c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	3348      	adds	r3, #72	@ 0x48
 800355a:	443b      	add	r3, r7
 800355c:	3b34      	subs	r3, #52	@ 0x34
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	4822      	ldr	r0, [pc, #136]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 800356a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	3348      	adds	r3, #72	@ 0x48
 8003578:	443b      	add	r3, r7
 800357a:	3b34      	subs	r3, #52	@ 0x34
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3b01      	subs	r3, #1
 8003580:	f021 0201 	bic.w	r2, r1, #1
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4403      	add	r3, r0
 8003588:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800358a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	3348      	adds	r3, #72	@ 0x48
 8003598:	443b      	add	r3, r7
 800359a:	3b30      	subs	r3, #48	@ 0x30
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d01f      	beq.n	80035e2 <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80035a2:	4914      	ldr	r1, [pc, #80]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 80035a4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	3348      	adds	r3, #72	@ 0x48
 80035b2:	443b      	add	r3, r7
 80035b4:	3b30      	subs	r3, #48	@ 0x30
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	480c      	ldr	r0, [pc, #48]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 80035c2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	3348      	adds	r3, #72	@ 0x48
 80035d0:	443b      	add	r3, r7
 80035d2:	3b30      	subs	r3, #48	@ 0x30
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	f021 0210 	bic.w	r2, r1, #16
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4403      	add	r3, r0
 80035e0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80035e2:	4904      	ldr	r1, [pc, #16]	@ (80035f4 <HAL_OSPIM_Config+0x3b0>)
 80035e4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80035e8:	e006      	b.n	80035f8 <HAL_OSPIM_Config+0x3b4>
 80035ea:	bf00      	nop
 80035ec:	a0001000 	.word	0xa0001000
 80035f0:	a0001400 	.word	0xa0001400
 80035f4:	50061c00 	.word	0x50061c00
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	3348      	adds	r3, #72	@ 0x48
 8003602:	443b      	add	r3, r7
 8003604:	3b2c      	subs	r3, #44	@ 0x2c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3b01      	subs	r3, #1
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	48a5      	ldr	r0, [pc, #660]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 8003612:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	3348      	adds	r3, #72	@ 0x48
 8003620:	443b      	add	r3, r7
 8003622:	3b2c      	subs	r3, #44	@ 0x2c
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3b01      	subs	r3, #1
 8003628:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4403      	add	r3, r0
 8003630:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003632:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	3348      	adds	r3, #72	@ 0x48
 8003640:	443b      	add	r3, r7
 8003642:	3b28      	subs	r3, #40	@ 0x28
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d023      	beq.n	8003692 <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800364a:	4997      	ldr	r1, [pc, #604]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 800364c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	3348      	adds	r3, #72	@ 0x48
 800365a:	443b      	add	r3, r7
 800365c:	3b28      	subs	r3, #40	@ 0x28
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3b01      	subs	r3, #1
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	488e      	ldr	r0, [pc, #568]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 800366e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	3348      	adds	r3, #72	@ 0x48
 800367c:	443b      	add	r3, r7
 800367e:	3b28      	subs	r3, #40	@ 0x28
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3b01      	subs	r3, #1
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4403      	add	r3, r0
 8003690:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003692:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	3348      	adds	r3, #72	@ 0x48
 80036a0:	443b      	add	r3, r7
 80036a2:	3b24      	subs	r3, #36	@ 0x24
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d023      	beq.n	80036f2 <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80036aa:	497f      	ldr	r1, [pc, #508]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 80036ac:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	3348      	adds	r3, #72	@ 0x48
 80036ba:	443b      	add	r3, r7
 80036bc:	3b24      	subs	r3, #36	@ 0x24
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	4876      	ldr	r0, [pc, #472]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 80036ce:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	3348      	adds	r3, #72	@ 0x48
 80036dc:	443b      	add	r3, r7
 80036de:	3b24      	subs	r3, #36	@ 0x24
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4403      	add	r3, r0
 80036f0:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80036f2:	4a6d      	ldr	r2, [pc, #436]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003706:	025b      	lsls	r3, r3, #9
 8003708:	431a      	orrs	r2, r3
 800370a:	4967      	ldr	r1, [pc, #412]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	3b01      	subs	r3, #1
 8003712:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800371c:	4a62      	ldr	r2, [pc, #392]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f023 0203 	bic.w	r2, r3, #3
 800372e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	431a      	orrs	r2, r3
 8003734:	495c      	ldr	r1, [pc, #368]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3b01      	subs	r3, #1
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d014      	beq.n	8003778 <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800374e:	4a56      	ldr	r2, [pc, #344]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	3b01      	subs	r3, #1
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003762:	015b      	lsls	r3, r3, #5
 8003764:	431a      	orrs	r2, r3
 8003766:	4950      	ldr	r1, [pc, #320]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	3b01      	subs	r3, #1
 800376e:	f042 0210 	orr.w	r2, r2, #16
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d019      	beq.n	80037b8 <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003784:	4a48      	ldr	r2, [pc, #288]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	3b01      	subs	r3, #1
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800379a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800379c:	049b      	lsls	r3, r3, #18
 800379e:	431a      	orrs	r2, r3
 80037a0:	4941      	ldr	r1, [pc, #260]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	e01c      	b.n	80037f2 <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d018      	beq.n	80037f2 <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037c0:	4a39      	ldr	r2, [pc, #228]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80037d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d8:	069b      	lsls	r3, r3, #26
 80037da:	431a      	orrs	r2, r3
 80037dc:	4932      	ldr	r1, [pc, #200]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d019      	beq.n	8003832 <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037fe:	4a2a      	ldr	r2, [pc, #168]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	3b01      	subs	r3, #1
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003816:	049b      	lsls	r3, r3, #18
 8003818:	431a      	orrs	r2, r3
 800381a:	4923      	ldr	r1, [pc, #140]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	3b01      	subs	r3, #1
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	e01c      	b.n	800386c <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d018      	beq.n	800386c <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800383a:	4a1b      	ldr	r2, [pc, #108]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	3b01      	subs	r3, #1
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003852:	069b      	lsls	r3, r3, #26
 8003854:	431a      	orrs	r2, r3
 8003856:	4914      	ldr	r1, [pc, #80]	@ (80038a8 <HAL_OSPIM_Config+0x664>)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	3b01      	subs	r3, #1
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800386c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <HAL_OSPIM_Config+0x668>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0b      	ldr	r2, [pc, #44]	@ (80038ac <HAL_OSPIM_Config+0x668>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003884:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003890:	4b07      	ldr	r3, [pc, #28]	@ (80038b0 <HAL_OSPIM_Config+0x66c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a06      	ldr	r2, [pc, #24]	@ (80038b0 <HAL_OSPIM_Config+0x66c>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800389c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3748      	adds	r7, #72	@ 0x48
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	50061c00 	.word	0x50061c00
 80038ac:	a0001000 	.word	0xa0001000
 80038b0:	a0001400 	.word	0xa0001400

080038b4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80038c4:	e01a      	b.n	80038fc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d016      	beq.n	80038fc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fd ffb5 	bl	800183c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10b      	bne.n	80038fc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ea:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f0:	f043 0201 	orr.w	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e00e      	b.n	800391a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf14      	ite	ne
 800390a:	2301      	movne	r3, #1
 800390c:	2300      	moveq	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	429a      	cmp	r2, r3
 8003916:	d1d6      	bne.n	80038c6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <OSPIM_GetConfig+0x26>
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d802      	bhi.n	800394a <OSPIM_GetConfig+0x26>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
 800394e:	e08e      	b.n	8003a6e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2200      	movs	r2, #0
 8003966:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d101      	bne.n	8003978 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003974:	4b41      	ldr	r3, [pc, #260]	@ (8003a7c <OSPIM_GetConfig+0x158>)
 8003976:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e074      	b.n	8003a68 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800397e:	4a40      	ldr	r2, [pc, #256]	@ (8003a80 <OSPIM_GetConfig+0x15c>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4053      	eors	r3, r2
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4053      	eors	r3, r2
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4053      	eors	r3, r2
 80039da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d018      	beq.n	8003a26 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4053      	eors	r3, r2
 80039fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d111      	bne.n	8003a26 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	e005      	b.n	8003a26 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d018      	beq.n	8003a62 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4053      	eors	r3, r2
 8003a36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d111      	bne.n	8003a62 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	611a      	str	r2, [r3, #16]
 8003a54:	e005      	b.n	8003a62 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3301      	adds	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d987      	bls.n	800397e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	371c      	adds	r7, #28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	04040222 	.word	0x04040222
 8003a80:	50061c00 	.word	0x50061c00

08003a84 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a88:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a04      	ldr	r2, [pc, #16]	@ (8003aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40007000 	.word	0x40007000

08003aa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab4:	d102      	bne.n	8003abc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003aba:	e00b      	b.n	8003ad4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003abc:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aca:	d102      	bne.n	8003ad2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ad0:	e000      	b.n	8003ad4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003ad2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40007000 	.word	0x40007000

08003ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d141      	bne.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003af2:	4b4b      	ldr	r3, [pc, #300]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003afe:	d131      	bne.n	8003b64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b00:	4b47      	ldr	r3, [pc, #284]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b06:	4a46      	ldr	r2, [pc, #280]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b10:	4b43      	ldr	r3, [pc, #268]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b18:	4a41      	ldr	r2, [pc, #260]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b20:	4b40      	ldr	r3, [pc, #256]	@ (8003c24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2232      	movs	r2, #50	@ 0x32
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	0c9b      	lsrs	r3, r3, #18
 8003b32:	3301      	adds	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b36:	e002      	b.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b3e:	4b38      	ldr	r3, [pc, #224]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4a:	d102      	bne.n	8003b52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f2      	bne.n	8003b38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b52:	4b33      	ldr	r3, [pc, #204]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5e:	d158      	bne.n	8003c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e057      	b.n	8003c14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b64:	4b2e      	ldr	r3, [pc, #184]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b74:	e04d      	b.n	8003c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7c:	d141      	bne.n	8003c02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b7e:	4b28      	ldr	r3, [pc, #160]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8a:	d131      	bne.n	8003bf0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b8c:	4b24      	ldr	r3, [pc, #144]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b92:	4a23      	ldr	r2, [pc, #140]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b9c:	4b20      	ldr	r3, [pc, #128]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003baa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003bac:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2232      	movs	r2, #50	@ 0x32
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	0c9b      	lsrs	r3, r3, #18
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bc2:	e002      	b.n	8003bca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bca:	4b15      	ldr	r3, [pc, #84]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd6:	d102      	bne.n	8003bde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f2      	bne.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bde:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bea:	d112      	bne.n	8003c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e011      	b.n	8003c14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c00:	e007      	b.n	8003c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c02:	4b07      	ldr	r3, [pc, #28]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c0a:	4a05      	ldr	r2, [pc, #20]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c10:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40007000 	.word	0x40007000
 8003c24:	20000000 	.word	0x20000000
 8003c28:	431bde83 	.word	0x431bde83

08003c2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f000 bc08 	b.w	8004450 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c40:	4b96      	ldr	r3, [pc, #600]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c4a:	4b94      	ldr	r3, [pc, #592]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80e4 	beq.w	8003e2a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <HAL_RCC_OscConfig+0x4c>
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	f040 808b 	bne.w	8003d86 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	f040 8087 	bne.w	8003d86 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c78:	4b88      	ldr	r3, [pc, #544]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_OscConfig+0x64>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e3df      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	4b81      	ldr	r3, [pc, #516]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d004      	beq.n	8003caa <HAL_RCC_OscConfig+0x7e>
 8003ca0:	4b7e      	ldr	r3, [pc, #504]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ca8:	e005      	b.n	8003cb6 <HAL_RCC_OscConfig+0x8a>
 8003caa:	4b7c      	ldr	r3, [pc, #496]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d223      	bcs.n	8003d02 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fdcc 	bl	800485c <RCC_SetFlashLatencyFromMSIRange>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e3c0      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cce:	4b73      	ldr	r3, [pc, #460]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a72      	ldr	r2, [pc, #456]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003cd4:	f043 0308 	orr.w	r3, r3, #8
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b70      	ldr	r3, [pc, #448]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	496d      	ldr	r1, [pc, #436]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cec:	4b6b      	ldr	r3, [pc, #428]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	4968      	ldr	r1, [pc, #416]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]
 8003d00:	e025      	b.n	8003d4e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d02:	4b66      	ldr	r3, [pc, #408]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a65      	ldr	r2, [pc, #404]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003d08:	f043 0308 	orr.w	r3, r3, #8
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b63      	ldr	r3, [pc, #396]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	4960      	ldr	r1, [pc, #384]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d20:	4b5e      	ldr	r3, [pc, #376]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	495b      	ldr	r1, [pc, #364]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fd8c 	bl	800485c <RCC_SetFlashLatencyFromMSIRange>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e380      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d4e:	f000 fcc1 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b51      	ldr	r3, [pc, #324]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	4950      	ldr	r1, [pc, #320]	@ (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003d60:	5ccb      	ldrb	r3, [r1, r3]
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	4a4e      	ldr	r2, [pc, #312]	@ (8003ea4 <HAL_RCC_OscConfig+0x278>)
 8003d6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d6e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ea8 <HAL_RCC_OscConfig+0x27c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd fd12 	bl	800179c <HAL_InitTick>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d052      	beq.n	8003e28 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	e364      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d032      	beq.n	8003df4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d8e:	4b43      	ldr	r3, [pc, #268]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a42      	ldr	r2, [pc, #264]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d9a:	f7fd fd4f 	bl	800183c <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003da2:	f7fd fd4b 	bl	800183c <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e34d      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003db4:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc0:	4b36      	ldr	r3, [pc, #216]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a35      	ldr	r2, [pc, #212]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003dc6:	f043 0308 	orr.w	r3, r3, #8
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b33      	ldr	r3, [pc, #204]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4930      	ldr	r1, [pc, #192]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dde:	4b2f      	ldr	r3, [pc, #188]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	492b      	ldr	r1, [pc, #172]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]
 8003df2:	e01a      	b.n	8003e2a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003df4:	4b29      	ldr	r3, [pc, #164]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a28      	ldr	r2, [pc, #160]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e00:	f7fd fd1c 	bl	800183c <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e08:	f7fd fd18 	bl	800183c <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e31a      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e1a:	4b20      	ldr	r3, [pc, #128]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x1dc>
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d073      	beq.n	8003f1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_OscConfig+0x21c>
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	d10e      	bne.n	8003e60 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d10b      	bne.n	8003e60 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	4b14      	ldr	r3, [pc, #80]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d063      	beq.n	8003f1c <HAL_RCC_OscConfig+0x2f0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d15f      	bne.n	8003f1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e2f7      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e68:	d106      	bne.n	8003e78 <HAL_RCC_OscConfig+0x24c>
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e025      	b.n	8003ec4 <HAL_RCC_OscConfig+0x298>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e80:	d114      	bne.n	8003eac <HAL_RCC_OscConfig+0x280>
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a05      	ldr	r2, [pc, #20]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b03      	ldr	r3, [pc, #12]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a02      	ldr	r2, [pc, #8]	@ (8003e9c <HAL_RCC_OscConfig+0x270>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e013      	b.n	8003ec4 <HAL_RCC_OscConfig+0x298>
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	080062c0 	.word	0x080062c0
 8003ea4:	20000000 	.word	0x20000000
 8003ea8:	20000004 	.word	0x20000004
 8003eac:	4ba0      	ldr	r3, [pc, #640]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a9f      	ldr	r2, [pc, #636]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4b9d      	ldr	r3, [pc, #628]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a9c      	ldr	r2, [pc, #624]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d013      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fd fcb6 	bl	800183c <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fd fcb2 	bl	800183c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	@ 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e2b4      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee6:	4b92      	ldr	r3, [pc, #584]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x2a8>
 8003ef2:	e014      	b.n	8003f1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fca2 	bl	800183c <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003efc:	f7fd fc9e 	bl	800183c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	@ 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e2a0      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f0e:	4b88      	ldr	r3, [pc, #544]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x2d0>
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d060      	beq.n	8003fec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_OscConfig+0x310>
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d119      	bne.n	8003f6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d116      	bne.n	8003f6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f3c:	4b7c      	ldr	r3, [pc, #496]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_OscConfig+0x328>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e27d      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b76      	ldr	r3, [pc, #472]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	4973      	ldr	r1, [pc, #460]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f68:	e040      	b.n	8003fec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d023      	beq.n	8003fba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f72:	4b6f      	ldr	r3, [pc, #444]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a6e      	ldr	r2, [pc, #440]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fd fc5d 	bl	800183c <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f86:	f7fd fc59 	bl	800183c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e25b      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f98:	4b65      	ldr	r3, [pc, #404]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b62      	ldr	r3, [pc, #392]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	495f      	ldr	r1, [pc, #380]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
 8003fb8:	e018      	b.n	8003fec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fba:	4b5d      	ldr	r3, [pc, #372]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a5c      	ldr	r2, [pc, #368]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fd fc39 	bl	800183c <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fd fc35 	bl	800183c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e237      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fe0:	4b53      	ldr	r3, [pc, #332]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d03c      	beq.n	8004072 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01c      	beq.n	800403a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004000:	4b4b      	ldr	r3, [pc, #300]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8004002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004006:	4a4a      	ldr	r2, [pc, #296]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004010:	f7fd fc14 	bl	800183c <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004018:	f7fd fc10 	bl	800183c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e212      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800402a:	4b41      	ldr	r3, [pc, #260]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 800402c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ef      	beq.n	8004018 <HAL_RCC_OscConfig+0x3ec>
 8004038:	e01b      	b.n	8004072 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403a:	4b3d      	ldr	r3, [pc, #244]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 800403c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004040:	4a3b      	ldr	r2, [pc, #236]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404a:	f7fd fbf7 	bl	800183c <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004052:	f7fd fbf3 	bl	800183c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e1f5      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004064:	4b32      	ldr	r3, [pc, #200]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8004066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1ef      	bne.n	8004052 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80a6 	beq.w	80041cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004080:	2300      	movs	r3, #0
 8004082:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004084:	4b2a      	ldr	r3, [pc, #168]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8004086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10d      	bne.n	80040ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004090:	4b27      	ldr	r3, [pc, #156]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004094:	4a26      	ldr	r2, [pc, #152]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8004096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800409a:	6593      	str	r3, [r2, #88]	@ 0x58
 800409c:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 800409e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a8:	2301      	movs	r3, #1
 80040aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ac:	4b21      	ldr	r3, [pc, #132]	@ (8004134 <HAL_RCC_OscConfig+0x508>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d118      	bne.n	80040ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004134 <HAL_RCC_OscConfig+0x508>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004134 <HAL_RCC_OscConfig+0x508>)
 80040be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c4:	f7fd fbba 	bl	800183c <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040cc:	f7fd fbb6 	bl	800183c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e1b8      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040de:	4b15      	ldr	r3, [pc, #84]	@ (8004134 <HAL_RCC_OscConfig+0x508>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d108      	bne.n	8004104 <HAL_RCC_OscConfig+0x4d8>
 80040f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004102:	e029      	b.n	8004158 <HAL_RCC_OscConfig+0x52c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b05      	cmp	r3, #5
 800410a:	d115      	bne.n	8004138 <HAL_RCC_OscConfig+0x50c>
 800410c:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004112:	4a07      	ldr	r2, [pc, #28]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8004114:	f043 0304 	orr.w	r3, r3, #4
 8004118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800411c:	4b04      	ldr	r3, [pc, #16]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004122:	4a03      	ldr	r2, [pc, #12]	@ (8004130 <HAL_RCC_OscConfig+0x504>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800412c:	e014      	b.n	8004158 <HAL_RCC_OscConfig+0x52c>
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
 8004138:	4b9d      	ldr	r3, [pc, #628]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413e:	4a9c      	ldr	r2, [pc, #624]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004148:	4b99      	ldr	r3, [pc, #612]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414e:	4a98      	ldr	r2, [pc, #608]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 8004150:	f023 0304 	bic.w	r3, r3, #4
 8004154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d016      	beq.n	800418e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fd fb6c 	bl	800183c <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004166:	e00a      	b.n	800417e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004168:	f7fd fb68 	bl	800183c <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e168      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800417e:	4b8c      	ldr	r3, [pc, #560]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0ed      	beq.n	8004168 <HAL_RCC_OscConfig+0x53c>
 800418c:	e015      	b.n	80041ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fd fb55 	bl	800183c <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004194:	e00a      	b.n	80041ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7fd fb51 	bl	800183c <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e151      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041ac:	4b80      	ldr	r3, [pc, #512]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1ed      	bne.n	8004196 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ba:	7ffb      	ldrb	r3, [r7, #31]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d105      	bne.n	80041cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c0:	4b7b      	ldr	r3, [pc, #492]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	4a7a      	ldr	r2, [pc, #488]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 80041c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d03c      	beq.n	8004252 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01c      	beq.n	800421a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041e0:	4b73      	ldr	r3, [pc, #460]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 80041e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041e6:	4a72      	ldr	r2, [pc, #456]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fd fb24 	bl	800183c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041f8:	f7fd fb20 	bl	800183c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e122      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800420a:	4b69      	ldr	r3, [pc, #420]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 800420c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ef      	beq.n	80041f8 <HAL_RCC_OscConfig+0x5cc>
 8004218:	e01b      	b.n	8004252 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800421a:	4b65      	ldr	r3, [pc, #404]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 800421c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004220:	4a63      	ldr	r2, [pc, #396]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 8004222:	f023 0301 	bic.w	r3, r3, #1
 8004226:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422a:	f7fd fb07 	bl	800183c <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004232:	f7fd fb03 	bl	800183c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e105      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004244:	4b5a      	ldr	r3, [pc, #360]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 8004246:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1ef      	bne.n	8004232 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80f9 	beq.w	800444e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004260:	2b02      	cmp	r3, #2
 8004262:	f040 80cf 	bne.w	8004404 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004266:	4b52      	ldr	r3, [pc, #328]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f003 0203 	and.w	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	429a      	cmp	r2, r3
 8004278:	d12c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004284:	3b01      	subs	r3, #1
 8004286:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d123      	bne.n	80042d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004296:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d11b      	bne.n	80042d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d113      	bne.n	80042d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	3b01      	subs	r3, #1
 80042ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d109      	bne.n	80042d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	3b01      	subs	r3, #1
 80042ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d071      	beq.n	80043b8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b0c      	cmp	r3, #12
 80042d8:	d068      	beq.n	80043ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042da:	4b35      	ldr	r3, [pc, #212]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042e6:	4b32      	ldr	r3, [pc, #200]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e0ac      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042f6:	4b2e      	ldr	r3, [pc, #184]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2d      	ldr	r2, [pc, #180]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 80042fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004300:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004302:	f7fd fa9b 	bl	800183c <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430a:	f7fd fa97 	bl	800183c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e099      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431c:	4b24      	ldr	r3, [pc, #144]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004328:	4b21      	ldr	r3, [pc, #132]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	4b21      	ldr	r3, [pc, #132]	@ (80043b4 <HAL_RCC_OscConfig+0x788>)
 800432e:	4013      	ands	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004338:	3a01      	subs	r2, #1
 800433a:	0112      	lsls	r2, r2, #4
 800433c:	4311      	orrs	r1, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004342:	0212      	lsls	r2, r2, #8
 8004344:	4311      	orrs	r1, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800434a:	0852      	lsrs	r2, r2, #1
 800434c:	3a01      	subs	r2, #1
 800434e:	0552      	lsls	r2, r2, #21
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004356:	0852      	lsrs	r2, r2, #1
 8004358:	3a01      	subs	r2, #1
 800435a:	0652      	lsls	r2, r2, #25
 800435c:	4311      	orrs	r1, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004362:	06d2      	lsls	r2, r2, #27
 8004364:	430a      	orrs	r2, r1
 8004366:	4912      	ldr	r1, [pc, #72]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 8004368:	4313      	orrs	r3, r2
 800436a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800436c:	4b10      	ldr	r3, [pc, #64]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0f      	ldr	r2, [pc, #60]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 8004372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004376:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004378:	4b0d      	ldr	r3, [pc, #52]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a0c      	ldr	r2, [pc, #48]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 800437e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004382:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004384:	f7fd fa5a 	bl	800183c <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438c:	f7fd fa56 	bl	800183c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e058      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <HAL_RCC_OscConfig+0x784>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043aa:	e050      	b.n	800444e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e04f      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
 80043b0:	40021000 	.word	0x40021000
 80043b4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b8:	4b27      	ldr	r3, [pc, #156]	@ (8004458 <HAL_RCC_OscConfig+0x82c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d144      	bne.n	800444e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043c4:	4b24      	ldr	r3, [pc, #144]	@ (8004458 <HAL_RCC_OscConfig+0x82c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a23      	ldr	r2, [pc, #140]	@ (8004458 <HAL_RCC_OscConfig+0x82c>)
 80043ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043d0:	4b21      	ldr	r3, [pc, #132]	@ (8004458 <HAL_RCC_OscConfig+0x82c>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a20      	ldr	r2, [pc, #128]	@ (8004458 <HAL_RCC_OscConfig+0x82c>)
 80043d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043dc:	f7fd fa2e 	bl	800183c <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fd fa2a 	bl	800183c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e02c      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f6:	4b18      	ldr	r3, [pc, #96]	@ (8004458 <HAL_RCC_OscConfig+0x82c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x7b8>
 8004402:	e024      	b.n	800444e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b0c      	cmp	r3, #12
 8004408:	d01f      	beq.n	800444a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440a:	4b13      	ldr	r3, [pc, #76]	@ (8004458 <HAL_RCC_OscConfig+0x82c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a12      	ldr	r2, [pc, #72]	@ (8004458 <HAL_RCC_OscConfig+0x82c>)
 8004410:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fd fa11 	bl	800183c <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441e:	f7fd fa0d 	bl	800183c <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e00f      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004430:	4b09      	ldr	r3, [pc, #36]	@ (8004458 <HAL_RCC_OscConfig+0x82c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800443c:	4b06      	ldr	r3, [pc, #24]	@ (8004458 <HAL_RCC_OscConfig+0x82c>)
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	4905      	ldr	r1, [pc, #20]	@ (8004458 <HAL_RCC_OscConfig+0x82c>)
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <HAL_RCC_OscConfig+0x830>)
 8004444:	4013      	ands	r3, r2
 8004446:	60cb      	str	r3, [r1, #12]
 8004448:	e001      	b.n	800444e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000
 800445c:	feeefffc 	.word	0xfeeefffc

08004460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e11d      	b.n	80046b4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004478:	4b90      	ldr	r3, [pc, #576]	@ (80046bc <HAL_RCC_ClockConfig+0x25c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d910      	bls.n	80044a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004486:	4b8d      	ldr	r3, [pc, #564]	@ (80046bc <HAL_RCC_ClockConfig+0x25c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 020f 	bic.w	r2, r3, #15
 800448e:	498b      	ldr	r1, [pc, #556]	@ (80046bc <HAL_RCC_ClockConfig+0x25c>)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	4b89      	ldr	r3, [pc, #548]	@ (80046bc <HAL_RCC_ClockConfig+0x25c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e105      	b.n	80046b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d010      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	4b81      	ldr	r3, [pc, #516]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d908      	bls.n	80044d6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c4:	4b7e      	ldr	r3, [pc, #504]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	497b      	ldr	r1, [pc, #492]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d079      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d11e      	bne.n	8004528 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ea:	4b75      	ldr	r3, [pc, #468]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e0dc      	b.n	80046b4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80044fa:	f000 fa09 	bl	8004910 <RCC_GetSysClockFreqFromPLLSource>
 80044fe:	4603      	mov	r3, r0
 8004500:	4a70      	ldr	r2, [pc, #448]	@ (80046c4 <HAL_RCC_ClockConfig+0x264>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d946      	bls.n	8004594 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004506:	4b6e      	ldr	r3, [pc, #440]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d140      	bne.n	8004594 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004512:	4b6b      	ldr	r3, [pc, #428]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800451a:	4a69      	ldr	r2, [pc, #420]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 800451c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004520:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004522:	2380      	movs	r3, #128	@ 0x80
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e035      	b.n	8004594 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d107      	bne.n	8004540 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004530:	4b63      	ldr	r3, [pc, #396]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d115      	bne.n	8004568 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0b9      	b.n	80046b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d107      	bne.n	8004558 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004548:	4b5d      	ldr	r3, [pc, #372]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0ad      	b.n	80046b4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004558:	4b59      	ldr	r3, [pc, #356]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0a5      	b.n	80046b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004568:	f000 f8b4 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 800456c:	4603      	mov	r3, r0
 800456e:	4a55      	ldr	r2, [pc, #340]	@ (80046c4 <HAL_RCC_ClockConfig+0x264>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d90f      	bls.n	8004594 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004574:	4b52      	ldr	r3, [pc, #328]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004580:	4b4f      	ldr	r3, [pc, #316]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004588:	4a4d      	ldr	r2, [pc, #308]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 800458a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800458e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004590:	2380      	movs	r3, #128	@ 0x80
 8004592:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004594:	4b4a      	ldr	r3, [pc, #296]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f023 0203 	bic.w	r2, r3, #3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4947      	ldr	r1, [pc, #284]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a6:	f7fd f949 	bl	800183c <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ac:	e00a      	b.n	80045c4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ae:	f7fd f945 	bl	800183c <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e077      	b.n	80046b4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c4:	4b3e      	ldr	r3, [pc, #248]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 020c 	and.w	r2, r3, #12
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d1eb      	bne.n	80045ae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b80      	cmp	r3, #128	@ 0x80
 80045da:	d105      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045dc:	4b38      	ldr	r3, [pc, #224]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a37      	ldr	r2, [pc, #220]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 80045e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045e6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d010      	beq.n	8004616 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	4b31      	ldr	r3, [pc, #196]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004600:	429a      	cmp	r2, r3
 8004602:	d208      	bcs.n	8004616 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004604:	4b2e      	ldr	r3, [pc, #184]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	492b      	ldr	r1, [pc, #172]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004612:	4313      	orrs	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004616:	4b29      	ldr	r3, [pc, #164]	@ (80046bc <HAL_RCC_ClockConfig+0x25c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d210      	bcs.n	8004646 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004624:	4b25      	ldr	r3, [pc, #148]	@ (80046bc <HAL_RCC_ClockConfig+0x25c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f023 020f 	bic.w	r2, r3, #15
 800462c:	4923      	ldr	r1, [pc, #140]	@ (80046bc <HAL_RCC_ClockConfig+0x25c>)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	4313      	orrs	r3, r2
 8004632:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004634:	4b21      	ldr	r3, [pc, #132]	@ (80046bc <HAL_RCC_ClockConfig+0x25c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d001      	beq.n	8004646 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e036      	b.n	80046b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004652:	4b1b      	ldr	r3, [pc, #108]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	4918      	ldr	r1, [pc, #96]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004660:	4313      	orrs	r3, r2
 8004662:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004670:	4b13      	ldr	r3, [pc, #76]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4910      	ldr	r1, [pc, #64]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 8004680:	4313      	orrs	r3, r2
 8004682:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004684:	f000 f826 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b0d      	ldr	r3, [pc, #52]	@ (80046c0 <HAL_RCC_ClockConfig+0x260>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	490c      	ldr	r1, [pc, #48]	@ (80046c8 <HAL_RCC_ClockConfig+0x268>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
 80046a0:	4a0a      	ldr	r2, [pc, #40]	@ (80046cc <HAL_RCC_ClockConfig+0x26c>)
 80046a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046a4:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <HAL_RCC_ClockConfig+0x270>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fd f877 	bl	800179c <HAL_InitTick>
 80046ae:	4603      	mov	r3, r0
 80046b0:	73fb      	strb	r3, [r7, #15]

  return status;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40022000 	.word	0x40022000
 80046c0:	40021000 	.word	0x40021000
 80046c4:	04c4b400 	.word	0x04c4b400
 80046c8:	080062c0 	.word	0x080062c0
 80046cc:	20000000 	.word	0x20000000
 80046d0:	20000004 	.word	0x20000004

080046d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b089      	sub	sp, #36	@ 0x24
 80046d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e2:	4b3e      	ldr	r3, [pc, #248]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ec:	4b3b      	ldr	r3, [pc, #236]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x34>
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d121      	bne.n	8004746 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d11e      	bne.n	8004746 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004708:	4b34      	ldr	r3, [pc, #208]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d107      	bne.n	8004724 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004714:	4b31      	ldr	r3, [pc, #196]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	e005      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004724:	4b2d      	ldr	r3, [pc, #180]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	091b      	lsrs	r3, r3, #4
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004730:	4a2b      	ldr	r2, [pc, #172]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004738:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10d      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004744:	e00a      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d102      	bne.n	8004752 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800474c:	4b25      	ldr	r3, [pc, #148]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	e004      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d101      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004758:	4b23      	ldr	r3, [pc, #140]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800475a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d134      	bne.n	80047cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004762:	4b1e      	ldr	r3, [pc, #120]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d003      	beq.n	800477a <HAL_RCC_GetSysClockFreq+0xa6>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b03      	cmp	r3, #3
 8004776:	d003      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0xac>
 8004778:	e005      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800477a:	4b1a      	ldr	r3, [pc, #104]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800477c:	617b      	str	r3, [r7, #20]
      break;
 800477e:	e005      	b.n	800478c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004780:	4b19      	ldr	r3, [pc, #100]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004782:	617b      	str	r3, [r7, #20]
      break;
 8004784:	e002      	b.n	800478c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	617b      	str	r3, [r7, #20]
      break;
 800478a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800478c:	4b13      	ldr	r3, [pc, #76]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	3301      	adds	r3, #1
 8004798:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800479a:	4b10      	ldr	r3, [pc, #64]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	fb03 f202 	mul.w	r2, r3, r2
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047b2:	4b0a      	ldr	r3, [pc, #40]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	0e5b      	lsrs	r3, r3, #25
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	3301      	adds	r3, #1
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047cc:	69bb      	ldr	r3, [r7, #24]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3724      	adds	r7, #36	@ 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000
 80047e0:	080062d8 	.word	0x080062d8
 80047e4:	00f42400 	.word	0x00f42400
 80047e8:	007a1200 	.word	0x007a1200

080047ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f0:	4b03      	ldr	r3, [pc, #12]	@ (8004800 <HAL_RCC_GetHCLKFreq+0x14>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000000 	.word	0x20000000

08004804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004808:	f7ff fff0 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 800480c:	4602      	mov	r2, r0
 800480e:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	4904      	ldr	r1, [pc, #16]	@ (800482c <HAL_RCC_GetPCLK1Freq+0x28>)
 800481a:	5ccb      	ldrb	r3, [r1, r3]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000
 800482c:	080062d0 	.word	0x080062d0

08004830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004834:	f7ff ffda 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	0adb      	lsrs	r3, r3, #11
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4904      	ldr	r1, [pc, #16]	@ (8004858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000
 8004858:	080062d0 	.word	0x080062d0

0800485c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004864:	2300      	movs	r3, #0
 8004866:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004868:	4b27      	ldr	r3, [pc, #156]	@ (8004908 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004874:	f7ff f916 	bl	8003aa4 <HAL_PWREx_GetVoltageRange>
 8004878:	6178      	str	r0, [r7, #20]
 800487a:	e014      	b.n	80048a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800487c:	4b22      	ldr	r3, [pc, #136]	@ (8004908 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800487e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004880:	4a21      	ldr	r2, [pc, #132]	@ (8004908 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004886:	6593      	str	r3, [r2, #88]	@ 0x58
 8004888:	4b1f      	ldr	r3, [pc, #124]	@ (8004908 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800488a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004894:	f7ff f906 	bl	8003aa4 <HAL_PWREx_GetVoltageRange>
 8004898:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800489a:	4b1b      	ldr	r3, [pc, #108]	@ (8004908 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489e:	4a1a      	ldr	r2, [pc, #104]	@ (8004908 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ac:	d10b      	bne.n	80048c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b80      	cmp	r3, #128	@ 0x80
 80048b2:	d913      	bls.n	80048dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80048b8:	d902      	bls.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048ba:	2302      	movs	r3, #2
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	e00d      	b.n	80048dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048c0:	2301      	movs	r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	e00a      	b.n	80048dc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80048ca:	d902      	bls.n	80048d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80048cc:	2302      	movs	r3, #2
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	e004      	b.n	80048dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b70      	cmp	r3, #112	@ 0x70
 80048d6:	d101      	bne.n	80048dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048d8:	2301      	movs	r3, #1
 80048da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048dc:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f023 020f 	bic.w	r2, r3, #15
 80048e4:	4909      	ldr	r1, [pc, #36]	@ (800490c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048ec:	4b07      	ldr	r3, [pc, #28]	@ (800490c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000
 800490c:	40022000 	.word	0x40022000

08004910 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004916:	4b2d      	ldr	r3, [pc, #180]	@ (80049cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b03      	cmp	r3, #3
 8004924:	d00b      	beq.n	800493e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d825      	bhi.n	8004978 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d008      	beq.n	8004944 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d11f      	bne.n	8004978 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004938:	4b25      	ldr	r3, [pc, #148]	@ (80049d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800493a:	613b      	str	r3, [r7, #16]
    break;
 800493c:	e01f      	b.n	800497e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800493e:	4b25      	ldr	r3, [pc, #148]	@ (80049d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004940:	613b      	str	r3, [r7, #16]
    break;
 8004942:	e01c      	b.n	800497e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004944:	4b21      	ldr	r3, [pc, #132]	@ (80049cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d107      	bne.n	8004960 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004950:	4b1e      	ldr	r3, [pc, #120]	@ (80049cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	e005      	b.n	800496c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004960:	4b1a      	ldr	r3, [pc, #104]	@ (80049cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800496c:	4a1a      	ldr	r2, [pc, #104]	@ (80049d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004974:	613b      	str	r3, [r7, #16]
    break;
 8004976:	e002      	b.n	800497e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	613b      	str	r3, [r7, #16]
    break;
 800497c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800497e:	4b13      	ldr	r3, [pc, #76]	@ (80049cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	091b      	lsrs	r3, r3, #4
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	3301      	adds	r3, #1
 800498a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800498c:	4b0f      	ldr	r3, [pc, #60]	@ (80049cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	0a1b      	lsrs	r3, r3, #8
 8004992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	fb03 f202 	mul.w	r2, r3, r2
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049a4:	4b09      	ldr	r3, [pc, #36]	@ (80049cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0e5b      	lsrs	r3, r3, #25
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	3301      	adds	r3, #1
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80049be:	683b      	ldr	r3, [r7, #0]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40021000 	.word	0x40021000
 80049d0:	00f42400 	.word	0x00f42400
 80049d4:	007a1200 	.word	0x007a1200
 80049d8:	080062d8 	.word	0x080062d8

080049dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049e4:	2300      	movs	r3, #0
 80049e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049e8:	2300      	movs	r3, #0
 80049ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d040      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049fc:	2b80      	cmp	r3, #128	@ 0x80
 80049fe:	d02a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a00:	2b80      	cmp	r3, #128	@ 0x80
 8004a02:	d825      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a04:	2b60      	cmp	r3, #96	@ 0x60
 8004a06:	d026      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a08:	2b60      	cmp	r3, #96	@ 0x60
 8004a0a:	d821      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a0c:	2b40      	cmp	r3, #64	@ 0x40
 8004a0e:	d006      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004a10:	2b40      	cmp	r3, #64	@ 0x40
 8004a12:	d81d      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d009      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d010      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004a1c:	e018      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a1e:	4b89      	ldr	r3, [pc, #548]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	4a88      	ldr	r2, [pc, #544]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a28:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a2a:	e015      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fb12 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a3c:	e00c      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3320      	adds	r3, #32
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fbfd 	bl	8005244 <RCCEx_PLLSAI2_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a4e:	e003      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	74fb      	strb	r3, [r7, #19]
      break;
 8004a54:	e000      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a58:	7cfb      	ldrb	r3, [r7, #19]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10b      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a5e:	4b79      	ldr	r3, [pc, #484]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a64:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a6c:	4975      	ldr	r1, [pc, #468]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004a74:	e001      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a76:	7cfb      	ldrb	r3, [r7, #19]
 8004a78:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d047      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8e:	d030      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a94:	d82a      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a9a:	d02a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aa0:	d824      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004aa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aa6:	d008      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aac:	d81e      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab6:	d010      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ab8:	e018      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aba:	4b62      	ldr	r3, [pc, #392]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	4a61      	ldr	r2, [pc, #388]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ac6:	e015      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fac4 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ad8:	e00c      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3320      	adds	r3, #32
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fbaf 	bl	8005244 <RCCEx_PLLSAI2_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aea:	e003      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	74fb      	strb	r3, [r7, #19]
      break;
 8004af0:	e000      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004afa:	4b52      	ldr	r3, [pc, #328]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b08:	494e      	ldr	r1, [pc, #312]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004b10:	e001      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b12:	7cfb      	ldrb	r3, [r7, #19]
 8004b14:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 809f 	beq.w	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b24:	2300      	movs	r3, #0
 8004b26:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b28:	4b46      	ldr	r3, [pc, #280]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00d      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3e:	4b41      	ldr	r3, [pc, #260]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b42:	4a40      	ldr	r2, [pc, #256]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b56:	2301      	movs	r3, #1
 8004b58:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a3a      	ldr	r2, [pc, #232]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b66:	f7fc fe69 	bl	800183c <HAL_GetTick>
 8004b6a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b6c:	e009      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6e:	f7fc fe65 	bl	800183c <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d902      	bls.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	74fb      	strb	r3, [r7, #19]
        break;
 8004b80:	e005      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b82:	4b31      	ldr	r3, [pc, #196]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0ef      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b8e:	7cfb      	ldrb	r3, [r7, #19]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d15b      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b94:	4b2b      	ldr	r3, [pc, #172]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b9e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d01f      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d019      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bb2:	4b24      	ldr	r3, [pc, #144]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bbe:	4b21      	ldr	r3, [pc, #132]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bce:	4b1d      	ldr	r3, [pc, #116]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bde:	4a19      	ldr	r2, [pc, #100]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d016      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fc fe24 	bl	800183c <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f7fc fe20 	bl	800183c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d902      	bls.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c0e:	e006      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c10:	4b0c      	ldr	r3, [pc, #48]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ec      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004c1e:	7cfb      	ldrb	r3, [r7, #19]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10c      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c24:	4b07      	ldr	r3, [pc, #28]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c34:	4903      	ldr	r1, [pc, #12]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c3c:	e008      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c3e:	7cfb      	ldrb	r3, [r7, #19]
 8004c40:	74bb      	strb	r3, [r7, #18]
 8004c42:	e005      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	7cfb      	ldrb	r3, [r7, #19]
 8004c4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c50:	7c7b      	ldrb	r3, [r7, #17]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d105      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c56:	4ba0      	ldr	r3, [pc, #640]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	4a9f      	ldr	r2, [pc, #636]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c6e:	4b9a      	ldr	r3, [pc, #616]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c74:	f023 0203 	bic.w	r2, r3, #3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7c:	4996      	ldr	r1, [pc, #600]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c90:	4b91      	ldr	r3, [pc, #580]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c96:	f023 020c 	bic.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	498e      	ldr	r1, [pc, #568]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cb2:	4b89      	ldr	r3, [pc, #548]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc0:	4985      	ldr	r1, [pc, #532]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cd4:	4b80      	ldr	r3, [pc, #512]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce2:	497d      	ldr	r1, [pc, #500]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cf6:	4b78      	ldr	r3, [pc, #480]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d04:	4974      	ldr	r1, [pc, #464]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d18:	4b6f      	ldr	r3, [pc, #444]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d26:	496c      	ldr	r1, [pc, #432]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d3a:	4b67      	ldr	r3, [pc, #412]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d48:	4963      	ldr	r1, [pc, #396]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d6a:	495b      	ldr	r1, [pc, #364]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d7e:	4b56      	ldr	r3, [pc, #344]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d84:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8c:	4952      	ldr	r1, [pc, #328]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004da0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dae:	494a      	ldr	r1, [pc, #296]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dc2:	4b45      	ldr	r3, [pc, #276]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd0:	4941      	ldr	r1, [pc, #260]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004de4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dea:	f023 0203 	bic.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df2:	4939      	ldr	r1, [pc, #228]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d028      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e06:	4b34      	ldr	r3, [pc, #208]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e14:	4930      	ldr	r1, [pc, #192]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e24:	d106      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e26:	4b2c      	ldr	r3, [pc, #176]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e30:	60d3      	str	r3, [r2, #12]
 8004e32:	e011      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e3c:	d10c      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2101      	movs	r1, #1
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 f909 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d04d      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e6c:	d108      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e74:	4a18      	ldr	r2, [pc, #96]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e7a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004e7e:	e012      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e80:	4b15      	ldr	r3, [pc, #84]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e86:	4a14      	ldr	r2, [pc, #80]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e8c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004e90:	4b11      	ldr	r3, [pc, #68]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e9e:	490e      	ldr	r1, [pc, #56]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eae:	d106      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb0:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4a08      	ldr	r2, [pc, #32]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eba:	60d3      	str	r3, [r2, #12]
 8004ebc:	e020      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ec6:	d109      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ec8:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a02      	ldr	r2, [pc, #8]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed2:	60d3      	str	r3, [r2, #12]
 8004ed4:	e014      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004ed6:	bf00      	nop
 8004ed8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ee0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ee4:	d10c      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	2101      	movs	r1, #1
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f8b5 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ef6:	7cfb      	ldrb	r3, [r7, #19]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004efc:	7cfb      	ldrb	r3, [r7, #19]
 8004efe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d028      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f1a:	4947      	ldr	r1, [pc, #284]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f2a:	d106      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f2c:	4b42      	ldr	r3, [pc, #264]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	4a41      	ldr	r2, [pc, #260]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f36:	60d3      	str	r3, [r2, #12]
 8004f38:	e011      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f42:	d10c      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	2101      	movs	r1, #1
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 f886 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004f50:	4603      	mov	r3, r0
 8004f52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f5a:	7cfb      	ldrb	r3, [r7, #19]
 8004f5c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01e      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f6a:	4b33      	ldr	r3, [pc, #204]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f70:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f7a:	492f      	ldr	r1, [pc, #188]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	2102      	movs	r1, #2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 f861 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f9e:	7cfb      	ldrb	r3, [r7, #19]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
 8004fa6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00b      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fb4:	4b20      	ldr	r3, [pc, #128]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fba:	f023 0204 	bic.w	r2, r3, #4
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fc4:	491c      	ldr	r1, [pc, #112]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fd8:	4b17      	ldr	r3, [pc, #92]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fde:	f023 0218 	bic.w	r2, r3, #24
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe8:	4913      	ldr	r1, [pc, #76]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d017      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005002:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800500c:	490a      	ldr	r1, [pc, #40]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800501a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800501e:	d105      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a04      	ldr	r2, [pc, #16]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800502a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800502c:	7cbb      	ldrb	r3, [r7, #18]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40021000 	.word	0x40021000

0800503c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005040:	4b05      	ldr	r3, [pc, #20]	@ (8005058 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a04      	ldr	r2, [pc, #16]	@ (8005058 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	6013      	str	r3, [r2, #0]
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000

0800505c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800506a:	4b72      	ldr	r3, [pc, #456]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00e      	beq.n	8005094 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005076:	4b6f      	ldr	r3, [pc, #444]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f003 0203 	and.w	r2, r3, #3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d103      	bne.n	800508e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
       ||
 800508a:	2b00      	cmp	r3, #0
 800508c:	d142      	bne.n	8005114 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
 8005092:	e03f      	b.n	8005114 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d018      	beq.n	80050ce <RCCEx_PLLSAI1_Config+0x72>
 800509c:	2b03      	cmp	r3, #3
 800509e:	d825      	bhi.n	80050ec <RCCEx_PLLSAI1_Config+0x90>
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d002      	beq.n	80050aa <RCCEx_PLLSAI1_Config+0x4e>
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d009      	beq.n	80050bc <RCCEx_PLLSAI1_Config+0x60>
 80050a8:	e020      	b.n	80050ec <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050aa:	4b62      	ldr	r3, [pc, #392]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d11d      	bne.n	80050f2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ba:	e01a      	b.n	80050f2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050bc:	4b5d      	ldr	r3, [pc, #372]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d116      	bne.n	80050f6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050cc:	e013      	b.n	80050f6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ce:	4b59      	ldr	r3, [pc, #356]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10f      	bne.n	80050fa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050da:	4b56      	ldr	r3, [pc, #344]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ea:	e006      	b.n	80050fa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      break;
 80050f0:	e004      	b.n	80050fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050f2:	bf00      	nop
 80050f4:	e002      	b.n	80050fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050f6:	bf00      	nop
 80050f8:	e000      	b.n	80050fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d108      	bne.n	8005114 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005102:	4b4c      	ldr	r3, [pc, #304]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f023 0203 	bic.w	r2, r3, #3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4949      	ldr	r1, [pc, #292]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005110:	4313      	orrs	r3, r2
 8005112:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 8086 	bne.w	8005228 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800511c:	4b45      	ldr	r3, [pc, #276]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a44      	ldr	r2, [pc, #272]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005122:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005128:	f7fc fb88 	bl	800183c <HAL_GetTick>
 800512c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800512e:	e009      	b.n	8005144 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005130:	f7fc fb84 	bl	800183c <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d902      	bls.n	8005144 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	73fb      	strb	r3, [r7, #15]
        break;
 8005142:	e005      	b.n	8005150 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005144:	4b3b      	ldr	r3, [pc, #236]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1ef      	bne.n	8005130 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d168      	bne.n	8005228 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d113      	bne.n	8005184 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800515c:	4b35      	ldr	r3, [pc, #212]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	4b35      	ldr	r3, [pc, #212]	@ (8005238 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005162:	4013      	ands	r3, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6892      	ldr	r2, [r2, #8]
 8005168:	0211      	lsls	r1, r2, #8
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	68d2      	ldr	r2, [r2, #12]
 800516e:	06d2      	lsls	r2, r2, #27
 8005170:	4311      	orrs	r1, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6852      	ldr	r2, [r2, #4]
 8005176:	3a01      	subs	r2, #1
 8005178:	0112      	lsls	r2, r2, #4
 800517a:	430a      	orrs	r2, r1
 800517c:	492d      	ldr	r1, [pc, #180]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 800517e:	4313      	orrs	r3, r2
 8005180:	610b      	str	r3, [r1, #16]
 8005182:	e02d      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d115      	bne.n	80051b6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800518a:	4b2a      	ldr	r3, [pc, #168]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	4b2b      	ldr	r3, [pc, #172]	@ (800523c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005190:	4013      	ands	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6892      	ldr	r2, [r2, #8]
 8005196:	0211      	lsls	r1, r2, #8
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6912      	ldr	r2, [r2, #16]
 800519c:	0852      	lsrs	r2, r2, #1
 800519e:	3a01      	subs	r2, #1
 80051a0:	0552      	lsls	r2, r2, #21
 80051a2:	4311      	orrs	r1, r2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6852      	ldr	r2, [r2, #4]
 80051a8:	3a01      	subs	r2, #1
 80051aa:	0112      	lsls	r2, r2, #4
 80051ac:	430a      	orrs	r2, r1
 80051ae:	4921      	ldr	r1, [pc, #132]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	610b      	str	r3, [r1, #16]
 80051b4:	e014      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	4b21      	ldr	r3, [pc, #132]	@ (8005240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051bc:	4013      	ands	r3, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6892      	ldr	r2, [r2, #8]
 80051c2:	0211      	lsls	r1, r2, #8
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6952      	ldr	r2, [r2, #20]
 80051c8:	0852      	lsrs	r2, r2, #1
 80051ca:	3a01      	subs	r2, #1
 80051cc:	0652      	lsls	r2, r2, #25
 80051ce:	4311      	orrs	r1, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6852      	ldr	r2, [r2, #4]
 80051d4:	3a01      	subs	r2, #1
 80051d6:	0112      	lsls	r2, r2, #4
 80051d8:	430a      	orrs	r2, r1
 80051da:	4916      	ldr	r1, [pc, #88]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051e0:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a13      	ldr	r2, [pc, #76]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ec:	f7fc fb26 	bl	800183c <HAL_GetTick>
 80051f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051f2:	e009      	b.n	8005208 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051f4:	f7fc fb22 	bl	800183c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d902      	bls.n	8005208 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	73fb      	strb	r3, [r7, #15]
          break;
 8005206:	e005      	b.n	8005214 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005208:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0ef      	beq.n	80051f4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800521a:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	4904      	ldr	r1, [pc, #16]	@ (8005234 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005224:	4313      	orrs	r3, r2
 8005226:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000
 8005238:	07ff800f 	.word	0x07ff800f
 800523c:	ff9f800f 	.word	0xff9f800f
 8005240:	f9ff800f 	.word	0xf9ff800f

08005244 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005252:	4b72      	ldr	r3, [pc, #456]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00e      	beq.n	800527c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800525e:	4b6f      	ldr	r3, [pc, #444]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f003 0203 	and.w	r2, r3, #3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d103      	bne.n	8005276 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
       ||
 8005272:	2b00      	cmp	r3, #0
 8005274:	d142      	bne.n	80052fc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
 800527a:	e03f      	b.n	80052fc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d018      	beq.n	80052b6 <RCCEx_PLLSAI2_Config+0x72>
 8005284:	2b03      	cmp	r3, #3
 8005286:	d825      	bhi.n	80052d4 <RCCEx_PLLSAI2_Config+0x90>
 8005288:	2b01      	cmp	r3, #1
 800528a:	d002      	beq.n	8005292 <RCCEx_PLLSAI2_Config+0x4e>
 800528c:	2b02      	cmp	r3, #2
 800528e:	d009      	beq.n	80052a4 <RCCEx_PLLSAI2_Config+0x60>
 8005290:	e020      	b.n	80052d4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005292:	4b62      	ldr	r3, [pc, #392]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d11d      	bne.n	80052da <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a2:	e01a      	b.n	80052da <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052a4:	4b5d      	ldr	r3, [pc, #372]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d116      	bne.n	80052de <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052b4:	e013      	b.n	80052de <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052b6:	4b59      	ldr	r3, [pc, #356]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10f      	bne.n	80052e2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052c2:	4b56      	ldr	r3, [pc, #344]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052d2:	e006      	b.n	80052e2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
      break;
 80052d8:	e004      	b.n	80052e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052da:	bf00      	nop
 80052dc:	e002      	b.n	80052e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052de:	bf00      	nop
 80052e0:	e000      	b.n	80052e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d108      	bne.n	80052fc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80052ea:	4b4c      	ldr	r3, [pc, #304]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f023 0203 	bic.w	r2, r3, #3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4949      	ldr	r1, [pc, #292]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 8086 	bne.w	8005410 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005304:	4b45      	ldr	r3, [pc, #276]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a44      	ldr	r2, [pc, #272]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 800530a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800530e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005310:	f7fc fa94 	bl	800183c <HAL_GetTick>
 8005314:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005316:	e009      	b.n	800532c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005318:	f7fc fa90 	bl	800183c <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d902      	bls.n	800532c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	73fb      	strb	r3, [r7, #15]
        break;
 800532a:	e005      	b.n	8005338 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800532c:	4b3b      	ldr	r3, [pc, #236]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ef      	bne.n	8005318 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005338:	7bfb      	ldrb	r3, [r7, #15]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d168      	bne.n	8005410 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d113      	bne.n	800536c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005344:	4b35      	ldr	r3, [pc, #212]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005346:	695a      	ldr	r2, [r3, #20]
 8005348:	4b35      	ldr	r3, [pc, #212]	@ (8005420 <RCCEx_PLLSAI2_Config+0x1dc>)
 800534a:	4013      	ands	r3, r2
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6892      	ldr	r2, [r2, #8]
 8005350:	0211      	lsls	r1, r2, #8
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68d2      	ldr	r2, [r2, #12]
 8005356:	06d2      	lsls	r2, r2, #27
 8005358:	4311      	orrs	r1, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6852      	ldr	r2, [r2, #4]
 800535e:	3a01      	subs	r2, #1
 8005360:	0112      	lsls	r2, r2, #4
 8005362:	430a      	orrs	r2, r1
 8005364:	492d      	ldr	r1, [pc, #180]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005366:	4313      	orrs	r3, r2
 8005368:	614b      	str	r3, [r1, #20]
 800536a:	e02d      	b.n	80053c8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d115      	bne.n	800539e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005372:	4b2a      	ldr	r3, [pc, #168]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	4b2b      	ldr	r3, [pc, #172]	@ (8005424 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005378:	4013      	ands	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6892      	ldr	r2, [r2, #8]
 800537e:	0211      	lsls	r1, r2, #8
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6912      	ldr	r2, [r2, #16]
 8005384:	0852      	lsrs	r2, r2, #1
 8005386:	3a01      	subs	r2, #1
 8005388:	0552      	lsls	r2, r2, #21
 800538a:	4311      	orrs	r1, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6852      	ldr	r2, [r2, #4]
 8005390:	3a01      	subs	r2, #1
 8005392:	0112      	lsls	r2, r2, #4
 8005394:	430a      	orrs	r2, r1
 8005396:	4921      	ldr	r1, [pc, #132]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005398:	4313      	orrs	r3, r2
 800539a:	614b      	str	r3, [r1, #20]
 800539c:	e014      	b.n	80053c8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800539e:	4b1f      	ldr	r3, [pc, #124]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053a0:	695a      	ldr	r2, [r3, #20]
 80053a2:	4b21      	ldr	r3, [pc, #132]	@ (8005428 <RCCEx_PLLSAI2_Config+0x1e4>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6892      	ldr	r2, [r2, #8]
 80053aa:	0211      	lsls	r1, r2, #8
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6952      	ldr	r2, [r2, #20]
 80053b0:	0852      	lsrs	r2, r2, #1
 80053b2:	3a01      	subs	r2, #1
 80053b4:	0652      	lsls	r2, r2, #25
 80053b6:	4311      	orrs	r1, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6852      	ldr	r2, [r2, #4]
 80053bc:	3a01      	subs	r2, #1
 80053be:	0112      	lsls	r2, r2, #4
 80053c0:	430a      	orrs	r2, r1
 80053c2:	4916      	ldr	r1, [pc, #88]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80053c8:	4b14      	ldr	r3, [pc, #80]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a13      	ldr	r2, [pc, #76]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d4:	f7fc fa32 	bl	800183c <HAL_GetTick>
 80053d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053da:	e009      	b.n	80053f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053dc:	f7fc fa2e 	bl	800183c <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d902      	bls.n	80053f0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	73fb      	strb	r3, [r7, #15]
          break;
 80053ee:	e005      	b.n	80053fc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053f0:	4b0a      	ldr	r3, [pc, #40]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0ef      	beq.n	80053dc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	4904      	ldr	r1, [pc, #16]	@ (800541c <RCCEx_PLLSAI2_Config+0x1d8>)
 800540c:	4313      	orrs	r3, r2
 800540e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005410:	7bfb      	ldrb	r3, [r7, #15]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40021000 	.word	0x40021000
 8005420:	07ff800f 	.word	0x07ff800f
 8005424:	ff9f800f 	.word	0xff9f800f
 8005428:	f9ff800f 	.word	0xf9ff800f

0800542c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e095      	b.n	800556a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	d108      	bne.n	8005458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800544e:	d009      	beq.n	8005464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	61da      	str	r2, [r3, #28]
 8005456:	e005      	b.n	8005464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fb ff3c 	bl	80012fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800549a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054a4:	d902      	bls.n	80054ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e002      	b.n	80054b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80054ba:	d007      	beq.n	80054cc <HAL_SPI_Init+0xa0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054c4:	d002      	beq.n	80054cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	ea42 0103 	orr.w	r1, r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005516:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	0c1b      	lsrs	r3, r3, #16
 8005528:	f003 0204 	and.w	r2, r3, #4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005548:	ea42 0103 	orr.w	r1, r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e042      	b.n	800560a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fb ff26 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2224      	movs	r2, #36	@ 0x24
 80055a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0201 	bic.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fb25 	bl	8005c0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f826 	bl	8005614 <UART_SetConfig>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e01b      	b.n	800560a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fba4 	bl	8005d50 <UART_CheckIdleState>
 8005608:	4603      	mov	r3, r0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005618:	b08c      	sub	sp, #48	@ 0x30
 800561a:	af00      	add	r7, sp, #0
 800561c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	431a      	orrs	r2, r3
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	431a      	orrs	r2, r3
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	4313      	orrs	r3, r2
 800563a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4baa      	ldr	r3, [pc, #680]	@ (80058ec <UART_SetConfig+0x2d8>)
 8005644:	4013      	ands	r3, r2
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	6812      	ldr	r2, [r2, #0]
 800564a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800564c:	430b      	orrs	r3, r1
 800564e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a9f      	ldr	r2, [pc, #636]	@ (80058f0 <UART_SetConfig+0x2dc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800567c:	4313      	orrs	r3, r2
 800567e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800568a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005694:	430b      	orrs	r3, r1
 8005696:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	f023 010f 	bic.w	r1, r3, #15
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a90      	ldr	r2, [pc, #576]	@ (80058f4 <UART_SetConfig+0x2e0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d125      	bne.n	8005704 <UART_SetConfig+0xf0>
 80056b8:	4b8f      	ldr	r3, [pc, #572]	@ (80058f8 <UART_SetConfig+0x2e4>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d81a      	bhi.n	80056fc <UART_SetConfig+0xe8>
 80056c6:	a201      	add	r2, pc, #4	@ (adr r2, 80056cc <UART_SetConfig+0xb8>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	080056dd 	.word	0x080056dd
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	080056e5 	.word	0x080056e5
 80056d8:	080056f5 	.word	0x080056f5
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e2:	e116      	b.n	8005912 <UART_SetConfig+0x2fe>
 80056e4:	2302      	movs	r3, #2
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ea:	e112      	b.n	8005912 <UART_SetConfig+0x2fe>
 80056ec:	2304      	movs	r3, #4
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f2:	e10e      	b.n	8005912 <UART_SetConfig+0x2fe>
 80056f4:	2308      	movs	r3, #8
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fa:	e10a      	b.n	8005912 <UART_SetConfig+0x2fe>
 80056fc:	2310      	movs	r3, #16
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005702:	e106      	b.n	8005912 <UART_SetConfig+0x2fe>
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a7c      	ldr	r2, [pc, #496]	@ (80058fc <UART_SetConfig+0x2e8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d138      	bne.n	8005780 <UART_SetConfig+0x16c>
 800570e:	4b7a      	ldr	r3, [pc, #488]	@ (80058f8 <UART_SetConfig+0x2e4>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b0c      	cmp	r3, #12
 800571a:	d82d      	bhi.n	8005778 <UART_SetConfig+0x164>
 800571c:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <UART_SetConfig+0x110>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005759 	.word	0x08005759
 8005728:	08005779 	.word	0x08005779
 800572c:	08005779 	.word	0x08005779
 8005730:	08005779 	.word	0x08005779
 8005734:	08005769 	.word	0x08005769
 8005738:	08005779 	.word	0x08005779
 800573c:	08005779 	.word	0x08005779
 8005740:	08005779 	.word	0x08005779
 8005744:	08005761 	.word	0x08005761
 8005748:	08005779 	.word	0x08005779
 800574c:	08005779 	.word	0x08005779
 8005750:	08005779 	.word	0x08005779
 8005754:	08005771 	.word	0x08005771
 8005758:	2300      	movs	r3, #0
 800575a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575e:	e0d8      	b.n	8005912 <UART_SetConfig+0x2fe>
 8005760:	2302      	movs	r3, #2
 8005762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005766:	e0d4      	b.n	8005912 <UART_SetConfig+0x2fe>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576e:	e0d0      	b.n	8005912 <UART_SetConfig+0x2fe>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005776:	e0cc      	b.n	8005912 <UART_SetConfig+0x2fe>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800577e:	e0c8      	b.n	8005912 <UART_SetConfig+0x2fe>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a5e      	ldr	r2, [pc, #376]	@ (8005900 <UART_SetConfig+0x2ec>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d125      	bne.n	80057d6 <UART_SetConfig+0x1c2>
 800578a:	4b5b      	ldr	r3, [pc, #364]	@ (80058f8 <UART_SetConfig+0x2e4>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005790:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005794:	2b30      	cmp	r3, #48	@ 0x30
 8005796:	d016      	beq.n	80057c6 <UART_SetConfig+0x1b2>
 8005798:	2b30      	cmp	r3, #48	@ 0x30
 800579a:	d818      	bhi.n	80057ce <UART_SetConfig+0x1ba>
 800579c:	2b20      	cmp	r3, #32
 800579e:	d00a      	beq.n	80057b6 <UART_SetConfig+0x1a2>
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d814      	bhi.n	80057ce <UART_SetConfig+0x1ba>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <UART_SetConfig+0x19a>
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d008      	beq.n	80057be <UART_SetConfig+0x1aa>
 80057ac:	e00f      	b.n	80057ce <UART_SetConfig+0x1ba>
 80057ae:	2300      	movs	r3, #0
 80057b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057b4:	e0ad      	b.n	8005912 <UART_SetConfig+0x2fe>
 80057b6:	2302      	movs	r3, #2
 80057b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057bc:	e0a9      	b.n	8005912 <UART_SetConfig+0x2fe>
 80057be:	2304      	movs	r3, #4
 80057c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c4:	e0a5      	b.n	8005912 <UART_SetConfig+0x2fe>
 80057c6:	2308      	movs	r3, #8
 80057c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057cc:	e0a1      	b.n	8005912 <UART_SetConfig+0x2fe>
 80057ce:	2310      	movs	r3, #16
 80057d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057d4:	e09d      	b.n	8005912 <UART_SetConfig+0x2fe>
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a4a      	ldr	r2, [pc, #296]	@ (8005904 <UART_SetConfig+0x2f0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d125      	bne.n	800582c <UART_SetConfig+0x218>
 80057e0:	4b45      	ldr	r3, [pc, #276]	@ (80058f8 <UART_SetConfig+0x2e4>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80057ec:	d016      	beq.n	800581c <UART_SetConfig+0x208>
 80057ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80057f0:	d818      	bhi.n	8005824 <UART_SetConfig+0x210>
 80057f2:	2b80      	cmp	r3, #128	@ 0x80
 80057f4:	d00a      	beq.n	800580c <UART_SetConfig+0x1f8>
 80057f6:	2b80      	cmp	r3, #128	@ 0x80
 80057f8:	d814      	bhi.n	8005824 <UART_SetConfig+0x210>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <UART_SetConfig+0x1f0>
 80057fe:	2b40      	cmp	r3, #64	@ 0x40
 8005800:	d008      	beq.n	8005814 <UART_SetConfig+0x200>
 8005802:	e00f      	b.n	8005824 <UART_SetConfig+0x210>
 8005804:	2300      	movs	r3, #0
 8005806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800580a:	e082      	b.n	8005912 <UART_SetConfig+0x2fe>
 800580c:	2302      	movs	r3, #2
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005812:	e07e      	b.n	8005912 <UART_SetConfig+0x2fe>
 8005814:	2304      	movs	r3, #4
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800581a:	e07a      	b.n	8005912 <UART_SetConfig+0x2fe>
 800581c:	2308      	movs	r3, #8
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005822:	e076      	b.n	8005912 <UART_SetConfig+0x2fe>
 8005824:	2310      	movs	r3, #16
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800582a:	e072      	b.n	8005912 <UART_SetConfig+0x2fe>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a35      	ldr	r2, [pc, #212]	@ (8005908 <UART_SetConfig+0x2f4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d12a      	bne.n	800588c <UART_SetConfig+0x278>
 8005836:	4b30      	ldr	r3, [pc, #192]	@ (80058f8 <UART_SetConfig+0x2e4>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005840:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005844:	d01a      	beq.n	800587c <UART_SetConfig+0x268>
 8005846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584a:	d81b      	bhi.n	8005884 <UART_SetConfig+0x270>
 800584c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005850:	d00c      	beq.n	800586c <UART_SetConfig+0x258>
 8005852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005856:	d815      	bhi.n	8005884 <UART_SetConfig+0x270>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <UART_SetConfig+0x250>
 800585c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005860:	d008      	beq.n	8005874 <UART_SetConfig+0x260>
 8005862:	e00f      	b.n	8005884 <UART_SetConfig+0x270>
 8005864:	2300      	movs	r3, #0
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586a:	e052      	b.n	8005912 <UART_SetConfig+0x2fe>
 800586c:	2302      	movs	r3, #2
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005872:	e04e      	b.n	8005912 <UART_SetConfig+0x2fe>
 8005874:	2304      	movs	r3, #4
 8005876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800587a:	e04a      	b.n	8005912 <UART_SetConfig+0x2fe>
 800587c:	2308      	movs	r3, #8
 800587e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005882:	e046      	b.n	8005912 <UART_SetConfig+0x2fe>
 8005884:	2310      	movs	r3, #16
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800588a:	e042      	b.n	8005912 <UART_SetConfig+0x2fe>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a17      	ldr	r2, [pc, #92]	@ (80058f0 <UART_SetConfig+0x2dc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d13a      	bne.n	800590c <UART_SetConfig+0x2f8>
 8005896:	4b18      	ldr	r3, [pc, #96]	@ (80058f8 <UART_SetConfig+0x2e4>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058a4:	d01a      	beq.n	80058dc <UART_SetConfig+0x2c8>
 80058a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058aa:	d81b      	bhi.n	80058e4 <UART_SetConfig+0x2d0>
 80058ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058b0:	d00c      	beq.n	80058cc <UART_SetConfig+0x2b8>
 80058b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058b6:	d815      	bhi.n	80058e4 <UART_SetConfig+0x2d0>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <UART_SetConfig+0x2b0>
 80058bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c0:	d008      	beq.n	80058d4 <UART_SetConfig+0x2c0>
 80058c2:	e00f      	b.n	80058e4 <UART_SetConfig+0x2d0>
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ca:	e022      	b.n	8005912 <UART_SetConfig+0x2fe>
 80058cc:	2302      	movs	r3, #2
 80058ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058d2:	e01e      	b.n	8005912 <UART_SetConfig+0x2fe>
 80058d4:	2304      	movs	r3, #4
 80058d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058da:	e01a      	b.n	8005912 <UART_SetConfig+0x2fe>
 80058dc:	2308      	movs	r3, #8
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058e2:	e016      	b.n	8005912 <UART_SetConfig+0x2fe>
 80058e4:	2310      	movs	r3, #16
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ea:	e012      	b.n	8005912 <UART_SetConfig+0x2fe>
 80058ec:	cfff69f3 	.word	0xcfff69f3
 80058f0:	40008000 	.word	0x40008000
 80058f4:	40013800 	.word	0x40013800
 80058f8:	40021000 	.word	0x40021000
 80058fc:	40004400 	.word	0x40004400
 8005900:	40004800 	.word	0x40004800
 8005904:	40004c00 	.word	0x40004c00
 8005908:	40005000 	.word	0x40005000
 800590c:	2310      	movs	r3, #16
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4aae      	ldr	r2, [pc, #696]	@ (8005bd0 <UART_SetConfig+0x5bc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	f040 8097 	bne.w	8005a4c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800591e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005922:	2b08      	cmp	r3, #8
 8005924:	d823      	bhi.n	800596e <UART_SetConfig+0x35a>
 8005926:	a201      	add	r2, pc, #4	@ (adr r2, 800592c <UART_SetConfig+0x318>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	08005951 	.word	0x08005951
 8005930:	0800596f 	.word	0x0800596f
 8005934:	08005959 	.word	0x08005959
 8005938:	0800596f 	.word	0x0800596f
 800593c:	0800595f 	.word	0x0800595f
 8005940:	0800596f 	.word	0x0800596f
 8005944:	0800596f 	.word	0x0800596f
 8005948:	0800596f 	.word	0x0800596f
 800594c:	08005967 	.word	0x08005967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005950:	f7fe ff58 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
 8005954:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005956:	e010      	b.n	800597a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005958:	4b9e      	ldr	r3, [pc, #632]	@ (8005bd4 <UART_SetConfig+0x5c0>)
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800595c:	e00d      	b.n	800597a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595e:	f7fe feb9 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8005962:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005964:	e009      	b.n	800597a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800596a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800596c:	e005      	b.n	800597a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005978:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8130 	beq.w	8005be2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	4a94      	ldr	r2, [pc, #592]	@ (8005bd8 <UART_SetConfig+0x5c4>)
 8005988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800598c:	461a      	mov	r2, r3
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	fbb3 f3f2 	udiv	r3, r3, r2
 8005994:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	4413      	add	r3, r2
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d305      	bcc.n	80059b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d903      	bls.n	80059ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059b8:	e113      	b.n	8005be2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	2200      	movs	r2, #0
 80059be:	60bb      	str	r3, [r7, #8]
 80059c0:	60fa      	str	r2, [r7, #12]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c6:	4a84      	ldr	r2, [pc, #528]	@ (8005bd8 <UART_SetConfig+0x5c4>)
 80059c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2200      	movs	r2, #0
 80059d0:	603b      	str	r3, [r7, #0]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059dc:	f7fa fc0e 	bl	80001fc <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4610      	mov	r0, r2
 80059e6:	4619      	mov	r1, r3
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	020b      	lsls	r3, r1, #8
 80059f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059f6:	0202      	lsls	r2, r0, #8
 80059f8:	6979      	ldr	r1, [r7, #20]
 80059fa:	6849      	ldr	r1, [r1, #4]
 80059fc:	0849      	lsrs	r1, r1, #1
 80059fe:	2000      	movs	r0, #0
 8005a00:	460c      	mov	r4, r1
 8005a02:	4605      	mov	r5, r0
 8005a04:	eb12 0804 	adds.w	r8, r2, r4
 8005a08:	eb43 0905 	adc.w	r9, r3, r5
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	469a      	mov	sl, r3
 8005a14:	4693      	mov	fp, r2
 8005a16:	4652      	mov	r2, sl
 8005a18:	465b      	mov	r3, fp
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	f7fa fbed 	bl	80001fc <__aeabi_uldivmod>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4613      	mov	r3, r2
 8005a28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a30:	d308      	bcc.n	8005a44 <UART_SetConfig+0x430>
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a38:	d204      	bcs.n	8005a44 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a3a      	ldr	r2, [r7, #32]
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	e0ce      	b.n	8005be2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a4a:	e0ca      	b.n	8005be2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a54:	d166      	bne.n	8005b24 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005a56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d827      	bhi.n	8005aae <UART_SetConfig+0x49a>
 8005a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a64 <UART_SetConfig+0x450>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a91 	.word	0x08005a91
 8005a6c:	08005a99 	.word	0x08005a99
 8005a70:	08005aaf 	.word	0x08005aaf
 8005a74:	08005a9f 	.word	0x08005a9f
 8005a78:	08005aaf 	.word	0x08005aaf
 8005a7c:	08005aaf 	.word	0x08005aaf
 8005a80:	08005aaf 	.word	0x08005aaf
 8005a84:	08005aa7 	.word	0x08005aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a88:	f7fe febc 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
 8005a8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a8e:	e014      	b.n	8005aba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a90:	f7fe fece 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 8005a94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a96:	e010      	b.n	8005aba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a98:	4b4e      	ldr	r3, [pc, #312]	@ (8005bd4 <UART_SetConfig+0x5c0>)
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a9c:	e00d      	b.n	8005aba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9e:	f7fe fe19 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8005aa2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005aa4:	e009      	b.n	8005aba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005aac:	e005      	b.n	8005aba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ab8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8090 	beq.w	8005be2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	4a44      	ldr	r2, [pc, #272]	@ (8005bd8 <UART_SetConfig+0x5c4>)
 8005ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005acc:	461a      	mov	r2, r3
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ad4:	005a      	lsls	r2, r3, #1
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	441a      	add	r2, r3
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	2b0f      	cmp	r3, #15
 8005aec:	d916      	bls.n	8005b1c <UART_SetConfig+0x508>
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af4:	d212      	bcs.n	8005b1c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f023 030f 	bic.w	r3, r3, #15
 8005afe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	085b      	lsrs	r3, r3, #1
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	8bfb      	ldrh	r3, [r7, #30]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	8bfa      	ldrh	r2, [r7, #30]
 8005b18:	60da      	str	r2, [r3, #12]
 8005b1a:	e062      	b.n	8005be2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b22:	e05e      	b.n	8005be2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d828      	bhi.n	8005b7e <UART_SetConfig+0x56a>
 8005b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b34 <UART_SetConfig+0x520>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005b59 	.word	0x08005b59
 8005b38:	08005b61 	.word	0x08005b61
 8005b3c:	08005b69 	.word	0x08005b69
 8005b40:	08005b7f 	.word	0x08005b7f
 8005b44:	08005b6f 	.word	0x08005b6f
 8005b48:	08005b7f 	.word	0x08005b7f
 8005b4c:	08005b7f 	.word	0x08005b7f
 8005b50:	08005b7f 	.word	0x08005b7f
 8005b54:	08005b77 	.word	0x08005b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b58:	f7fe fe54 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
 8005b5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b5e:	e014      	b.n	8005b8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b60:	f7fe fe66 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 8005b64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b66:	e010      	b.n	8005b8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b68:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <UART_SetConfig+0x5c0>)
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b6c:	e00d      	b.n	8005b8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b6e:	f7fe fdb1 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8005b72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b74:	e009      	b.n	8005b8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b7c:	e005      	b.n	8005b8a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b88:	bf00      	nop
    }

    if (pclk != 0U)
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d028      	beq.n	8005be2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	4a10      	ldr	r2, [pc, #64]	@ (8005bd8 <UART_SetConfig+0x5c4>)
 8005b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	441a      	add	r2, r3
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	2b0f      	cmp	r3, #15
 8005bb8:	d910      	bls.n	8005bdc <UART_SetConfig+0x5c8>
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc0:	d20c      	bcs.n	8005bdc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60da      	str	r2, [r3, #12]
 8005bcc:	e009      	b.n	8005be2 <UART_SetConfig+0x5ce>
 8005bce:	bf00      	nop
 8005bd0:	40008000 	.word	0x40008000
 8005bd4:	00f42400 	.word	0x00f42400
 8005bd8:	08006308 	.word	0x08006308
      }
      else
      {
        ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005bfe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3730      	adds	r7, #48	@ 0x30
 8005c06:	46bd      	mov	sp, r7
 8005c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01a      	beq.n	8005d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d0a:	d10a      	bne.n	8005d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b098      	sub	sp, #96	@ 0x60
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d60:	f7fb fd6c 	bl	800183c <HAL_GetTick>
 8005d64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d12f      	bne.n	8005dd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f88e 	bl	8005ea4 <UART_WaitOnFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d022      	beq.n	8005dd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005da2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e6      	bne.n	8005d8e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e063      	b.n	8005e9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d149      	bne.n	8005e76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dea:	2200      	movs	r2, #0
 8005dec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f857 	bl	8005ea4 <UART_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d03c      	beq.n	8005e76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	623b      	str	r3, [r7, #32]
   return(result);
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e6      	bne.n	8005dfc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3308      	adds	r3, #8
 8005e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e4e:	61fa      	str	r2, [r7, #28]
 8005e50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	69b9      	ldr	r1, [r7, #24]
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e012      	b.n	8005e9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3758      	adds	r7, #88	@ 0x58
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb4:	e04f      	b.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d04b      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebe:	f7fb fcbd 	bl	800183c <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e04e      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d037      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b80      	cmp	r3, #128	@ 0x80
 8005eea:	d034      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b40      	cmp	r3, #64	@ 0x40
 8005ef0:	d031      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d110      	bne.n	8005f22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2208      	movs	r2, #8
 8005f06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f838 	bl	8005f7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2208      	movs	r2, #8
 8005f12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e029      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f30:	d111      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f81e 	bl	8005f7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e00f      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	bf0c      	ite	eq
 8005f66:	2301      	moveq	r3, #1
 8005f68:	2300      	movne	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d0a0      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b095      	sub	sp, #84	@ 0x54
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fa6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005faa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e6      	bne.n	8005f86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fce:	f023 0301 	bic.w	r3, r3, #1
 8005fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3308      	adds	r3, #8
 8005fda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e3      	bne.n	8005fb8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d118      	bne.n	800602a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	60bb      	str	r3, [r7, #8]
   return(result);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f023 0310 	bic.w	r3, r3, #16
 800600c:	647b      	str	r3, [r7, #68]	@ 0x44
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	6979      	ldr	r1, [r7, #20]
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	613b      	str	r3, [r7, #16]
   return(result);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e6      	bne.n	8005ff8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800603e:	bf00      	nop
 8006040:	3754      	adds	r7, #84	@ 0x54
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_UARTEx_DisableFifoMode+0x16>
 800605c:	2302      	movs	r3, #2
 800605e:	e027      	b.n	80060b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2224      	movs	r2, #36	@ 0x24
 800606c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800608e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e02d      	b.n	8006130 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2224      	movs	r2, #36	@ 0x24
 80060e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0201 	bic.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f84f 	bl	80061b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800614c:	2302      	movs	r3, #2
 800614e:	e02d      	b.n	80061ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2224      	movs	r2, #36	@ 0x24
 800615c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f811 	bl	80061b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d108      	bne.n	80061d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061d4:	e031      	b.n	800623a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061d6:	2308      	movs	r3, #8
 80061d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061da:	2308      	movs	r3, #8
 80061dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	0e5b      	lsrs	r3, r3, #25
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	0f5b      	lsrs	r3, r3, #29
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	7b3a      	ldrb	r2, [r7, #12]
 8006202:	4911      	ldr	r1, [pc, #68]	@ (8006248 <UARTEx_SetNbDataToProcess+0x94>)
 8006204:	5c8a      	ldrb	r2, [r1, r2]
 8006206:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800620a:	7b3a      	ldrb	r2, [r7, #12]
 800620c:	490f      	ldr	r1, [pc, #60]	@ (800624c <UARTEx_SetNbDataToProcess+0x98>)
 800620e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006210:	fb93 f3f2 	sdiv	r3, r3, r2
 8006214:	b29a      	uxth	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	7b7a      	ldrb	r2, [r7, #13]
 8006220:	4909      	ldr	r1, [pc, #36]	@ (8006248 <UARTEx_SetNbDataToProcess+0x94>)
 8006222:	5c8a      	ldrb	r2, [r1, r2]
 8006224:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006228:	7b7a      	ldrb	r2, [r7, #13]
 800622a:	4908      	ldr	r1, [pc, #32]	@ (800624c <UARTEx_SetNbDataToProcess+0x98>)
 800622c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800622e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006232:	b29a      	uxth	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	08006320 	.word	0x08006320
 800624c:	08006328 	.word	0x08006328

08006250 <memset>:
 8006250:	4402      	add	r2, r0
 8006252:	4603      	mov	r3, r0
 8006254:	4293      	cmp	r3, r2
 8006256:	d100      	bne.n	800625a <memset+0xa>
 8006258:	4770      	bx	lr
 800625a:	f803 1b01 	strb.w	r1, [r3], #1
 800625e:	e7f9      	b.n	8006254 <memset+0x4>

08006260 <__libc_init_array>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	4d0d      	ldr	r5, [pc, #52]	@ (8006298 <__libc_init_array+0x38>)
 8006264:	4c0d      	ldr	r4, [pc, #52]	@ (800629c <__libc_init_array+0x3c>)
 8006266:	1b64      	subs	r4, r4, r5
 8006268:	10a4      	asrs	r4, r4, #2
 800626a:	2600      	movs	r6, #0
 800626c:	42a6      	cmp	r6, r4
 800626e:	d109      	bne.n	8006284 <__libc_init_array+0x24>
 8006270:	4d0b      	ldr	r5, [pc, #44]	@ (80062a0 <__libc_init_array+0x40>)
 8006272:	4c0c      	ldr	r4, [pc, #48]	@ (80062a4 <__libc_init_array+0x44>)
 8006274:	f000 f818 	bl	80062a8 <_init>
 8006278:	1b64      	subs	r4, r4, r5
 800627a:	10a4      	asrs	r4, r4, #2
 800627c:	2600      	movs	r6, #0
 800627e:	42a6      	cmp	r6, r4
 8006280:	d105      	bne.n	800628e <__libc_init_array+0x2e>
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	f855 3b04 	ldr.w	r3, [r5], #4
 8006288:	4798      	blx	r3
 800628a:	3601      	adds	r6, #1
 800628c:	e7ee      	b.n	800626c <__libc_init_array+0xc>
 800628e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006292:	4798      	blx	r3
 8006294:	3601      	adds	r6, #1
 8006296:	e7f2      	b.n	800627e <__libc_init_array+0x1e>
 8006298:	08006338 	.word	0x08006338
 800629c:	08006338 	.word	0x08006338
 80062a0:	08006338 	.word	0x08006338
 80062a4:	0800633c 	.word	0x0800633c

080062a8 <_init>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr

080062b4 <_fini>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr
