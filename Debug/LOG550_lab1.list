
LOG550_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e88  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007044  08007044  00008044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b4  080070b4  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  080070b4  080070b4  000080b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070bc  080070bc  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070bc  080070bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070c0  080070c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080070c4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000010  080070d4  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  080070d4  0000955c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204e6  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000357f  00000000  00000000  00029526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd8  00000000  00000000  0002caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016a8  00000000  00000000  0002e780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfe4  00000000  00000000  0002fe28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000215e5  00000000  00000000  0005de0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123f0c  00000000  00000000  0007f3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a32fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e28  00000000  00000000  001a3340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001ab168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800702c 	.word	0x0800702c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	0800702c 	.word	0x0800702c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f001 f9fd 	bl	80018ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f826 	bl	8000544 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f8:	f000 f886 	bl	8000608 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fc02 	bl	8000d04 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000500:	f000 f8b2 	bl	8000668 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000504:	f000 f914 	bl	8000730 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000508:	f000 f94a 	bl	80007a0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f988 	bl	8000820 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000510:	f000 f9c6 	bl	80008a0 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000514:	f000 fa1a 	bl	800094c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000518:	f000 fa56 	bl	80009c8 <MX_SPI3_Init>
  MX_UART4_Init();
 800051c:	f000 fab8 	bl	8000a90 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000520:	f000 fb02 	bl	8000b28 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000524:	f000 fb4c 	bl	8000bc0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000528:	f000 fb98 	bl	8000c5c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800052c:	f000 fbe2 	bl	8000cf4 <MX_USB_OTG_FS_USB_Init>
  MX_TIM16_Init();
 8000530:	f000 fa88 	bl	8000a44 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <main+0x54>)
 8000536:	f005 fc7b 	bl	8005e30 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	bf00      	nop
 800053c:	e7fd      	b.n	800053a <main+0x4e>
 800053e:	bf00      	nop
 8000540:	2000028c 	.word	0x2000028c

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	@ 0x58
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2244      	movs	r2, #68	@ 0x44
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f006 fd3e 	bl	8006fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000566:	2000      	movs	r0, #0
 8000568:	f003 fec4 	bl	80042f4 <HAL_PWREx_ControlVoltageScaling>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000572:	f000 fd65 	bl	8001040 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000576:	f003 fe8d 	bl	8004294 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800057a:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <SystemClock_Config+0xc0>)
 800057c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000580:	4a20      	ldr	r2, [pc, #128]	@ (8000604 <SystemClock_Config+0xc0>)
 8000582:	f023 0318 	bic.w	r3, r3, #24
 8000586:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800058a:	2314      	movs	r3, #20
 800058c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000592:	2301      	movs	r3, #1
 8000594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800059a:	2360      	movs	r3, #96	@ 0x60
 800059c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a2:	2301      	movs	r3, #1
 80005a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005aa:	233c      	movs	r3, #60	@ 0x3c
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 ff3c 	bl	800443c <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005ca:	f000 fd39 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fb42 	bl	8004c70 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005f2:	f000 fd25 	bl	8001040 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005f6:	f005 f929 	bl	800584c <HAL_RCCEx_EnableMSIPLLMode>
}
 80005fa:	bf00      	nop
 80005fc:	3758      	adds	r7, #88	@ 0x58
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000

08000608 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b0a6      	sub	sp, #152	@ 0x98
 800060c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2294      	movs	r2, #148	@ 0x94
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f006 fcdd 	bl	8006fd4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800061a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800061e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000620:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000628:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800062c:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800062e:	2301      	movs	r3, #1
 8000630:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000636:	2318      	movs	r3, #24
 8000638:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000646:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 800064a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fdcc 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800065a:	f000 fcf1 	bl	8001040 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3798      	adds	r7, #152	@ 0x98
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
 800067c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800067e:	4b29      	ldr	r3, [pc, #164]	@ (8000724 <MX_ADC1_Init+0xbc>)
 8000680:	4a29      	ldr	r2, [pc, #164]	@ (8000728 <MX_ADC1_Init+0xc0>)
 8000682:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000684:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <MX_ADC1_Init+0xbc>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068a:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <MX_ADC1_Init+0xbc>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000690:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <MX_ADC1_Init+0xbc>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000696:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <MX_ADC1_Init+0xbc>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069c:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <MX_ADC1_Init+0xbc>)
 800069e:	2204      	movs	r2, #4
 80006a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a2:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <MX_ADC1_Init+0xbc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <MX_ADC1_Init+0xbc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <MX_ADC1_Init+0xbc>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <MX_ADC1_Init+0xbc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006bc:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <MX_ADC1_Init+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c2:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_ADC1_Init+0xbc>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c8:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <MX_ADC1_Init+0xbc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_ADC1_Init+0xbc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006d6:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <MX_ADC1_Init+0xbc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006de:	4811      	ldr	r0, [pc, #68]	@ (8000724 <MX_ADC1_Init+0xbc>)
 80006e0:	f001 fb68 	bl	8001db4 <HAL_ADC_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006ea:	f000 fca9 	bl	8001040 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_ADC1_Init+0xc4>)
 80006f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f2:	2306      	movs	r3, #6
 80006f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006fa:	237f      	movs	r3, #127	@ 0x7f
 80006fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006fe:	2304      	movs	r3, #4
 8000700:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	@ (8000724 <MX_ADC1_Init+0xbc>)
 800070c:	f001 ff22 	bl	8002554 <HAL_ADC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000716:	f000 fc93 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000002c 	.word	0x2000002c
 8000728:	50040000 	.word	0x50040000
 800072c:	04300002 	.word	0x04300002

08000730 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 8000736:	4a19      	ldr	r2, [pc, #100]	@ (800079c <MX_DFSDM1_Init+0x6c>)
 8000738:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 800073c:	2201      	movs	r2, #1
 800073e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 8000748:	2202      	movs	r2, #2
 800074a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 8000766:	2204      	movs	r2, #4
 8000768:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 8000772:	2201      	movs	r2, #1
 8000774:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_DFSDM1_Init+0x68>)
 8000784:	f002 fcac 	bl	80030e0 <HAL_DFSDM_ChannelInit>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800078e:	f000 fc57 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000094 	.word	0x20000094
 800079c:	40016040 	.word	0x40016040

080007a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000818 <MX_I2C1_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <MX_I2C1_Init+0x7c>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b0:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007da:	480e      	ldr	r0, [pc, #56]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007dc:	f002 ff4e 	bl	800367c <HAL_I2C_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e6:	f000 fc2b 	bl	8001040 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4809      	ldr	r0, [pc, #36]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007ee:	f002 ffe0 	bl	80037b2 <HAL_I2CEx_ConfigAnalogFilter>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 fc22 	bl	8001040 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_I2C1_Init+0x74>)
 8000800:	f003 f822 	bl	8003848 <HAL_I2CEx_ConfigDigitalFilter>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800080a:	f000 fc19 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000cc 	.word	0x200000cc
 8000818:	40005400 	.word	0x40005400
 800081c:	30a175ab 	.word	0x30a175ab

08000820 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <MX_I2C2_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_I2C2_Init+0x74>)
 800082c:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <MX_I2C2_Init+0x7c>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000838:	2201      	movs	r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_I2C2_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_I2C2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800085a:	480e      	ldr	r0, [pc, #56]	@ (8000894 <MX_I2C2_Init+0x74>)
 800085c:	f002 ff0e 	bl	800367c <HAL_I2C_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000866:	f000 fbeb 	bl	8001040 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4809      	ldr	r0, [pc, #36]	@ (8000894 <MX_I2C2_Init+0x74>)
 800086e:	f002 ffa0 	bl	80037b2 <HAL_I2CEx_ConfigAnalogFilter>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000878:	f000 fbe2 	bl	8001040 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000880:	f002 ffe2 	bl	8003848 <HAL_I2CEx_ConfigDigitalFilter>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 fbd9 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000120 	.word	0x20000120
 8000898:	40005800 	.word	0x40005800
 800089c:	30a175ab 	.word	0x30a175ab

080008a0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008b4:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008b6:	4a24      	ldr	r2, [pc, #144]	@ (8000948 <MX_OCTOSPI1_Init+0xa8>)
 80008b8:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008ba:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008bc:	2201      	movs	r2, #1
 80008be:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008c0:	4b20      	ldr	r3, [pc, #128]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80008cc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008d0:	2220      	movs	r2, #32
 80008d2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80008da:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80008f2:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 8000900:	2208      	movs	r2, #8
 8000902:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000904:	480f      	ldr	r0, [pc, #60]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 8000906:	f002 ffeb 	bl	80038e0 <HAL_OSPI_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000910:	f000 fb96 	bl	8001040 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000914:	2301      	movs	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800091c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000920:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	@ (8000944 <MX_OCTOSPI1_Init+0xa4>)
 800092c:	f003 f892 	bl	8003a54 <HAL_OSPIM_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000936:	f000 fb83 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000174 	.word	0x20000174
 8000948:	a0001000 	.word	0xa0001000

0800094c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000952:	4a1c      	ldr	r2, [pc, #112]	@ (80009c4 <MX_SPI1_Init+0x78>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000958:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800095c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000964:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000966:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800096a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_SPI1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_SPI1_Init+0x74>)
 800097a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800097e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000982:	2208      	movs	r2, #8
 8000984:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_SPI1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_SPI1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_SPI1_Init+0x74>)
 800099a:	2207      	movs	r2, #7
 800099c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_SPI1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_SPI1_Init+0x74>)
 80009a6:	2208      	movs	r2, #8
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_SPI1_Init+0x74>)
 80009ac:	f005 f946 	bl	8005c3c <HAL_SPI_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 fb43 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001c4 	.word	0x200001c4
 80009c4:	40013000 	.word	0x40013000

080009c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <MX_SPI3_Init+0x74>)
 80009ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000a40 <MX_SPI3_Init+0x78>)
 80009d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <MX_SPI3_Init+0x74>)
 80009d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_SPI3_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_SPI3_Init+0x74>)
 80009e2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e8:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <MX_SPI3_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ee:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <MX_SPI3_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_SPI3_Init+0x74>)
 80009f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_SPI3_Init+0x74>)
 80009fe:	2208      	movs	r2, #8
 8000a00:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_SPI3_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_SPI3_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_SPI3_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_SPI3_Init+0x74>)
 8000a16:	2207      	movs	r2, #7
 8000a18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_SPI3_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_SPI3_Init+0x74>)
 8000a22:	2208      	movs	r2, #8
 8000a24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_SPI3_Init+0x74>)
 8000a28:	f005 f908 	bl	8005c3c <HAL_SPI_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a32:	f000 fb05 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000228 	.word	0x20000228
 8000a40:	40003c00 	.word	0x40003c00

08000a44 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_TIM16_Init+0x44>)
 8000a4a:	4a10      	ldr	r2, [pc, #64]	@ (8000a8c <MX_TIM16_Init+0x48>)
 8000a4c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 29999;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_TIM16_Init+0x44>)
 8000a50:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000a54:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_TIM16_Init+0x44>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <MX_TIM16_Init+0x44>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_TIM16_Init+0x44>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <MX_TIM16_Init+0x44>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_TIM16_Init+0x44>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_TIM16_Init+0x44>)
 8000a76:	f005 f984 	bl	8005d82 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000a80:	f000 fade 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000028c 	.word	0x2000028c
 8000a8c:	40014400 	.word	0x40014400

08000a90 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a94:	4b22      	ldr	r3, [pc, #136]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000a96:	4a23      	ldr	r2, [pc, #140]	@ (8000b24 <MX_UART4_Init+0x94>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ad8:	4811      	ldr	r0, [pc, #68]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000ada:	f005 fc0d 	bl	80062f8 <HAL_UART_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f000 faac 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480d      	ldr	r0, [pc, #52]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000aec:	f006 f9a8 	bl	8006e40 <HAL_UARTEx_SetTxFifoThreshold>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000af6:	f000 faa3 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000afe:	f006 f9dd 	bl	8006ebc <HAL_UARTEx_SetRxFifoThreshold>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b08:	f000 fa9a 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_UART4_Init+0x90>)
 8000b0e:	f006 f95e 	bl	8006dce <HAL_UARTEx_DisableFifoMode>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b18:	f000 fa92 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200002d8 	.word	0x200002d8
 8000b24:	40004c00 	.word	0x40004c00

08000b28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b2c:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b2e:	4a23      	ldr	r2, [pc, #140]	@ (8000bbc <MX_USART1_UART_Init+0x94>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b32:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b70:	4811      	ldr	r0, [pc, #68]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b72:	f005 fbc1 	bl	80062f8 <HAL_UART_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b7c:	f000 fa60 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b84:	f006 f95c 	bl	8006e40 <HAL_UARTEx_SetTxFifoThreshold>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b8e:	f000 fa57 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4808      	ldr	r0, [pc, #32]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000b96:	f006 f991 	bl	8006ebc <HAL_UARTEx_SetRxFifoThreshold>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ba0:	f000 fa4e 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <MX_USART1_UART_Init+0x90>)
 8000ba6:	f006 f912 	bl	8006dce <HAL_UARTEx_DisableFifoMode>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bb0:	f000 fa46 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000036c 	.word	0x2000036c
 8000bbc:	40013800 	.word	0x40013800

08000bc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc4:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000bc6:	4a24      	ldr	r2, [pc, #144]	@ (8000c58 <MX_USART2_UART_Init+0x98>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bca:	4b22      	ldr	r3, [pc, #136]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000bec:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bf0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0a:	4812      	ldr	r0, [pc, #72]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000c0c:	f005 fb74 	bl	80062f8 <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c16:	f000 fa13 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	480d      	ldr	r0, [pc, #52]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000c1e:	f006 f90f 	bl	8006e40 <HAL_UARTEx_SetTxFifoThreshold>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c28:	f000 fa0a 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000c30:	f006 f944 	bl	8006ebc <HAL_UARTEx_SetRxFifoThreshold>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c3a:	f000 fa01 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_USART2_UART_Init+0x94>)
 8000c40:	f006 f8c5 	bl	8006dce <HAL_UARTEx_DisableFifoMode>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000c4a:	f000 f9f9 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000400 	.word	0x20000400
 8000c58:	40004400 	.word	0x40004400

08000c5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c60:	4b22      	ldr	r3, [pc, #136]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000c62:	4a23      	ldr	r2, [pc, #140]	@ (8000cf0 <MX_USART3_UART_Init+0x94>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ca4:	4811      	ldr	r0, [pc, #68]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000ca6:	f005 fb27 	bl	80062f8 <HAL_UART_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cb0:	f000 f9c6 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	480d      	ldr	r0, [pc, #52]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000cb8:	f006 f8c2 	bl	8006e40 <HAL_UARTEx_SetTxFifoThreshold>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cc2:	f000 f9bd 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4808      	ldr	r0, [pc, #32]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000cca:	f006 f8f7 	bl	8006ebc <HAL_UARTEx_SetRxFifoThreshold>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cd4:	f000 f9b4 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <MX_USART3_UART_Init+0x90>)
 8000cda:	f006 f878 	bl	8006dce <HAL_UARTEx_DisableFifoMode>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ce4:	f000 f9ac 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000494 	.word	0x20000494
 8000cf0:	40004800 	.word	0x40004800

08000cf4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	@ 0x30
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1a:	4b96      	ldr	r3, [pc, #600]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	4a95      	ldr	r2, [pc, #596]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d20:	f043 0310 	orr.w	r3, r3, #16
 8000d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d26:	4b93      	ldr	r3, [pc, #588]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b90      	ldr	r3, [pc, #576]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	4a8f      	ldr	r2, [pc, #572]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4a:	4b8a      	ldr	r3, [pc, #552]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	4a89      	ldr	r2, [pc, #548]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d56:	4b87      	ldr	r3, [pc, #540]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b84      	ldr	r3, [pc, #528]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	4a83      	ldr	r2, [pc, #524]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6e:	4b81      	ldr	r3, [pc, #516]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b7e      	ldr	r3, [pc, #504]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	4a7d      	ldr	r2, [pc, #500]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d86:	4b7b      	ldr	r3, [pc, #492]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	4b78      	ldr	r3, [pc, #480]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	4a77      	ldr	r2, [pc, #476]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9e:	4b75      	ldr	r3, [pc, #468]	@ (8000f74 <MX_GPIO_Init+0x270>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f240 1105 	movw	r1, #261	@ 0x105
 8000db0:	4871      	ldr	r0, [pc, #452]	@ (8000f78 <MX_GPIO_Init+0x274>)
 8000db2:	f002 fc33 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000db6:	2200      	movs	r2, #0
 8000db8:	f248 111c 	movw	r1, #33052	@ 0x811c
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc0:	f002 fc2c 	bl	800361c <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000dca:	486c      	ldr	r0, [pc, #432]	@ (8000f7c <MX_GPIO_Init+0x278>)
 8000dcc:	f002 fc26 	bl	800361c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f242 0183 	movw	r1, #8323	@ 0x2083
 8000dd6:	486a      	ldr	r0, [pc, #424]	@ (8000f80 <MX_GPIO_Init+0x27c>)
 8000dd8:	f002 fc20 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000de2:	4868      	ldr	r0, [pc, #416]	@ (8000f84 <MX_GPIO_Init+0x280>)
 8000de4:	f002 fc1a 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000de8:	f240 1305 	movw	r3, #261	@ 0x105
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	485d      	ldr	r0, [pc, #372]	@ (8000f78 <MX_GPIO_Init+0x274>)
 8000e02:	f002 fa79 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e06:	237a      	movs	r3, #122	@ 0x7a
 8000e08:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4857      	ldr	r0, [pc, #348]	@ (8000f78 <MX_GPIO_Init+0x274>)
 8000e1c:	f002 fa6c 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e20:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4853      	ldr	r0, [pc, #332]	@ (8000f84 <MX_GPIO_Init+0x280>)
 8000e38:	f002 fa5e 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000e3c:	f248 131c 	movw	r3, #33052	@ 0x811c
 8000e40:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e58:	f002 fa4e 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4842      	ldr	r0, [pc, #264]	@ (8000f7c <MX_GPIO_Init+0x278>)
 8000e72:	f002 fa41 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	483a      	ldr	r0, [pc, #232]	@ (8000f7c <MX_GPIO_Init+0x278>)
 8000e92:	f002 fa31 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e96:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000e9a:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	4833      	ldr	r0, [pc, #204]	@ (8000f7c <MX_GPIO_Init+0x278>)
 8000eb0:	f002 fa22 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000eb4:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8000eb8:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	482d      	ldr	r0, [pc, #180]	@ (8000f80 <MX_GPIO_Init+0x27c>)
 8000ecc:	f002 fa14 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000ed0:	f242 0383 	movw	r3, #8323	@ 0x2083
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4825      	ldr	r0, [pc, #148]	@ (8000f80 <MX_GPIO_Init+0x27c>)
 8000eea:	f002 fa05 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000eee:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	481f      	ldr	r0, [pc, #124]	@ (8000f84 <MX_GPIO_Init+0x280>)
 8000f08:	f002 f9f6 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f24:	f002 f9e8 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f28:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f002 f9d6 	bl	80032f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2017      	movs	r0, #23
 8000f52:	f002 f88e 	bl	8003072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f56:	2017      	movs	r0, #23
 8000f58:	f002 f8a7 	bl	80030aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2028      	movs	r0, #40	@ 0x28
 8000f62:	f002 f886 	bl	8003072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f66:	2028      	movs	r0, #40	@ 0x28
 8000f68:	f002 f89f 	bl	80030aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6c:	bf00      	nop
 8000f6e:	3730      	adds	r7, #48	@ 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48001000 	.word	0x48001000
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	48000c00 	.word	0x48000c00
 8000f84:	48000800 	.word	0x48000800

08000f88 <HAL_GPIO_EXTI_Callback>:
uint32_t adc_result = 0;
volatile uint8_t adc_sampling_1000hz = 1; // 1 when 1000hz
uint8_t sampling_rate_divider = 0; // flip every time the timer trigger to split the frequency in two for 1000hz mode

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f98:	d10a      	bne.n	8000fb0 <HAL_GPIO_EXTI_Callback+0x28>
	  adc_sampling_1000hz = !adc_sampling_1000hz;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HAL_GPIO_EXTI_Callback+0x34>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf0c      	ite	eq
 8000fa4:	2301      	moveq	r3, #1
 8000fa6:	2300      	movne	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <HAL_GPIO_EXTI_Callback+0x34>)
 8000fae:	701a      	strb	r2, [r3, #0]
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000000 	.word	0x20000000

08000fc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if (htim == &htim16 )
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a0e      	ldr	r2, [pc, #56]	@ (8001004 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d115      	bne.n	8000ffc <HAL_TIM_PeriodElapsedCallback+0x3c>
  {
	  sampling_rate_divider = !sampling_rate_divider;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fe2:	701a      	strb	r2, [r3, #0]

	  if(!adc_sampling_1000hz || sampling_rate_divider)
 8000fe4:	4b09      	ldr	r3, [pc, #36]	@ (800100c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x36>
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <HAL_TIM_PeriodElapsedCallback+0x3c>
	  {
		  HAL_ADC_Start_IT(&hadc1);
 8000ff6:	4806      	ldr	r0, [pc, #24]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ff8:	f001 f822 	bl	8002040 <HAL_ADC_Start_IT>
	  }
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000028c 	.word	0x2000028c
 8001008:	2000052c 	.word	0x2000052c
 800100c:	20000000 	.word	0x20000000
 8001010:	2000002c 	.word	0x2000002c

08001014 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* h)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

	if(h == &hadc1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <HAL_ADC_ConvCpltCallback+0x24>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d105      	bne.n	8001030 <HAL_ADC_ConvCpltCallback+0x1c>
	{
		adc_result = HAL_ADC_GetValue(&hadc1);
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <HAL_ADC_ConvCpltCallback+0x24>)
 8001026:	f001 f8bf 	bl	80021a8 <HAL_ADC_GetValue>
 800102a:	4603      	mov	r3, r0
 800102c:	4a03      	ldr	r2, [pc, #12]	@ (800103c <HAL_ADC_ConvCpltCallback+0x28>)
 800102e:	6013      	str	r3, [r2, #0]
	}
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000002c 	.word	0x2000002c
 800103c:	20000528 	.word	0x20000528

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <Error_Handler+0x8>

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_MspInit+0x44>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001056:	4a0e      	ldr	r2, [pc, #56]	@ (8001090 <HAL_MspInit+0x44>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6613      	str	r3, [r2, #96]	@ 0x60
 800105e:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <HAL_MspInit+0x44>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <HAL_MspInit+0x44>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106e:	4a08      	ldr	r2, [pc, #32]	@ (8001090 <HAL_MspInit+0x44>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001074:	6593      	str	r3, [r2, #88]	@ 0x58
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_MspInit+0x44>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a19      	ldr	r2, [pc, #100]	@ (8001118 <HAL_ADC_MspInit+0x84>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d12b      	bne.n	800110e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010b6:	4b19      	ldr	r3, [pc, #100]	@ (800111c <HAL_ADC_MspInit+0x88>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	4a18      	ldr	r2, [pc, #96]	@ (800111c <HAL_ADC_MspInit+0x88>)
 80010bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0x88>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_ADC_MspInit+0x88>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	4a12      	ldr	r2, [pc, #72]	@ (800111c <HAL_ADC_MspInit+0x88>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <HAL_ADC_MspInit+0x88>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80010e6:	233f      	movs	r3, #63	@ 0x3f
 80010e8:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ea:	230b      	movs	r3, #11
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4809      	ldr	r0, [pc, #36]	@ (8001120 <HAL_ADC_MspInit+0x8c>)
 80010fa:	f002 f8fd 	bl	80032f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2012      	movs	r0, #18
 8001104:	f001 ffb5 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001108:	2012      	movs	r0, #18
 800110a:	f001 ffce 	bl	80030aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	50040000 	.word	0x50040000
 800111c:	40021000 	.word	0x40021000
 8001120:	48000800 	.word	0x48000800

08001124 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0ae      	sub	sp, #184	@ 0xb8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2294      	movs	r2, #148	@ 0x94
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f005 ff45 	bl	8006fd4 <memset>
  if(DFSDM1_Init == 0)
 800114a:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d142      	bne.n	80011d8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001152:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001156:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	4618      	mov	r0, r3
 8001164:	f004 f842 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800116e:	f7ff ff67 	bl	8001040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001172:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	4a1b      	ldr	r2, [pc, #108]	@ (80011e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001178:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800117c:	6613      	str	r3, [r2, #96]	@ 0x60
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001182:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	4a15      	ldr	r2, [pc, #84]	@ (80011e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001190:	f043 0310 	orr.w	r3, r3, #16
 8001194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80011a2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80011a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80011bc:	2306      	movs	r3, #6
 80011be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4807      	ldr	r0, [pc, #28]	@ (80011e8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80011ca:	f002 f895 	bl	80032f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	4a02      	ldr	r2, [pc, #8]	@ (80011e0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011d6:	6013      	str	r3, [r2, #0]
  }

}
 80011d8:	bf00      	nop
 80011da:	37b8      	adds	r7, #184	@ 0xb8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000530 	.word	0x20000530
 80011e4:	40021000 	.word	0x40021000
 80011e8:	48001000 	.word	0x48001000

080011ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0b0      	sub	sp, #192	@ 0xc0
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	2294      	movs	r2, #148	@ 0x94
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f005 fee1 	bl	8006fd4 <memset>
  if(hi2c->Instance==I2C1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a42      	ldr	r2, [pc, #264]	@ (8001320 <HAL_I2C_MspInit+0x134>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d13c      	bne.n	8001296 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800121c:	2340      	movs	r3, #64	@ 0x40
 800121e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001220:	2300      	movs	r3, #0
 8001222:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	4618      	mov	r0, r3
 800122a:	f003 ffdf 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001234:	f7ff ff04 	bl	8001040 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	4b3a      	ldr	r3, [pc, #232]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123c:	4a39      	ldr	r2, [pc, #228]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 800123e:	f043 0302 	orr.w	r3, r3, #2
 8001242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001244:	4b37      	ldr	r3, [pc, #220]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001250:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001254:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001258:	2312      	movs	r3, #18
 800125a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125e:	2301      	movs	r3, #1
 8001260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800126a:	2304      	movs	r3, #4
 800126c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001274:	4619      	mov	r1, r3
 8001276:	482c      	ldr	r0, [pc, #176]	@ (8001328 <HAL_I2C_MspInit+0x13c>)
 8001278:	f002 f83e 	bl	80032f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127c:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001280:	4a28      	ldr	r2, [pc, #160]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 8001282:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001286:	6593      	str	r3, [r2, #88]	@ 0x58
 8001288:	4b26      	ldr	r3, [pc, #152]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 800128a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001294:	e040      	b.n	8001318 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a24      	ldr	r2, [pc, #144]	@ (800132c <HAL_I2C_MspInit+0x140>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d13b      	bne.n	8001318 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a8:	f107 0318 	add.w	r3, r7, #24
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 ff9d 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80012b8:	f7ff fec2 	bl	8001040 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c0:	4a18      	ldr	r2, [pc, #96]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80012d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012ee:	2304      	movs	r3, #4
 80012f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012f8:	4619      	mov	r1, r3
 80012fa:	480b      	ldr	r0, [pc, #44]	@ (8001328 <HAL_I2C_MspInit+0x13c>)
 80012fc:	f001 fffc 	bl	80032f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001304:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 8001306:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800130a:	6593      	str	r3, [r2, #88]	@ 0x58
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <HAL_I2C_MspInit+0x138>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
}
 8001318:	bf00      	nop
 800131a:	37c0      	adds	r7, #192	@ 0xc0
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40005400 	.word	0x40005400
 8001324:	40021000 	.word	0x40021000
 8001328:	48000400 	.word	0x48000400
 800132c:	40005800 	.word	0x40005800

08001330 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0b0      	sub	sp, #192	@ 0xc0
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	2294      	movs	r2, #148	@ 0x94
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f005 fe3f 	bl	8006fd4 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a28      	ldr	r2, [pc, #160]	@ (80013fc <HAL_OSPI_MspInit+0xcc>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d149      	bne.n	80013f4 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001360:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001364:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	4618      	mov	r0, r3
 8001372:	f003 ff3b 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800137c:	f7ff fe60 	bl	8001040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <HAL_OSPI_MspInit+0xd0>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001384:	4a1e      	ldr	r2, [pc, #120]	@ (8001400 <HAL_OSPI_MspInit+0xd0>)
 8001386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800138a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138c:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <HAL_OSPI_MspInit+0xd0>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001398:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <HAL_OSPI_MspInit+0xd0>)
 800139a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800139c:	4a18      	ldr	r2, [pc, #96]	@ (8001400 <HAL_OSPI_MspInit+0xd0>)
 800139e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80013a4:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <HAL_OSPI_MspInit+0xd0>)
 80013a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <HAL_OSPI_MspInit+0xd0>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <HAL_OSPI_MspInit+0xd0>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013bc:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <HAL_OSPI_MspInit+0xd0>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80013c8:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80013cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013e2:	230a      	movs	r3, #10
 80013e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013ec:	4619      	mov	r1, r3
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <HAL_OSPI_MspInit+0xd4>)
 80013f0:	f001 ff82 	bl	80032f8 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 80013f4:	bf00      	nop
 80013f6:	37c0      	adds	r7, #192	@ 0xc0
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	a0001000 	.word	0xa0001000
 8001400:	40021000 	.word	0x40021000
 8001404:	48001000 	.word	0x48001000

08001408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	@ 0x30
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a2f      	ldr	r2, [pc, #188]	@ (80014e4 <HAL_SPI_MspInit+0xdc>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d129      	bne.n	800147e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800142a:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142e:	4a2e      	ldr	r2, [pc, #184]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 8001430:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001434:	6613      	str	r3, [r2, #96]	@ 0x60
 8001436:	4b2c      	ldr	r3, [pc, #176]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b29      	ldr	r3, [pc, #164]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	4a28      	ldr	r2, [pc, #160]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144e:	4b26      	ldr	r3, [pc, #152]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800145a:	23e0      	movs	r3, #224	@ 0xe0
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800146a:	2305      	movs	r3, #5
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001478:	f001 ff3e 	bl	80032f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800147c:	e02d      	b.n	80014da <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a1a      	ldr	r2, [pc, #104]	@ (80014ec <HAL_SPI_MspInit+0xe4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d128      	bne.n	80014da <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001488:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 800148a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148c:	4a16      	ldr	r2, [pc, #88]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 800148e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001492:	6593      	str	r3, [r2, #88]	@ 0x58
 8001494:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a4:	4a10      	ldr	r2, [pc, #64]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <HAL_SPI_MspInit+0xe0>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80014b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ca:	2306      	movs	r3, #6
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <HAL_SPI_MspInit+0xe8>)
 80014d6:	f001 ff0f 	bl	80032f8 <HAL_GPIO_Init>
}
 80014da:	bf00      	nop
 80014dc:	3730      	adds	r7, #48	@ 0x30
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40013000 	.word	0x40013000
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40003c00 	.word	0x40003c00
 80014f0:	48000800 	.word	0x48000800

080014f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0d      	ldr	r2, [pc, #52]	@ (8001538 <HAL_TIM_Base_MspInit+0x44>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d113      	bne.n	800152e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <HAL_TIM_Base_MspInit+0x48>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <HAL_TIM_Base_MspInit+0x48>)
 800150c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001510:	6613      	str	r3, [r2, #96]	@ 0x60
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_TIM_Base_MspInit+0x48>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2019      	movs	r0, #25
 8001524:	f001 fda5 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001528:	2019      	movs	r0, #25
 800152a:	f001 fdbe 	bl	80030aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40014400 	.word	0x40014400
 800153c:	40021000 	.word	0x40021000

08001540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0b4      	sub	sp, #208	@ 0xd0
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001558:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155c:	2294      	movs	r2, #148	@ 0x94
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f005 fd37 	bl	8006fd4 <memset>
  if(huart->Instance==UART4)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a83      	ldr	r2, [pc, #524]	@ (8001778 <HAL_UART_MspInit+0x238>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d13c      	bne.n	80015ea <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001570:	2308      	movs	r3, #8
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001574:	2300      	movs	r3, #0
 8001576:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001578:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fe35 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001588:	f7ff fd5a 	bl	8001040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800158c:	4b7b      	ldr	r3, [pc, #492]	@ (800177c <HAL_UART_MspInit+0x23c>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001590:	4a7a      	ldr	r2, [pc, #488]	@ (800177c <HAL_UART_MspInit+0x23c>)
 8001592:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001596:	6593      	str	r3, [r2, #88]	@ 0x58
 8001598:	4b78      	ldr	r3, [pc, #480]	@ (800177c <HAL_UART_MspInit+0x23c>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b75      	ldr	r3, [pc, #468]	@ (800177c <HAL_UART_MspInit+0x23c>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a8:	4a74      	ldr	r2, [pc, #464]	@ (800177c <HAL_UART_MspInit+0x23c>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b0:	4b72      	ldr	r3, [pc, #456]	@ (800177c <HAL_UART_MspInit+0x23c>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	623b      	str	r3, [r7, #32]
 80015ba:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80015bc:	2303      	movs	r3, #3
 80015be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015d4:	2308      	movs	r3, #8
 80015d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e4:	f001 fe88 	bl	80032f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015e8:	e0c2      	b.n	8001770 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a64      	ldr	r2, [pc, #400]	@ (8001780 <HAL_UART_MspInit+0x240>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d13b      	bne.n	800166c <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015f8:	2300      	movs	r3, #0
 80015fa:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fdf3 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800160c:	f7ff fd18 	bl	8001040 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001610:	4b5a      	ldr	r3, [pc, #360]	@ (800177c <HAL_UART_MspInit+0x23c>)
 8001612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001614:	4a59      	ldr	r2, [pc, #356]	@ (800177c <HAL_UART_MspInit+0x23c>)
 8001616:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800161a:	6613      	str	r3, [r2, #96]	@ 0x60
 800161c:	4b57      	ldr	r3, [pc, #348]	@ (800177c <HAL_UART_MspInit+0x23c>)
 800161e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b54      	ldr	r3, [pc, #336]	@ (800177c <HAL_UART_MspInit+0x23c>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162c:	4a53      	ldr	r2, [pc, #332]	@ (800177c <HAL_UART_MspInit+0x23c>)
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001634:	4b51      	ldr	r3, [pc, #324]	@ (800177c <HAL_UART_MspInit+0x23c>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001640:	23c0      	movs	r3, #192	@ 0xc0
 8001642:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001658:	2307      	movs	r3, #7
 800165a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001662:	4619      	mov	r1, r3
 8001664:	4847      	ldr	r0, [pc, #284]	@ (8001784 <HAL_UART_MspInit+0x244>)
 8001666:	f001 fe47 	bl	80032f8 <HAL_GPIO_Init>
}
 800166a:	e081      	b.n	8001770 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a45      	ldr	r2, [pc, #276]	@ (8001788 <HAL_UART_MspInit+0x248>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d13b      	bne.n	80016ee <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001676:	2302      	movs	r3, #2
 8001678:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800167a:	2300      	movs	r3, #0
 800167c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fdb2 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_UART_MspInit+0x152>
      Error_Handler();
 800168e:	f7ff fcd7 	bl	8001040 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001692:	4b3a      	ldr	r3, [pc, #232]	@ (800177c <HAL_UART_MspInit+0x23c>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	4a39      	ldr	r2, [pc, #228]	@ (800177c <HAL_UART_MspInit+0x23c>)
 8001698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800169c:	6593      	str	r3, [r2, #88]	@ 0x58
 800169e:	4b37      	ldr	r3, [pc, #220]	@ (800177c <HAL_UART_MspInit+0x23c>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016aa:	4b34      	ldr	r3, [pc, #208]	@ (800177c <HAL_UART_MspInit+0x23c>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	4a33      	ldr	r2, [pc, #204]	@ (800177c <HAL_UART_MspInit+0x23c>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b6:	4b31      	ldr	r3, [pc, #196]	@ (800177c <HAL_UART_MspInit+0x23c>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80016c2:	2378      	movs	r3, #120	@ 0x78
 80016c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016da:	2307      	movs	r3, #7
 80016dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80016e4:	4619      	mov	r1, r3
 80016e6:	4829      	ldr	r0, [pc, #164]	@ (800178c <HAL_UART_MspInit+0x24c>)
 80016e8:	f001 fe06 	bl	80032f8 <HAL_GPIO_Init>
}
 80016ec:	e040      	b.n	8001770 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a27      	ldr	r2, [pc, #156]	@ (8001790 <HAL_UART_MspInit+0x250>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d13b      	bne.n	8001770 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016f8:	2304      	movs	r3, #4
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001700:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fd71 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001710:	f7ff fc96 	bl	8001040 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_UART_MspInit+0x23c>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001718:	4a18      	ldr	r2, [pc, #96]	@ (800177c <HAL_UART_MspInit+0x23c>)
 800171a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800171e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_UART_MspInit+0x23c>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172c:	4b13      	ldr	r3, [pc, #76]	@ (800177c <HAL_UART_MspInit+0x23c>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001730:	4a12      	ldr	r2, [pc, #72]	@ (800177c <HAL_UART_MspInit+0x23c>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001738:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_UART_MspInit+0x23c>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001744:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001748:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800175e:	2307      	movs	r3, #7
 8001760:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001764:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001768:	4619      	mov	r1, r3
 800176a:	4808      	ldr	r0, [pc, #32]	@ (800178c <HAL_UART_MspInit+0x24c>)
 800176c:	f001 fdc4 	bl	80032f8 <HAL_GPIO_Init>
}
 8001770:	bf00      	nop
 8001772:	37d0      	adds	r7, #208	@ 0xd0
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40004c00 	.word	0x40004c00
 800177c:	40021000 	.word	0x40021000
 8001780:	40013800 	.word	0x40013800
 8001784:	48000400 	.word	0x48000400
 8001788:	40004400 	.word	0x40004400
 800178c:	48000c00 	.word	0x48000c00
 8001790:	40004800 	.word	0x40004800

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ea:	f000 f8d5 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <ADC1_IRQHandler+0x10>)
 80017fa:	f000 fce2 	bl	80021c2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000002c 	.word	0x2000002c

08001808 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800180c:	2020      	movs	r0, #32
 800180e:	f001 ff1d 	bl	800364c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001812:	2040      	movs	r0, #64	@ 0x40
 8001814:	f001 ff1a 	bl	800364c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001818:	2080      	movs	r0, #128	@ 0x80
 800181a:	f001 ff17 	bl	800364c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800181e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001822:	f001 ff13 	bl	800364c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001832:	f004 fb6d 	bl	8005f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000028c 	.word	0x2000028c

08001840 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001844:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001848:	f001 ff00 	bl	800364c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800184c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001850:	f001 fefc 	bl	800364c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001854:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001858:	f001 fef8 	bl	800364c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800185c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001860:	f001 fef4 	bl	800364c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001864:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001868:	f001 fef0 	bl	800364c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800186c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001870:	f001 feec 	bl	800364c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	@ (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a0:	f7ff ffea 	bl	8001878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a4:	480c      	ldr	r0, [pc, #48]	@ (80018d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018a6:	490d      	ldr	r1, [pc, #52]	@ (80018dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80018a8:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <LoopForever+0xe>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018bc:	4c0a      	ldr	r4, [pc, #40]	@ (80018e8 <LoopForever+0x16>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ca:	f005 fb8b 	bl	8006fe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ce:	f7fe fe0d 	bl	80004ec <main>

080018d2 <LoopForever>:

LoopForever:
    b LoopForever
 80018d2:	e7fe      	b.n	80018d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018d4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80018e0:	080070c4 	.word	0x080070c4
  ldr r2, =_sbss
 80018e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80018e8:	2000055c 	.word	0x2000055c

080018ec <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <AES_IRQHandler>

080018ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f001 fbaf 	bl	800305c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018fe:	2000      	movs	r0, #0
 8001900:	f000 f80e 	bl	8001920 <HAL_InitTick>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	71fb      	strb	r3, [r7, #7]
 800190e:	e001      	b.n	8001914 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001910:	f7ff fb9c 	bl	800104c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001914:	79fb      	ldrb	r3, [r7, #7]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800192c:	4b17      	ldr	r3, [pc, #92]	@ (800198c <HAL_InitTick+0x6c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d023      	beq.n	800197c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001934:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <HAL_InitTick+0x70>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b14      	ldr	r3, [pc, #80]	@ (800198c <HAL_InitTick+0x6c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f001 fbbb 	bl	80030c6 <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10f      	bne.n	8001976 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d809      	bhi.n	8001970 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f001 fb85 	bl	8003072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001968:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <HAL_InitTick+0x74>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e007      	b.n	8001980 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e004      	b.n	8001980 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
 800197a:	e001      	b.n	8001980 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000000c 	.word	0x2000000c
 8001990:	20000004 	.word	0x20000004
 8001994:	20000008 	.word	0x20000008

08001998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	2000000c 	.word	0x2000000c
 80019bc:	20000534 	.word	0x20000534

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000534 	.word	0x20000534

080019d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	609a      	str	r2, [r3, #8]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	609a      	str	r2, [r3, #8]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3360      	adds	r3, #96	@ 0x60
 8001a52:	461a      	mov	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <LL_ADC_SetOffset+0x44>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	03fff000 	.word	0x03fff000

08001a88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3360      	adds	r3, #96	@ 0x60
 8001a96:	461a      	mov	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3360      	adds	r3, #96	@ 0x60
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ade:	bf00      	nop
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	615a      	str	r2, [r3, #20]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b087      	sub	sp, #28
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3330      	adds	r3, #48	@ 0x30
 8001b46:	461a      	mov	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	0a1b      	lsrs	r3, r3, #8
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	4413      	add	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	211f      	movs	r1, #31
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	0e9b      	lsrs	r3, r3, #26
 8001b6e:	f003 011f 	and.w	r1, r3, #31
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3314      	adds	r3, #20
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	0e5b      	lsrs	r3, r3, #25
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	4413      	add	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	0d1b      	lsrs	r3, r3, #20
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	2107      	movs	r1, #7
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	401a      	ands	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	0d1b      	lsrs	r3, r3, #20
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c24:	43db      	mvns	r3, r3
 8001c26:	401a      	ands	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0318 	and.w	r3, r3, #24
 8001c2e:	4908      	ldr	r1, [pc, #32]	@ (8001c50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c30:	40d9      	lsrs	r1, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	400b      	ands	r3, r1
 8001c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	0007ffff 	.word	0x0007ffff

08001c54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6093      	str	r3, [r2, #8]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c8c:	d101      	bne.n	8001c92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cb4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cdc:	d101      	bne.n	8001ce2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <LL_ADC_IsEnabled+0x18>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <LL_ADC_IsEnabled+0x1a>
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d52:	f043 0204 	orr.w	r2, r3, #4
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d101      	bne.n	8001d7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e129      	b.n	8002022 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff f959 	bl	8001094 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff3f 	bl	8001c78 <LL_ADC_IsDeepPowerDownEnabled>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff25 	bl	8001c54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff5a 	bl	8001cc8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d115      	bne.n	8001e46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff3e 	bl	8001ca0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e24:	4b81      	ldr	r3, [pc, #516]	@ (800202c <HAL_ADC_Init+0x278>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	4a81      	ldr	r2, [pc, #516]	@ (8002030 <HAL_ADC_Init+0x27c>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	3301      	adds	r3, #1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e38:	e002      	b.n	8001e40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f9      	bne.n	8001e3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff3c 	bl	8001cc8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	f043 0210 	orr.w	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff75 	bl	8001d66 <LL_ADC_REG_IsConversionOngoing>
 8001e7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 80c2 	bne.w	8002010 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 80be 	bne.w	8002010 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e9c:	f043 0202 	orr.w	r2, r3, #2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff35 	bl	8001d18 <LL_ADC_IsEnabled>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb4:	485f      	ldr	r0, [pc, #380]	@ (8002034 <HAL_ADC_Init+0x280>)
 8001eb6:	f7ff ff2f 	bl	8001d18 <LL_ADC_IsEnabled>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	485c      	ldr	r0, [pc, #368]	@ (8002038 <HAL_ADC_Init+0x284>)
 8001ec8:	f7ff fd86 	bl	80019d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e5b      	ldrb	r3, [r3, #25]
 8001ed0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ed6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001edc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ee2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d106      	bne.n	8001f08 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	3b01      	subs	r3, #1
 8001f00:	045b      	lsls	r3, r3, #17
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f14:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	4b44      	ldr	r3, [pc, #272]	@ (800203c <HAL_ADC_Init+0x288>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	69b9      	ldr	r1, [r7, #24]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff25 	bl	8001d8c <LL_ADC_INJ_IsConversionOngoing>
 8001f42:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d140      	bne.n	8001fcc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d13d      	bne.n	8001fcc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7e1b      	ldrb	r3, [r3, #24]
 8001f58:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f5a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f62:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f72:	f023 0306 	bic.w	r3, r3, #6
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d118      	bne.n	8001fbc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fa6:	4311      	orrs	r1, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fac:	430a      	orrs	r2, r1
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	611a      	str	r2, [r3, #16]
 8001fba:	e007      	b.n	8001fcc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d10c      	bne.n	8001fee <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f023 010f 	bic.w	r1, r3, #15
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	1e5a      	subs	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fec:	e007      	b.n	8001ffe <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 020f 	bic.w	r2, r2, #15
 8001ffc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	659a      	str	r2, [r3, #88]	@ 0x58
 800200e:	e007      	b.n	8002020 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	f043 0210 	orr.w	r2, r3, #16
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002020:	7ffb      	ldrb	r3, [r7, #31]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000004 	.word	0x20000004
 8002030:	053e2d63 	.word	0x053e2d63
 8002034:	50040000 	.word	0x50040000
 8002038:	50040300 	.word	0x50040300
 800203c:	fff0c007 	.word	0xfff0c007

08002040 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fe8a 	bl	8001d66 <LL_ADC_REG_IsConversionOngoing>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 80a0 	bne.w	800219a <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_ADC_Start_IT+0x28>
 8002064:	2302      	movs	r3, #2
 8002066:	e09b      	b.n	80021a0 <HAL_ADC_Start_IT+0x160>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fe6b 	bl	8002d4c <ADC_Enable>
 8002076:	4603      	mov	r3, r0
 8002078:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f040 8087 	bne.w	8002190 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800208a:	f023 0301 	bic.w	r3, r3, #1
 800208e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	f023 0206 	bic.w	r2, r3, #6
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020ae:	e002      	b.n	80020b6 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	221c      	movs	r2, #28
 80020bc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 021c 	bic.w	r2, r2, #28
 80020d4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d108      	bne.n	80020f0 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0208 	orr.w	r2, r2, #8
 80020ec:	605a      	str	r2, [r3, #4]
          break;
 80020ee:	e008      	b.n	8002102 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0204 	orr.w	r2, r2, #4
 80020fe:	605a      	str	r2, [r3, #4]
          break;
 8002100:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002106:	2b00      	cmp	r3, #0
 8002108:	d107      	bne.n	800211a <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0210 	orr.w	r2, r2, #16
 8002118:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d02d      	beq.n	8002184 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002130:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d110      	bne.n	8002162 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0220 	bic.w	r2, r2, #32
 800214e:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800215e:	605a      	str	r2, [r3, #4]
            break;
 8002160:	e010      	b.n	8002184 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002170:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0220 	orr.w	r2, r2, #32
 8002180:	605a      	str	r2, [r3, #4]
            break;
 8002182:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fdd8 	bl	8001d3e <LL_ADC_REG_StartConversion>
 800218e:	e006      	b.n	800219e <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002198:	e001      	b.n	800219e <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800219a:	2302      	movs	r3, #2
 800219c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b088      	sub	sp, #32
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d017      	beq.n	8002218 <HAL_ADC_IRQHandler+0x56>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d012      	beq.n	8002218 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d105      	bne.n	800220a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002202:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fe4c 	bl	8002ea8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2202      	movs	r2, #2
 8002216:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d004      	beq.n	800222c <HAL_ADC_IRQHandler+0x6a>
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d109      	bne.n	8002240 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002232:	2b00      	cmp	r3, #0
 8002234:	d05e      	beq.n	80022f4 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d059      	beq.n	80022f4 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002250:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fc57 	bl	8001b10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d03e      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d135      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b08      	cmp	r3, #8
 8002286:	d12e      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fd6a 	bl	8001d66 <LL_ADC_REG_IsConversionOngoing>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d11a      	bne.n	80022ce <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 020c 	bic.w	r2, r2, #12
 80022a6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d112      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80022cc:	e00b      	b.n	80022e6 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	f043 0210 	orr.w	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022de:	f043 0201 	orr.w	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fe94 	bl	8001014 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	220c      	movs	r2, #12
 80022f2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d004      	beq.n	8002308 <HAL_ADC_IRQHandler+0x146>
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800230e:	2b00      	cmp	r3, #0
 8002310:	d072      	beq.n	80023f8 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	d06d      	beq.n	80023f8 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	d105      	bne.n	8002334 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fc28 	bl	8001b8e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800233e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fbe3 	bl	8001b10 <LL_ADC_REG_IsTriggerSourceSWStart>
 800234a:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d047      	beq.n	80023ea <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_ADC_IRQHandler+0x1b2>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d03f      	beq.n	80023ea <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002370:	2b00      	cmp	r3, #0
 8002372:	d13a      	bne.n	80023ea <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800237e:	2b40      	cmp	r3, #64	@ 0x40
 8002380:	d133      	bne.n	80023ea <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d12e      	bne.n	80023ea <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fcfb 	bl	8001d8c <LL_ADC_INJ_IsConversionOngoing>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11a      	bne.n	80023d2 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023aa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d112      	bne.n	80023ea <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80023d0:	e00b      	b.n	80023ea <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	f043 0210 	orr.w	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fd34 	bl	8002e58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2260      	movs	r2, #96	@ 0x60
 80023f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d011      	beq.n	8002426 <HAL_ADC_IRQHandler+0x264>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002410:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f886 	bl	800252a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d012      	beq.n	8002456 <HAL_ADC_IRQHandler+0x294>
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00d      	beq.n	8002456 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fd1a 	bl	8002e80 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002454:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800245c:	2b00      	cmp	r3, #0
 800245e:	d012      	beq.n	8002486 <HAL_ADC_IRQHandler+0x2c4>
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00d      	beq.n	8002486 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fd0c 	bl	8002e94 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d02a      	beq.n	80024e6 <HAL_ADC_IRQHandler+0x324>
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d025      	beq.n	80024e6 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e008      	b.n	80024ba <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80024b6:	2301      	movs	r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10e      	bne.n	80024de <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d0:	f043 0202 	orr.w	r2, r3, #2
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f830 	bl	800253e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2210      	movs	r2, #16
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d018      	beq.n	8002522 <HAL_ADC_IRQHandler+0x360>
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d013      	beq.n	8002522 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250a:	f043 0208 	orr.w	r2, r3, #8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800251a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fca5 	bl	8002e6c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002522:	bf00      	nop
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0b6      	sub	sp, #216	@ 0xd8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x22>
 8002572:	2302      	movs	r3, #2
 8002574:	e3d5      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x7ce>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fbef 	bl	8001d66 <LL_ADC_REG_IsConversionOngoing>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 83ba 	bne.w	8002d04 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d824      	bhi.n	80025ea <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	3b02      	subs	r3, #2
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d81b      	bhi.n	80025e2 <HAL_ADC_ConfigChannel+0x8e>
 80025aa:	a201      	add	r2, pc, #4	@ (adr r2, 80025b0 <HAL_ADC_ConfigChannel+0x5c>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	080025c9 	.word	0x080025c9
 80025b8:	080025d1 	.word	0x080025d1
 80025bc:	080025d9 	.word	0x080025d9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80025c0:	230c      	movs	r3, #12
 80025c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025c6:	e010      	b.n	80025ea <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80025c8:	2312      	movs	r3, #18
 80025ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025ce:	e00c      	b.n	80025ea <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80025d0:	2318      	movs	r3, #24
 80025d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025d6:	e008      	b.n	80025ea <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80025d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025e0:	e003      	b.n	80025ea <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80025e2:	2306      	movs	r3, #6
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025e8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80025f8:	f7ff fa9d 	bl	8001b36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fbb0 	bl	8001d66 <LL_ADC_REG_IsConversionOngoing>
 8002606:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fbbc 	bl	8001d8c <LL_ADC_INJ_IsConversionOngoing>
 8002614:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002618:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 81bf 	bne.w	80029a0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002622:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 81ba 	bne.w	80029a0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002634:	d10f      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	4619      	mov	r1, r3
 8002642:	f7ff fab7 	bl	8001bb4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fa4b 	bl	8001aea <LL_ADC_SetSamplingTimeCommonConfig>
 8002654:	e00e      	b.n	8002674 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	461a      	mov	r2, r3
 8002664:	f7ff faa6 	bl	8001bb4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fa3b 	bl	8001aea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b04      	cmp	r3, #4
 8002694:	d00a      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6919      	ldr	r1, [r3, #16]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026a6:	f7ff f9cb 	bl	8001a40 <LL_ADC_SetOffset>
 80026aa:	e179      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff f9e8 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x184>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff f9dd 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	f003 021f 	and.w	r2, r3, #31
 80026d6:	e01e      	b.n	8002716 <HAL_ADC_ConfigChannel+0x1c2>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f9d2 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002706:	2320      	movs	r3, #32
 8002708:	e004      	b.n	8002714 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800270a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <HAL_ADC_ConfigChannel+0x1da>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	e018      	b.n	8002760 <HAL_ADC_ConfigChannel+0x20c>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002746:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800274a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002752:	2320      	movs	r3, #32
 8002754:	e004      	b.n	8002760 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002756:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002760:	429a      	cmp	r2, r3
 8002762:	d106      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2200      	movs	r2, #0
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff f9a1 	bl	8001ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2101      	movs	r1, #1
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff f985 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 800277e:	4603      	mov	r3, r0
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <HAL_ADC_ConfigChannel+0x24a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2101      	movs	r1, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff f97a 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	0e9b      	lsrs	r3, r3, #26
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	e01e      	b.n	80027dc <HAL_ADC_ConfigChannel+0x288>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2101      	movs	r1, #1
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff f96f 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80027bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80027cc:	2320      	movs	r3, #32
 80027ce:	e004      	b.n	80027da <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80027d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x2a0>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	0e9b      	lsrs	r3, r3, #26
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	e018      	b.n	8002826 <HAL_ADC_ConfigChannel+0x2d2>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002808:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800280c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002810:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002818:	2320      	movs	r3, #32
 800281a:	e004      	b.n	8002826 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800281c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002826:	429a      	cmp	r2, r3
 8002828:	d106      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	2101      	movs	r1, #1
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff f93e 	bl	8001ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2102      	movs	r1, #2
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff f922 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10a      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x310>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2102      	movs	r1, #2
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff f917 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	f003 021f 	and.w	r2, r3, #31
 8002862:	e01e      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x34e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2102      	movs	r1, #2
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f90c 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002882:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002886:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800288a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e004      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x366>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	0e9b      	lsrs	r3, r3, #26
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	e014      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x390>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80028d6:	2320      	movs	r3, #32
 80028d8:	e004      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80028da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d106      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2102      	movs	r1, #2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff f8df 	bl	8001ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2103      	movs	r1, #3
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff f8c3 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002902:	4603      	mov	r3, r0
 8002904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x3ce>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2103      	movs	r1, #3
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f8b8 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	e017      	b.n	8002952 <HAL_ADC_ConfigChannel+0x3fe>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2103      	movs	r1, #3
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff f8ad 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800293a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800293c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800293e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e003      	b.n	8002950 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_ADC_ConfigChannel+0x416>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	e011      	b.n	800298e <HAL_ADC_ConfigChannel+0x43a>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800297a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800297c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002982:	2320      	movs	r3, #32
 8002984:	e003      	b.n	800298e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800298e:	429a      	cmp	r2, r3
 8002990:	d106      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	2103      	movs	r1, #3
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff f88a 	bl	8001ab4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f9b7 	bl	8001d18 <LL_ADC_IsEnabled>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 813f 	bne.w	8002c30 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	461a      	mov	r2, r3
 80029c0:	f7ff f924 	bl	8001c0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a8e      	ldr	r2, [pc, #568]	@ (8002c04 <HAL_ADC_ConfigChannel+0x6b0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	f040 8130 	bne.w	8002c30 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x4a4>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	3301      	adds	r3, #1
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	bf94      	ite	ls
 80029f0:	2301      	movls	r3, #1
 80029f2:	2300      	movhi	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e019      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x4d8>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002a10:	2320      	movs	r3, #32
 8002a12:	e003      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002a14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2b09      	cmp	r3, #9
 8002a24:	bf94      	ite	ls
 8002a26:	2301      	movls	r3, #1
 8002a28:	2300      	movhi	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d079      	beq.n	8002b24 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x4f8>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	3301      	adds	r3, #1
 8002a44:	069b      	lsls	r3, r3, #26
 8002a46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a4a:	e015      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x524>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e003      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x544>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	e017      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x574>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aa8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e003      	b.n	8002abc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	ea42 0103 	orr.w	r1, r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x59a>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	051b      	lsls	r3, r3, #20
 8002aec:	e018      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x5cc>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e003      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b20:	430b      	orrs	r3, r1
 8002b22:	e080      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x5ec>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0e9b      	lsrs	r3, r3, #26
 8002b36:	3301      	adds	r3, #1
 8002b38:	069b      	lsls	r3, r3, #26
 8002b3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b3e:	e015      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x618>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e003      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x638>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	e017      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x668>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	61bb      	str	r3, [r7, #24]
  return result;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	e003      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	ea42 0103 	orr.w	r1, r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x694>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0e9b      	lsrs	r3, r3, #26
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	3b1e      	subs	r3, #30
 8002be0:	051b      	lsls	r3, r3, #20
 8002be2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	e01d      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x6d0>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	60fb      	str	r3, [r7, #12]
  return result;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d103      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e005      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x6bc>
 8002c04:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f003 021f 	and.w	r2, r3, #31
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3b1e      	subs	r3, #30
 8002c1e:	051b      	lsls	r3, r3, #20
 8002c20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c24:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7fe ffc2 	bl	8001bb4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b3d      	ldr	r3, [pc, #244]	@ (8002d2c <HAL_ADC_ConfigChannel+0x7d8>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d06c      	beq.n	8002d16 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c3c:	483c      	ldr	r0, [pc, #240]	@ (8002d30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c3e:	f7fe fef1 	bl	8001a24 <LL_ADC_GetCommonPathInternalCh>
 8002c42:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a3a      	ldr	r2, [pc, #232]	@ (8002d34 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d127      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d121      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a35      	ldr	r2, [pc, #212]	@ (8002d38 <HAL_ADC_ConfigChannel+0x7e4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d157      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c6e:	4619      	mov	r1, r3
 8002c70:	482f      	ldr	r0, [pc, #188]	@ (8002d30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c72:	f7fe fec4 	bl	80019fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c76:	4b31      	ldr	r3, [pc, #196]	@ (8002d3c <HAL_ADC_ConfigChannel+0x7e8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	099b      	lsrs	r3, r3, #6
 8002c7c:	4a30      	ldr	r2, [pc, #192]	@ (8002d40 <HAL_ADC_ConfigChannel+0x7ec>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	099b      	lsrs	r3, r3, #6
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c90:	e002      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f9      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c9e:	e03a      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a27      	ldr	r2, [pc, #156]	@ (8002d44 <HAL_ADC_ConfigChannel+0x7f0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d113      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002caa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10d      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1f      	ldr	r2, [pc, #124]	@ (8002d38 <HAL_ADC_ConfigChannel+0x7e4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d12a      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4819      	ldr	r0, [pc, #100]	@ (8002d30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ccc:	f7fe fe97 	bl	80019fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd0:	e021      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d48 <HAL_ADC_ConfigChannel+0x7f4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d11c      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ce0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d116      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <HAL_ADC_ConfigChannel+0x7e4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d111      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cf6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	480c      	ldr	r0, [pc, #48]	@ (8002d30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cfe:	f7fe fe7e 	bl	80019fe <LL_ADC_SetCommonPathInternalCh>
 8002d02:	e008      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	37d8      	adds	r7, #216	@ 0xd8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	80080000 	.word	0x80080000
 8002d30:	50040300 	.word	0x50040300
 8002d34:	c7520000 	.word	0xc7520000
 8002d38:	50040000 	.word	0x50040000
 8002d3c:	20000004 	.word	0x20000004
 8002d40:	053e2d63 	.word	0x053e2d63
 8002d44:	cb840000 	.word	0xcb840000
 8002d48:	80000001 	.word	0x80000001

08002d4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe ffdb 	bl	8001d18 <LL_ADC_IsEnabled>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d169      	bne.n	8002e3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	4b36      	ldr	r3, [pc, #216]	@ (8002e48 <ADC_Enable+0xfc>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00d      	beq.n	8002d92 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7a:	f043 0210 	orr.w	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e055      	b.n	8002e3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe ffaa 	bl	8001cf0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d9c:	482b      	ldr	r0, [pc, #172]	@ (8002e4c <ADC_Enable+0x100>)
 8002d9e:	f7fe fe41 	bl	8001a24 <LL_ADC_GetCommonPathInternalCh>
 8002da2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002da4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dac:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <ADC_Enable+0x104>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	4a28      	ldr	r2, [pc, #160]	@ (8002e54 <ADC_Enable+0x108>)
 8002db4:	fba2 2303 	umull	r2, r3, r2, r3
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dc6:	e002      	b.n	8002dce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f9      	bne.n	8002dc8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002dd4:	f7fe fdf4 	bl	80019c0 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dda:	e028      	b.n	8002e2e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe ff99 	bl	8001d18 <LL_ADC_IsEnabled>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe ff7d 	bl	8001cf0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002df6:	f7fe fde3 	bl	80019c0 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d914      	bls.n	8002e2e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d00d      	beq.n	8002e2e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	f043 0210 	orr.w	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e007      	b.n	8002e3e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d1cf      	bne.n	8002ddc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	8000003f 	.word	0x8000003f
 8002e4c:	50040300 	.word	0x50040300
 8002e50:	20000004 	.word	0x20000004
 8002e54:	053e2d63 	.word	0x053e2d63

08002e58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eee:	4a04      	ldr	r2, [pc, #16]	@ (8002f00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	60d3      	str	r3, [r2, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f08:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <__NVIC_GetPriorityGrouping+0x18>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	f003 0307 	and.w	r3, r3, #7
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	db0b      	blt.n	8002f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	f003 021f 	and.w	r2, r3, #31
 8002f38:	4907      	ldr	r1, [pc, #28]	@ (8002f58 <__NVIC_EnableIRQ+0x38>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	2001      	movs	r0, #1
 8002f42:	fa00 f202 	lsl.w	r2, r0, r2
 8002f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000e100 	.word	0xe000e100

08002f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	db0a      	blt.n	8002f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	490c      	ldr	r1, [pc, #48]	@ (8002fa8 <__NVIC_SetPriority+0x4c>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f84:	e00a      	b.n	8002f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4908      	ldr	r1, [pc, #32]	@ (8002fac <__NVIC_SetPriority+0x50>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3b04      	subs	r3, #4
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	440b      	add	r3, r1
 8002f9a:	761a      	strb	r2, [r3, #24]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000e100 	.word	0xe000e100
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	@ 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f1c3 0307 	rsb	r3, r3, #7
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	bf28      	it	cs
 8002fce:	2304      	movcs	r3, #4
 8002fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d902      	bls.n	8002fe0 <NVIC_EncodePriority+0x30>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3b03      	subs	r3, #3
 8002fde:	e000      	b.n	8002fe2 <NVIC_EncodePriority+0x32>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	43d9      	mvns	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	4313      	orrs	r3, r2
         );
}
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	@ 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003028:	d301      	bcc.n	800302e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302a:	2301      	movs	r3, #1
 800302c:	e00f      	b.n	800304e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302e:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <SysTick_Config+0x40>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3b01      	subs	r3, #1
 8003034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003036:	210f      	movs	r1, #15
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	f7ff ff8e 	bl	8002f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003040:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <SysTick_Config+0x40>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003046:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <SysTick_Config+0x40>)
 8003048:	2207      	movs	r2, #7
 800304a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	e000e010 	.word	0xe000e010

0800305c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff29 	bl	8002ebc <__NVIC_SetPriorityGrouping>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003084:	f7ff ff3e 	bl	8002f04 <__NVIC_GetPriorityGrouping>
 8003088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	6978      	ldr	r0, [r7, #20]
 8003090:	f7ff ff8e 	bl	8002fb0 <NVIC_EncodePriority>
 8003094:	4602      	mov	r2, r0
 8003096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff5d 	bl	8002f5c <__NVIC_SetPriority>
}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff31 	bl	8002f20 <__NVIC_EnableIRQ>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ffa2 	bl	8003018 <SysTick_Config>
 80030d4:	4603      	mov	r3, r0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0ac      	b.n	800324c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f8b2 	bl	8003260 <DFSDM_GetChannelFromInstance>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4a55      	ldr	r2, [pc, #340]	@ (8003254 <HAL_DFSDM_ChannelInit+0x174>)
 8003100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e09f      	b.n	800324c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fe f809 	bl	8001124 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003112:	4b51      	ldr	r3, [pc, #324]	@ (8003258 <HAL_DFSDM_ChannelInit+0x178>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	4a4f      	ldr	r2, [pc, #316]	@ (8003258 <HAL_DFSDM_ChannelInit+0x178>)
 800311a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800311c:	4b4e      	ldr	r3, [pc, #312]	@ (8003258 <HAL_DFSDM_ChannelInit+0x178>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d125      	bne.n	8003170 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003124:	4b4d      	ldr	r3, [pc, #308]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a4c      	ldr	r2, [pc, #304]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 800312a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800312e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003130:	4b4a      	ldr	r3, [pc, #296]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4948      	ldr	r1, [pc, #288]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800313e:	4b47      	ldr	r3, [pc, #284]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a46      	ldr	r2, [pc, #280]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003144:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003148:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	791b      	ldrb	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d108      	bne.n	8003164 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003152:	4b42      	ldr	r3, [pc, #264]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	3b01      	subs	r3, #1
 800315c:	041b      	lsls	r3, r3, #16
 800315e:	493f      	ldr	r1, [pc, #252]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003164:	4b3d      	ldr	r3, [pc, #244]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a3c      	ldr	r2, [pc, #240]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 800316a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800316e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800317e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800318e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003194:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 020f 	bic.w	r2, r2, #15
 80031ac:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6819      	ldr	r1, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80031d4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6899      	ldr	r1, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	3b01      	subs	r3, #1
 80031e6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f002 0207 	and.w	r2, r2, #7
 8003200:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800322c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f810 	bl	8003260 <DFSDM_GetChannelFromInstance>
 8003240:	4602      	mov	r2, r0
 8003242:	4904      	ldr	r1, [pc, #16]	@ (8003254 <HAL_DFSDM_ChannelInit+0x174>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	2000053c 	.word	0x2000053c
 8003258:	20000538 	.word	0x20000538
 800325c:	40016000 	.word	0x40016000

08003260 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a1c      	ldr	r2, [pc, #112]	@ (80032dc <DFSDM_GetChannelFromInstance+0x7c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d102      	bne.n	8003276 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e02b      	b.n	80032ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a19      	ldr	r2, [pc, #100]	@ (80032e0 <DFSDM_GetChannelFromInstance+0x80>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d102      	bne.n	8003284 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800327e:	2301      	movs	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e024      	b.n	80032ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a17      	ldr	r2, [pc, #92]	@ (80032e4 <DFSDM_GetChannelFromInstance+0x84>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d102      	bne.n	8003292 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800328c:	2302      	movs	r3, #2
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e01d      	b.n	80032ce <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a14      	ldr	r2, [pc, #80]	@ (80032e8 <DFSDM_GetChannelFromInstance+0x88>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d102      	bne.n	80032a0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800329a:	2304      	movs	r3, #4
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e016      	b.n	80032ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a12      	ldr	r2, [pc, #72]	@ (80032ec <DFSDM_GetChannelFromInstance+0x8c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d102      	bne.n	80032ae <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80032a8:	2305      	movs	r3, #5
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e00f      	b.n	80032ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a0f      	ldr	r2, [pc, #60]	@ (80032f0 <DFSDM_GetChannelFromInstance+0x90>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d102      	bne.n	80032bc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80032b6:	2306      	movs	r3, #6
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e008      	b.n	80032ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a0d      	ldr	r2, [pc, #52]	@ (80032f4 <DFSDM_GetChannelFromInstance+0x94>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d102      	bne.n	80032ca <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80032c4:	2307      	movs	r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e001      	b.n	80032ce <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80032ca:	2303      	movs	r3, #3
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80032ce:	68fb      	ldr	r3, [r7, #12]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40016000 	.word	0x40016000
 80032e0:	40016020 	.word	0x40016020
 80032e4:	40016040 	.word	0x40016040
 80032e8:	40016080 	.word	0x40016080
 80032ec:	400160a0 	.word	0x400160a0
 80032f0:	400160c0 	.word	0x400160c0
 80032f4:	400160e0 	.word	0x400160e0

080032f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003306:	e166      	b.n	80035d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	2101      	movs	r1, #1
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8158 	beq.w	80035d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	2b01      	cmp	r3, #1
 800332a:	d005      	beq.n	8003338 <HAL_GPIO_Init+0x40>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d130      	bne.n	800339a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800336e:	2201      	movs	r2, #1
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	f003 0201 	and.w	r2, r3, #1
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d017      	beq.n	80033d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2203      	movs	r2, #3
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d123      	bne.n	800342a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	08da      	lsrs	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3208      	adds	r2, #8
 80033ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	220f      	movs	r2, #15
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	08da      	lsrs	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3208      	adds	r2, #8
 8003424:	6939      	ldr	r1, [r7, #16]
 8003426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	2203      	movs	r2, #3
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0203 	and.w	r2, r3, #3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80b2 	beq.w	80035d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346c:	4b61      	ldr	r3, [pc, #388]	@ (80035f4 <HAL_GPIO_Init+0x2fc>)
 800346e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003470:	4a60      	ldr	r2, [pc, #384]	@ (80035f4 <HAL_GPIO_Init+0x2fc>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6613      	str	r3, [r2, #96]	@ 0x60
 8003478:	4b5e      	ldr	r3, [pc, #376]	@ (80035f4 <HAL_GPIO_Init+0x2fc>)
 800347a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003484:	4a5c      	ldr	r2, [pc, #368]	@ (80035f8 <HAL_GPIO_Init+0x300>)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3302      	adds	r3, #2
 800348c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	220f      	movs	r2, #15
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034ae:	d02b      	beq.n	8003508 <HAL_GPIO_Init+0x210>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a52      	ldr	r2, [pc, #328]	@ (80035fc <HAL_GPIO_Init+0x304>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d025      	beq.n	8003504 <HAL_GPIO_Init+0x20c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a51      	ldr	r2, [pc, #324]	@ (8003600 <HAL_GPIO_Init+0x308>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d01f      	beq.n	8003500 <HAL_GPIO_Init+0x208>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a50      	ldr	r2, [pc, #320]	@ (8003604 <HAL_GPIO_Init+0x30c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d019      	beq.n	80034fc <HAL_GPIO_Init+0x204>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a4f      	ldr	r2, [pc, #316]	@ (8003608 <HAL_GPIO_Init+0x310>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <HAL_GPIO_Init+0x200>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a4e      	ldr	r2, [pc, #312]	@ (800360c <HAL_GPIO_Init+0x314>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00d      	beq.n	80034f4 <HAL_GPIO_Init+0x1fc>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a4d      	ldr	r2, [pc, #308]	@ (8003610 <HAL_GPIO_Init+0x318>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d007      	beq.n	80034f0 <HAL_GPIO_Init+0x1f8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003614 <HAL_GPIO_Init+0x31c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d101      	bne.n	80034ec <HAL_GPIO_Init+0x1f4>
 80034e8:	2307      	movs	r3, #7
 80034ea:	e00e      	b.n	800350a <HAL_GPIO_Init+0x212>
 80034ec:	2308      	movs	r3, #8
 80034ee:	e00c      	b.n	800350a <HAL_GPIO_Init+0x212>
 80034f0:	2306      	movs	r3, #6
 80034f2:	e00a      	b.n	800350a <HAL_GPIO_Init+0x212>
 80034f4:	2305      	movs	r3, #5
 80034f6:	e008      	b.n	800350a <HAL_GPIO_Init+0x212>
 80034f8:	2304      	movs	r3, #4
 80034fa:	e006      	b.n	800350a <HAL_GPIO_Init+0x212>
 80034fc:	2303      	movs	r3, #3
 80034fe:	e004      	b.n	800350a <HAL_GPIO_Init+0x212>
 8003500:	2302      	movs	r3, #2
 8003502:	e002      	b.n	800350a <HAL_GPIO_Init+0x212>
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <HAL_GPIO_Init+0x212>
 8003508:	2300      	movs	r3, #0
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	f002 0203 	and.w	r2, r2, #3
 8003510:	0092      	lsls	r2, r2, #2
 8003512:	4093      	lsls	r3, r2
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800351a:	4937      	ldr	r1, [pc, #220]	@ (80035f8 <HAL_GPIO_Init+0x300>)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003528:	4b3b      	ldr	r3, [pc, #236]	@ (8003618 <HAL_GPIO_Init+0x320>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800354c:	4a32      	ldr	r2, [pc, #200]	@ (8003618 <HAL_GPIO_Init+0x320>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003552:	4b31      	ldr	r3, [pc, #196]	@ (8003618 <HAL_GPIO_Init+0x320>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003576:	4a28      	ldr	r2, [pc, #160]	@ (8003618 <HAL_GPIO_Init+0x320>)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800357c:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <HAL_GPIO_Init+0x320>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	43db      	mvns	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003618 <HAL_GPIO_Init+0x320>)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003618 <HAL_GPIO_Init+0x320>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ca:	4a13      	ldr	r2, [pc, #76]	@ (8003618 <HAL_GPIO_Init+0x320>)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3301      	adds	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f47f ae91 	bne.w	8003308 <HAL_GPIO_Init+0x10>
  }
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40010000 	.word	0x40010000
 80035fc:	48000400 	.word	0x48000400
 8003600:	48000800 	.word	0x48000800
 8003604:	48000c00 	.word	0x48000c00
 8003608:	48001000 	.word	0x48001000
 800360c:	48001400 	.word	0x48001400
 8003610:	48001800 	.word	0x48001800
 8003614:	48001c00 	.word	0x48001c00
 8003618:	40010400 	.word	0x40010400

0800361c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	807b      	strh	r3, [r7, #2]
 8003628:	4613      	mov	r3, r2
 800362a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800362c:	787b      	ldrb	r3, [r7, #1]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003638:	e002      	b.n	8003640 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800363a:	887a      	ldrh	r2, [r7, #2]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003656:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d006      	beq.n	8003670 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003662:	4a05      	ldr	r2, [pc, #20]	@ (8003678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fc8c 	bl	8000f88 <HAL_GPIO_EXTI_Callback>
  }
}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40010400 	.word	0x40010400

0800367c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e08d      	b.n	80037aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd fda2 	bl	80011ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2224      	movs	r2, #36	@ 0x24
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	e006      	b.n	8003704 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003702:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d108      	bne.n	800371e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	e007      	b.n	800372e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800372c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800373c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003740:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003750:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69d9      	ldr	r1, [r3, #28]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d138      	bne.n	800383a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e032      	b.n	800383c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2224      	movs	r2, #36	@ 0x24
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003804:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	d139      	bne.n	80038d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003868:	2302      	movs	r3, #2
 800386a:	e033      	b.n	80038d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	@ 0x24
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800389a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80038ec:	f7fe f868 	bl	80019c0 <HAL_GetTick>
 80038f0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e092      	b.n	8003a24 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003908:	2b00      	cmp	r3, #0
 800390a:	f040 808b 	bne.w	8003a24 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd fd0e 	bl	8001330 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003914:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f88b 	bl	8003a34 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	4b42      	ldr	r3, [pc, #264]	@ (8003a30 <HAL_OSPI_Init+0x150>)
 8003926:	4013      	ands	r3, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68d1      	ldr	r1, [r2, #12]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6912      	ldr	r2, [r2, #16]
 8003930:	3a01      	subs	r2, #1
 8003932:	0412      	lsls	r2, r2, #16
 8003934:	4311      	orrs	r1, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6952      	ldr	r2, [r2, #20]
 800393a:	3a01      	subs	r2, #1
 800393c:	0212      	lsls	r2, r2, #8
 800393e:	4311      	orrs	r1, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003944:	4311      	orrs	r1, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	69d2      	ldr	r2, [r2, #28]
 800394a:	4311      	orrs	r1, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	430b      	orrs	r3, r1
 8003952:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	0412      	lsls	r2, r2, #16
 800395e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	021a      	lsls	r2, r3, #8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2200      	movs	r2, #0
 8003984:	2120      	movs	r1, #32
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fb9c 	bl	80040c4 <OSPI_WaitFlagStateUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d146      	bne.n	8003a24 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	1e5a      	subs	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80039cc:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d107      	bne.n	8003a0c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0202 	orr.w	r2, r2, #2
 8003a0a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a14:	d103      	bne.n	8003a1e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a1c:	e002      	b.n	8003a24 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	f8e0f8f4 	.word	0xf8e0f8f4

08003a34 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b092      	sub	sp, #72	@ 0x48
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a08      	ldr	r2, [pc, #32]	@ (8003a94 <HAL_OSPIM_Config+0x40>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d105      	bne.n	8003a82 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8003a80:	e004      	b.n	8003a8c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003a82:	2301      	movs	r3, #1
 8003a84:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003a92:	e01f      	b.n	8003ad4 <HAL_OSPIM_Config+0x80>
 8003a94:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003a98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	b2d8      	uxtb	r0, r3
 8003aa0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003aa4:	f107 0114 	add.w	r1, r7, #20
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f000 fb3e 	bl	8004134 <OSPIM_GetConfig>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003aca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003ad4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d9dd      	bls.n	8003a98 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003adc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f040 82e3 	bne.w	80040ac <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003ae6:	4bc5      	ldr	r3, [pc, #788]	@ (8003dfc <HAL_OSPIM_Config+0x3a8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003af2:	4bc2      	ldr	r3, [pc, #776]	@ (8003dfc <HAL_OSPIM_Config+0x3a8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4ac1      	ldr	r2, [pc, #772]	@ (8003dfc <HAL_OSPIM_Config+0x3a8>)
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003afe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003b0a:	4bbd      	ldr	r3, [pc, #756]	@ (8003e00 <HAL_OSPIM_Config+0x3ac>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003b16:	4bba      	ldr	r3, [pc, #744]	@ (8003e00 <HAL_OSPIM_Config+0x3ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4ab9      	ldr	r2, [pc, #740]	@ (8003e00 <HAL_OSPIM_Config+0x3ac>)
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003b22:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003b26:	f043 0302 	orr.w	r3, r3, #2
 8003b2a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003b2e:	49b5      	ldr	r1, [pc, #724]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003b30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	3348      	adds	r3, #72	@ 0x48
 8003b3c:	443b      	add	r3, r7
 8003b3e:	3b2c      	subs	r3, #44	@ 0x2c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	48ae      	ldr	r0, [pc, #696]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003b4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	3348      	adds	r3, #72	@ 0x48
 8003b58:	443b      	add	r3, r7
 8003b5a:	3b2c      	subs	r3, #44	@ 0x2c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4403      	add	r3, r0
 8003b68:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003b6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	3348      	adds	r3, #72	@ 0x48
 8003b76:	443b      	add	r3, r7
 8003b78:	3b34      	subs	r3, #52	@ 0x34
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80a1 	beq.w	8003cc4 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003b82:	49a0      	ldr	r1, [pc, #640]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003b84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	3348      	adds	r3, #72	@ 0x48
 8003b90:	443b      	add	r3, r7
 8003b92:	3b34      	subs	r3, #52	@ 0x34
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	6859      	ldr	r1, [r3, #4]
 8003b9e:	4899      	ldr	r0, [pc, #612]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003ba0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	3348      	adds	r3, #72	@ 0x48
 8003bac:	443b      	add	r3, r7
 8003bae:	3b34      	subs	r3, #52	@ 0x34
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	f021 0201 	bic.w	r2, r1, #1
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4403      	add	r3, r0
 8003bbc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003bbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	3348      	adds	r3, #72	@ 0x48
 8003bca:	443b      	add	r3, r7
 8003bcc:	3b30      	subs	r3, #48	@ 0x30
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01d      	beq.n	8003c10 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003bd4:	498b      	ldr	r1, [pc, #556]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003bd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	3348      	adds	r3, #72	@ 0x48
 8003be2:	443b      	add	r3, r7
 8003be4:	3b30      	subs	r3, #48	@ 0x30
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	4884      	ldr	r0, [pc, #528]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003bf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	3348      	adds	r3, #72	@ 0x48
 8003bfe:	443b      	add	r3, r7
 8003c00:	3b30      	subs	r3, #48	@ 0x30
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	f021 0210 	bic.w	r2, r1, #16
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4403      	add	r3, r0
 8003c0e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003c10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	3348      	adds	r3, #72	@ 0x48
 8003c1c:	443b      	add	r3, r7
 8003c1e:	3b28      	subs	r3, #40	@ 0x28
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d021      	beq.n	8003c6a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003c26:	4977      	ldr	r1, [pc, #476]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003c28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	3348      	adds	r3, #72	@ 0x48
 8003c34:	443b      	add	r3, r7
 8003c36:	3b28      	subs	r3, #40	@ 0x28
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	486f      	ldr	r0, [pc, #444]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	3348      	adds	r3, #72	@ 0x48
 8003c54:	443b      	add	r3, r7
 8003c56:	3b28      	subs	r3, #40	@ 0x28
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4403      	add	r3, r0
 8003c68:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003c6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	3348      	adds	r3, #72	@ 0x48
 8003c76:	443b      	add	r3, r7
 8003c78:	3b24      	subs	r3, #36	@ 0x24
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d021      	beq.n	8003cc4 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003c80:	4960      	ldr	r1, [pc, #384]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003c82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	3348      	adds	r3, #72	@ 0x48
 8003c8e:	443b      	add	r3, r7
 8003c90:	3b24      	subs	r3, #36	@ 0x24
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	4858      	ldr	r0, [pc, #352]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003ca2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	3348      	adds	r3, #72	@ 0x48
 8003cae:	443b      	add	r3, r7
 8003cb0:	3b24      	subs	r3, #36	@ 0x24
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	3348      	adds	r3, #72	@ 0x48
 8003cd6:	443b      	add	r3, r7
 8003cd8:	3b34      	subs	r3, #52	@ 0x34
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4299      	cmp	r1, r3
 8003cde:	d03c      	beq.n	8003d5a <HAL_OSPIM_Config+0x306>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	6899      	ldr	r1, [r3, #8]
 8003ce4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	3348      	adds	r3, #72	@ 0x48
 8003cf2:	443b      	add	r3, r7
 8003cf4:	3b2c      	subs	r3, #44	@ 0x2c
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	d02e      	beq.n	8003d5a <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	3348      	adds	r3, #72	@ 0x48
 8003d0e:	443b      	add	r3, r7
 8003d10:	3b30      	subs	r3, #48	@ 0x30
 8003d12:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8003d14:	4299      	cmp	r1, r3
 8003d16:	d103      	bne.n	8003d20 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d11c      	bne.n	8003d5a <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	68d9      	ldr	r1, [r3, #12]
 8003d24:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	3348      	adds	r3, #72	@ 0x48
 8003d32:	443b      	add	r3, r7
 8003d34:	3b28      	subs	r3, #40	@ 0x28
 8003d36:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003d38:	4299      	cmp	r1, r3
 8003d3a:	d00e      	beq.n	8003d5a <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	6919      	ldr	r1, [r3, #16]
 8003d40:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	3348      	adds	r3, #72	@ 0x48
 8003d4e:	443b      	add	r3, r7
 8003d50:	3b24      	subs	r3, #36	@ 0x24
 8003d52:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003d54:	4299      	cmp	r1, r3
 8003d56:	f040 80d4 	bne.w	8003f02 <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003d5a:	492a      	ldr	r1, [pc, #168]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003d5c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	3348      	adds	r3, #72	@ 0x48
 8003d6a:	443b      	add	r3, r7
 8003d6c:	3b34      	subs	r3, #52	@ 0x34
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	4822      	ldr	r0, [pc, #136]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003d7a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	3348      	adds	r3, #72	@ 0x48
 8003d88:	443b      	add	r3, r7
 8003d8a:	3b34      	subs	r3, #52	@ 0x34
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	f021 0201 	bic.w	r2, r1, #1
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4403      	add	r3, r0
 8003d98:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003d9a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	3348      	adds	r3, #72	@ 0x48
 8003da8:	443b      	add	r3, r7
 8003daa:	3b30      	subs	r3, #48	@ 0x30
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01f      	beq.n	8003df2 <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003db2:	4914      	ldr	r1, [pc, #80]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003db4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	3348      	adds	r3, #72	@ 0x48
 8003dc2:	443b      	add	r3, r7
 8003dc4:	3b30      	subs	r3, #48	@ 0x30
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	480c      	ldr	r0, [pc, #48]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003dd2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	3348      	adds	r3, #72	@ 0x48
 8003de0:	443b      	add	r3, r7
 8003de2:	3b30      	subs	r3, #48	@ 0x30
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	f021 0210 	bic.w	r2, r1, #16
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4403      	add	r3, r0
 8003df0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003df2:	4904      	ldr	r1, [pc, #16]	@ (8003e04 <HAL_OSPIM_Config+0x3b0>)
 8003df4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003df8:	e006      	b.n	8003e08 <HAL_OSPIM_Config+0x3b4>
 8003dfa:	bf00      	nop
 8003dfc:	a0001000 	.word	0xa0001000
 8003e00:	a0001400 	.word	0xa0001400
 8003e04:	50061c00 	.word	0x50061c00
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	3348      	adds	r3, #72	@ 0x48
 8003e12:	443b      	add	r3, r7
 8003e14:	3b2c      	subs	r3, #44	@ 0x2c
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	6859      	ldr	r1, [r3, #4]
 8003e20:	48a5      	ldr	r0, [pc, #660]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003e22:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	3348      	adds	r3, #72	@ 0x48
 8003e30:	443b      	add	r3, r7
 8003e32:	3b2c      	subs	r3, #44	@ 0x2c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4403      	add	r3, r0
 8003e40:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003e42:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	3348      	adds	r3, #72	@ 0x48
 8003e50:	443b      	add	r3, r7
 8003e52:	3b28      	subs	r3, #40	@ 0x28
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d023      	beq.n	8003ea2 <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e5a:	4997      	ldr	r1, [pc, #604]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003e5c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	3348      	adds	r3, #72	@ 0x48
 8003e6a:	443b      	add	r3, r7
 8003e6c:	3b28      	subs	r3, #40	@ 0x28
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	488e      	ldr	r0, [pc, #568]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003e7e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	3348      	adds	r3, #72	@ 0x48
 8003e8c:	443b      	add	r3, r7
 8003e8e:	3b28      	subs	r3, #40	@ 0x28
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4403      	add	r3, r0
 8003ea0:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003ea2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	3348      	adds	r3, #72	@ 0x48
 8003eb0:	443b      	add	r3, r7
 8003eb2:	3b24      	subs	r3, #36	@ 0x24
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d023      	beq.n	8003f02 <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003eba:	497f      	ldr	r1, [pc, #508]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003ebc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	3348      	adds	r3, #72	@ 0x48
 8003eca:	443b      	add	r3, r7
 8003ecc:	3b24      	subs	r3, #36	@ 0x24
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	4876      	ldr	r0, [pc, #472]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003ede:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	3348      	adds	r3, #72	@ 0x48
 8003eec:	443b      	add	r3, r7
 8003eee:	3b24      	subs	r3, #36	@ 0x24
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4403      	add	r3, r0
 8003f00:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003f02:	4a6d      	ldr	r2, [pc, #436]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f16:	025b      	lsls	r3, r3, #9
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	4967      	ldr	r1, [pc, #412]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003f2c:	4a62      	ldr	r2, [pc, #392]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f023 0203 	bic.w	r2, r3, #3
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	431a      	orrs	r2, r3
 8003f44:	495c      	ldr	r1, [pc, #368]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d014      	beq.n	8003f88 <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003f5e:	4a56      	ldr	r2, [pc, #344]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f72:	015b      	lsls	r3, r3, #5
 8003f74:	431a      	orrs	r2, r3
 8003f76:	4950      	ldr	r1, [pc, #320]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	f042 0210 	orr.w	r2, r2, #16
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d019      	beq.n	8003fc8 <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003f94:	4a48      	ldr	r2, [pc, #288]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fac:	049b      	lsls	r3, r3, #18
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	4941      	ldr	r1, [pc, #260]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	e01c      	b.n	8004002 <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d018      	beq.n	8004002 <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003fd0:	4a39      	ldr	r2, [pc, #228]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fe8:	069b      	lsls	r3, r3, #26
 8003fea:	431a      	orrs	r2, r3
 8003fec:	4932      	ldr	r1, [pc, #200]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d019      	beq.n	8004042 <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800400e:	4a2a      	ldr	r2, [pc, #168]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	3b01      	subs	r3, #1
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004026:	049b      	lsls	r3, r3, #18
 8004028:	431a      	orrs	r2, r3
 800402a:	4923      	ldr	r1, [pc, #140]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	3b01      	subs	r3, #1
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	e01c      	b.n	800407c <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d018      	beq.n	800407c <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800404a:	4a1b      	ldr	r2, [pc, #108]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	3b01      	subs	r3, #1
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004062:	069b      	lsls	r3, r3, #26
 8004064:	431a      	orrs	r2, r3
 8004066:	4914      	ldr	r1, [pc, #80]	@ (80040b8 <HAL_OSPIM_Config+0x664>)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	3b01      	subs	r3, #1
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800407c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004088:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <HAL_OSPIM_Config+0x668>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a0b      	ldr	r2, [pc, #44]	@ (80040bc <HAL_OSPIM_Config+0x668>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004094:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80040a0:	4b07      	ldr	r3, [pc, #28]	@ (80040c0 <HAL_OSPIM_Config+0x66c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a06      	ldr	r2, [pc, #24]	@ (80040c0 <HAL_OSPIM_Config+0x66c>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80040ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3748      	adds	r7, #72	@ 0x48
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	50061c00 	.word	0x50061c00
 80040bc:	a0001000 	.word	0xa0001000
 80040c0:	a0001400 	.word	0xa0001400

080040c4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	4613      	mov	r3, r2
 80040d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80040d4:	e01a      	b.n	800410c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d016      	beq.n	800410c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040de:	f7fd fc6f 	bl	80019c0 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d302      	bcc.n	80040f4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10b      	bne.n	800410c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040fa:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004100:	f043 0201 	orr.w	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e00e      	b.n	800412a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	429a      	cmp	r2, r3
 8004126:	d1d6      	bne.n	80040d6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	6039      	str	r1, [r7, #0]
 800413e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <OSPIM_GetConfig+0x26>
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d802      	bhi.n	800415a <OSPIM_GetConfig+0x26>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
 800415e:	e08e      	b.n	800427e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2200      	movs	r2, #0
 800416a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2200      	movs	r2, #0
 8004176:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2200      	movs	r2, #0
 800417c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d101      	bne.n	8004188 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004184:	4b41      	ldr	r3, [pc, #260]	@ (800428c <OSPIM_GetConfig+0x158>)
 8004186:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e074      	b.n	8004278 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800418e:	4a40      	ldr	r2, [pc, #256]	@ (8004290 <OSPIM_GetConfig+0x15c>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4053      	eors	r3, r2
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d103      	bne.n	80041ba <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4053      	eors	r3, r2
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4053      	eors	r3, r2
 80041ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d018      	beq.n	8004236 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4053      	eors	r3, r2
 800420a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d111      	bne.n	8004236 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3301      	adds	r3, #1
 8004220:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	60da      	str	r2, [r3, #12]
 8004228:	e005      	b.n	8004236 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3301      	adds	r3, #1
 800422e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d018      	beq.n	8004272 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4053      	eors	r3, r2
 8004246:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d111      	bne.n	8004272 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3301      	adds	r3, #1
 800425c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	611a      	str	r2, [r3, #16]
 8004264:	e005      	b.n	8004272 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3301      	adds	r3, #1
 800426a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3301      	adds	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d987      	bls.n	800418e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800427e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004280:	4618      	mov	r0, r3
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	04040222 	.word	0x04040222
 8004290:	50061c00 	.word	0x50061c00

08004294 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004298:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a04      	ldr	r2, [pc, #16]	@ (80042b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a2:	6013      	str	r3, [r2, #0]
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40007000 	.word	0x40007000

080042b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042b8:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c4:	d102      	bne.n	80042cc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80042c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042ca:	e00b      	b.n	80042e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80042cc:	4b08      	ldr	r3, [pc, #32]	@ (80042f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80042ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042da:	d102      	bne.n	80042e2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80042dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042e0:	e000      	b.n	80042e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80042e2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40007000 	.word	0x40007000

080042f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d141      	bne.n	8004386 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004302:	4b4b      	ldr	r3, [pc, #300]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800430e:	d131      	bne.n	8004374 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004310:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004316:	4a46      	ldr	r2, [pc, #280]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800431c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004320:	4b43      	ldr	r3, [pc, #268]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004328:	4a41      	ldr	r2, [pc, #260]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800432e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004330:	4b40      	ldr	r3, [pc, #256]	@ (8004434 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2232      	movs	r2, #50	@ 0x32
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	4a3f      	ldr	r2, [pc, #252]	@ (8004438 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	0c9b      	lsrs	r3, r3, #18
 8004342:	3301      	adds	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004346:	e002      	b.n	800434e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3b01      	subs	r3, #1
 800434c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800434e:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800435a:	d102      	bne.n	8004362 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f2      	bne.n	8004348 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004362:	4b33      	ldr	r3, [pc, #204]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436e:	d158      	bne.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e057      	b.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004374:	4b2e      	ldr	r3, [pc, #184]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800437a:	4a2d      	ldr	r2, [pc, #180]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004380:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004384:	e04d      	b.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438c:	d141      	bne.n	8004412 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800438e:	4b28      	ldr	r3, [pc, #160]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439a:	d131      	bne.n	8004400 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800439c:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a2:	4a23      	ldr	r2, [pc, #140]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043ac:	4b20      	ldr	r3, [pc, #128]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80043bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004434 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2232      	movs	r2, #50	@ 0x32
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004438 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	0c9b      	lsrs	r3, r3, #18
 80043ce:	3301      	adds	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d2:	e002      	b.n	80043da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043da:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e6:	d102      	bne.n	80043ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f2      	bne.n	80043d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043ee:	4b10      	ldr	r3, [pc, #64]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fa:	d112      	bne.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e011      	b.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004406:	4a0a      	ldr	r2, [pc, #40]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800440c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004410:	e007      	b.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004412:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800441a:	4a05      	ldr	r2, [pc, #20]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004420:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	40007000 	.word	0x40007000
 8004434:	20000004 	.word	0x20000004
 8004438:	431bde83 	.word	0x431bde83

0800443c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d102      	bne.n	8004450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f000 bc08 	b.w	8004c60 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004450:	4b96      	ldr	r3, [pc, #600]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800445a:	4b94      	ldr	r3, [pc, #592]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80e4 	beq.w	800463a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <HAL_RCC_OscConfig+0x4c>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b0c      	cmp	r3, #12
 800447c:	f040 808b 	bne.w	8004596 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b01      	cmp	r3, #1
 8004484:	f040 8087 	bne.w	8004596 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004488:	4b88      	ldr	r3, [pc, #544]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_OscConfig+0x64>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e3df      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1a      	ldr	r2, [r3, #32]
 80044a4:	4b81      	ldr	r3, [pc, #516]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d004      	beq.n	80044ba <HAL_RCC_OscConfig+0x7e>
 80044b0:	4b7e      	ldr	r3, [pc, #504]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044b8:	e005      	b.n	80044c6 <HAL_RCC_OscConfig+0x8a>
 80044ba:	4b7c      	ldr	r3, [pc, #496]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80044bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d223      	bcs.n	8004512 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fdcc 	bl	800506c <RCC_SetFlashLatencyFromMSIRange>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e3c0      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044de:	4b73      	ldr	r3, [pc, #460]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a72      	ldr	r2, [pc, #456]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80044e4:	f043 0308 	orr.w	r3, r3, #8
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	4b70      	ldr	r3, [pc, #448]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	496d      	ldr	r1, [pc, #436]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044fc:	4b6b      	ldr	r3, [pc, #428]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	4968      	ldr	r1, [pc, #416]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 800450c:	4313      	orrs	r3, r2
 800450e:	604b      	str	r3, [r1, #4]
 8004510:	e025      	b.n	800455e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004512:	4b66      	ldr	r3, [pc, #408]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a65      	ldr	r2, [pc, #404]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 8004518:	f043 0308 	orr.w	r3, r3, #8
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4b63      	ldr	r3, [pc, #396]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	4960      	ldr	r1, [pc, #384]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 800452c:	4313      	orrs	r3, r2
 800452e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004530:	4b5e      	ldr	r3, [pc, #376]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	495b      	ldr	r1, [pc, #364]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fd8c 	bl	800506c <RCC_SetFlashLatencyFromMSIRange>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e380      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800455e:	f000 fcc1 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8004562:	4602      	mov	r2, r0
 8004564:	4b51      	ldr	r3, [pc, #324]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	4950      	ldr	r1, [pc, #320]	@ (80046b0 <HAL_RCC_OscConfig+0x274>)
 8004570:	5ccb      	ldrb	r3, [r1, r3]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	fa22 f303 	lsr.w	r3, r2, r3
 800457a:	4a4e      	ldr	r2, [pc, #312]	@ (80046b4 <HAL_RCC_OscConfig+0x278>)
 800457c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800457e:	4b4e      	ldr	r3, [pc, #312]	@ (80046b8 <HAL_RCC_OscConfig+0x27c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7fd f9cc 	bl	8001920 <HAL_InitTick>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d052      	beq.n	8004638 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	e364      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d032      	beq.n	8004604 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800459e:	4b43      	ldr	r3, [pc, #268]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a42      	ldr	r2, [pc, #264]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045aa:	f7fd fa09 	bl	80019c0 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045b2:	f7fd fa05 	bl	80019c0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e34d      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045c4:	4b39      	ldr	r3, [pc, #228]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045d0:	4b36      	ldr	r3, [pc, #216]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a35      	ldr	r2, [pc, #212]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80045d6:	f043 0308 	orr.w	r3, r3, #8
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	4b33      	ldr	r3, [pc, #204]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	4930      	ldr	r1, [pc, #192]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ee:	4b2f      	ldr	r3, [pc, #188]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	492b      	ldr	r1, [pc, #172]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	604b      	str	r3, [r1, #4]
 8004602:	e01a      	b.n	800463a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004604:	4b29      	ldr	r3, [pc, #164]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a28      	ldr	r2, [pc, #160]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004610:	f7fd f9d6 	bl	80019c0 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004618:	f7fd f9d2 	bl	80019c0 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e31a      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800462a:	4b20      	ldr	r3, [pc, #128]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x1dc>
 8004636:	e000      	b.n	800463a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004638:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d073      	beq.n	800472e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d005      	beq.n	8004658 <HAL_RCC_OscConfig+0x21c>
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d10e      	bne.n	8004670 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d10b      	bne.n	8004670 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	4b14      	ldr	r3, [pc, #80]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d063      	beq.n	800472c <HAL_RCC_OscConfig+0x2f0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d15f      	bne.n	800472c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e2f7      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004678:	d106      	bne.n	8004688 <HAL_RCC_OscConfig+0x24c>
 800467a:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a0b      	ldr	r2, [pc, #44]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e025      	b.n	80046d4 <HAL_RCC_OscConfig+0x298>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004690:	d114      	bne.n	80046bc <HAL_RCC_OscConfig+0x280>
 8004692:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a05      	ldr	r2, [pc, #20]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 8004698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	4b03      	ldr	r3, [pc, #12]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a02      	ldr	r2, [pc, #8]	@ (80046ac <HAL_RCC_OscConfig+0x270>)
 80046a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e013      	b.n	80046d4 <HAL_RCC_OscConfig+0x298>
 80046ac:	40021000 	.word	0x40021000
 80046b0:	08007044 	.word	0x08007044
 80046b4:	20000004 	.word	0x20000004
 80046b8:	20000008 	.word	0x20000008
 80046bc:	4ba0      	ldr	r3, [pc, #640]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a9f      	ldr	r2, [pc, #636]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80046c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	4b9d      	ldr	r3, [pc, #628]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a9c      	ldr	r2, [pc, #624]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80046ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d013      	beq.n	8004704 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd f970 	bl	80019c0 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e4:	f7fd f96c 	bl	80019c0 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	@ 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e2b4      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f6:	4b92      	ldr	r3, [pc, #584]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x2a8>
 8004702:	e014      	b.n	800472e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fd f95c 	bl	80019c0 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800470c:	f7fd f958 	bl	80019c0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	@ 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e2a0      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800471e:	4b88      	ldr	r3, [pc, #544]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x2d0>
 800472a:	e000      	b.n	800472e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d060      	beq.n	80047fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b04      	cmp	r3, #4
 800473e:	d005      	beq.n	800474c <HAL_RCC_OscConfig+0x310>
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d119      	bne.n	800477a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d116      	bne.n	800477a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800474c:	4b7c      	ldr	r3, [pc, #496]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_OscConfig+0x328>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e27d      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004764:	4b76      	ldr	r3, [pc, #472]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	4973      	ldr	r1, [pc, #460]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004778:	e040      	b.n	80047fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d023      	beq.n	80047ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004782:	4b6f      	ldr	r3, [pc, #444]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6e      	ldr	r2, [pc, #440]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fd f917 	bl	80019c0 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004796:	f7fd f913 	bl	80019c0 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e25b      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047a8:	4b65      	ldr	r3, [pc, #404]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b4:	4b62      	ldr	r3, [pc, #392]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	495f      	ldr	r1, [pc, #380]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	604b      	str	r3, [r1, #4]
 80047c8:	e018      	b.n	80047fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a5c      	ldr	r2, [pc, #368]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80047d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fd f8f3 	bl	80019c0 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047de:	f7fd f8ef 	bl	80019c0 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e237      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047f0:	4b53      	ldr	r3, [pc, #332]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d03c      	beq.n	8004882 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01c      	beq.n	800484a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004810:	4b4b      	ldr	r3, [pc, #300]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004816:	4a4a      	ldr	r2, [pc, #296]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fd f8ce 	bl	80019c0 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004828:	f7fd f8ca 	bl	80019c0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e212      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800483a:	4b41      	ldr	r3, [pc, #260]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 800483c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ef      	beq.n	8004828 <HAL_RCC_OscConfig+0x3ec>
 8004848:	e01b      	b.n	8004882 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484a:	4b3d      	ldr	r3, [pc, #244]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 800484c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004850:	4a3b      	ldr	r2, [pc, #236]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485a:	f7fd f8b1 	bl	80019c0 <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004862:	f7fd f8ad 	bl	80019c0 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e1f5      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004874:	4b32      	ldr	r3, [pc, #200]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1ef      	bne.n	8004862 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80a6 	beq.w	80049dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004890:	2300      	movs	r3, #0
 8004892:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004894:	4b2a      	ldr	r3, [pc, #168]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10d      	bne.n	80048bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a0:	4b27      	ldr	r3, [pc, #156]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80048a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a4:	4a26      	ldr	r2, [pc, #152]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80048a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ac:	4b24      	ldr	r3, [pc, #144]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 80048ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b8:	2301      	movs	r3, #1
 80048ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048bc:	4b21      	ldr	r3, [pc, #132]	@ (8004944 <HAL_RCC_OscConfig+0x508>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d118      	bne.n	80048fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004944 <HAL_RCC_OscConfig+0x508>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004944 <HAL_RCC_OscConfig+0x508>)
 80048ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d4:	f7fd f874 	bl	80019c0 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048dc:	f7fd f870 	bl	80019c0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e1b8      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ee:	4b15      	ldr	r3, [pc, #84]	@ (8004944 <HAL_RCC_OscConfig+0x508>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d108      	bne.n	8004914 <HAL_RCC_OscConfig+0x4d8>
 8004902:	4b0f      	ldr	r3, [pc, #60]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004908:	4a0d      	ldr	r2, [pc, #52]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004912:	e029      	b.n	8004968 <HAL_RCC_OscConfig+0x52c>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b05      	cmp	r3, #5
 800491a:	d115      	bne.n	8004948 <HAL_RCC_OscConfig+0x50c>
 800491c:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	4a07      	ldr	r2, [pc, #28]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800492c:	4b04      	ldr	r3, [pc, #16]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004932:	4a03      	ldr	r2, [pc, #12]	@ (8004940 <HAL_RCC_OscConfig+0x504>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800493c:	e014      	b.n	8004968 <HAL_RCC_OscConfig+0x52c>
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000
 8004944:	40007000 	.word	0x40007000
 8004948:	4b9d      	ldr	r3, [pc, #628]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	4a9c      	ldr	r2, [pc, #624]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004958:	4b99      	ldr	r3, [pc, #612]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495e:	4a98      	ldr	r2, [pc, #608]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004960:	f023 0304 	bic.w	r3, r3, #4
 8004964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d016      	beq.n	800499e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fd f826 	bl	80019c0 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004976:	e00a      	b.n	800498e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004978:	f7fd f822 	bl	80019c0 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e168      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498e:	4b8c      	ldr	r3, [pc, #560]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0ed      	beq.n	8004978 <HAL_RCC_OscConfig+0x53c>
 800499c:	e015      	b.n	80049ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499e:	f7fd f80f 	bl	80019c0 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049a4:	e00a      	b.n	80049bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a6:	f7fd f80b 	bl	80019c0 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e151      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049bc:	4b80      	ldr	r3, [pc, #512]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1ed      	bne.n	80049a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ca:	7ffb      	ldrb	r3, [r7, #31]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d105      	bne.n	80049dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d0:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d4:	4a7a      	ldr	r2, [pc, #488]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 80049d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d03c      	beq.n	8004a62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01c      	beq.n	8004a2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049f0:	4b73      	ldr	r3, [pc, #460]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 80049f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049f6:	4a72      	ldr	r2, [pc, #456]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fc ffde 	bl	80019c0 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a08:	f7fc ffda 	bl	80019c0 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e122      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a1a:	4b69      	ldr	r3, [pc, #420]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ef      	beq.n	8004a08 <HAL_RCC_OscConfig+0x5cc>
 8004a28:	e01b      	b.n	8004a62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a2a:	4b65      	ldr	r3, [pc, #404]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a30:	4a63      	ldr	r2, [pc, #396]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7fc ffc1 	bl	80019c0 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a42:	f7fc ffbd 	bl	80019c0 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e105      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a54:	4b5a      	ldr	r3, [pc, #360]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1ef      	bne.n	8004a42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 80f9 	beq.w	8004c5e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	f040 80cf 	bne.w	8004c14 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a76:	4b52      	ldr	r3, [pc, #328]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f003 0203 	and.w	r2, r3, #3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d12c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a94:	3b01      	subs	r3, #1
 8004a96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d123      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d113      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac6:	085b      	lsrs	r3, r3, #1
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d109      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	3b01      	subs	r3, #1
 8004ade:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d071      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d068      	beq.n	8004bbc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004aea:	4b35      	ldr	r3, [pc, #212]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d105      	bne.n	8004b02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004af6:	4b32      	ldr	r3, [pc, #200]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0ac      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b06:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004b0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b12:	f7fc ff55 	bl	80019c0 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fc ff51 	bl	80019c0 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e099      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b2c:	4b24      	ldr	r3, [pc, #144]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b38:	4b21      	ldr	r3, [pc, #132]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	4b21      	ldr	r3, [pc, #132]	@ (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	0112      	lsls	r2, r2, #4
 8004b4c:	4311      	orrs	r1, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b52:	0212      	lsls	r2, r2, #8
 8004b54:	4311      	orrs	r1, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b5a:	0852      	lsrs	r2, r2, #1
 8004b5c:	3a01      	subs	r2, #1
 8004b5e:	0552      	lsls	r2, r2, #21
 8004b60:	4311      	orrs	r1, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b66:	0852      	lsrs	r2, r2, #1
 8004b68:	3a01      	subs	r2, #1
 8004b6a:	0652      	lsls	r2, r2, #25
 8004b6c:	4311      	orrs	r1, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b72:	06d2      	lsls	r2, r2, #27
 8004b74:	430a      	orrs	r2, r1
 8004b76:	4912      	ldr	r1, [pc, #72]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b7c:	4b10      	ldr	r3, [pc, #64]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004b82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b88:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b94:	f7fc ff14 	bl	80019c0 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fc ff10 	bl	80019c0 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e058      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bae:	4b04      	ldr	r3, [pc, #16]	@ (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bba:	e050      	b.n	8004c5e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e04f      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc8:	4b27      	ldr	r3, [pc, #156]	@ (8004c68 <HAL_RCC_OscConfig+0x82c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d144      	bne.n	8004c5e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bd4:	4b24      	ldr	r3, [pc, #144]	@ (8004c68 <HAL_RCC_OscConfig+0x82c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a23      	ldr	r2, [pc, #140]	@ (8004c68 <HAL_RCC_OscConfig+0x82c>)
 8004bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004be0:	4b21      	ldr	r3, [pc, #132]	@ (8004c68 <HAL_RCC_OscConfig+0x82c>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	4a20      	ldr	r2, [pc, #128]	@ (8004c68 <HAL_RCC_OscConfig+0x82c>)
 8004be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bec:	f7fc fee8 	bl	80019c0 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fc fee4 	bl	80019c0 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e02c      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c06:	4b18      	ldr	r3, [pc, #96]	@ (8004c68 <HAL_RCC_OscConfig+0x82c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x7b8>
 8004c12:	e024      	b.n	8004c5e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d01f      	beq.n	8004c5a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1a:	4b13      	ldr	r3, [pc, #76]	@ (8004c68 <HAL_RCC_OscConfig+0x82c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a12      	ldr	r2, [pc, #72]	@ (8004c68 <HAL_RCC_OscConfig+0x82c>)
 8004c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c26:	f7fc fecb 	bl	80019c0 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2e:	f7fc fec7 	bl	80019c0 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e00f      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c40:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <HAL_RCC_OscConfig+0x82c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f0      	bne.n	8004c2e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c4c:	4b06      	ldr	r3, [pc, #24]	@ (8004c68 <HAL_RCC_OscConfig+0x82c>)
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	4905      	ldr	r1, [pc, #20]	@ (8004c68 <HAL_RCC_OscConfig+0x82c>)
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <HAL_RCC_OscConfig+0x830>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	60cb      	str	r3, [r1, #12]
 8004c58:	e001      	b.n	8004c5e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3720      	adds	r7, #32
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	feeefffc 	.word	0xfeeefffc

08004c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e11d      	b.n	8004ec4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c88:	4b90      	ldr	r3, [pc, #576]	@ (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d910      	bls.n	8004cb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b8d      	ldr	r3, [pc, #564]	@ (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 020f 	bic.w	r2, r3, #15
 8004c9e:	498b      	ldr	r1, [pc, #556]	@ (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	4b89      	ldr	r3, [pc, #548]	@ (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e105      	b.n	8004ec4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d010      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b81      	ldr	r3, [pc, #516]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d908      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	497b      	ldr	r1, [pc, #492]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d079      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d11e      	bne.n	8004d38 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfa:	4b75      	ldr	r3, [pc, #468]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0dc      	b.n	8004ec4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004d0a:	f000 fa09 	bl	8005120 <RCC_GetSysClockFreqFromPLLSource>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	4a70      	ldr	r2, [pc, #448]	@ (8004ed4 <HAL_RCC_ClockConfig+0x264>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d946      	bls.n	8004da4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d16:	4b6e      	ldr	r3, [pc, #440]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d140      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d22:	4b6b      	ldr	r3, [pc, #428]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d2a:	4a69      	ldr	r2, [pc, #420]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d32:	2380      	movs	r3, #128	@ 0x80
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e035      	b.n	8004da4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d107      	bne.n	8004d50 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d40:	4b63      	ldr	r3, [pc, #396]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d115      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0b9      	b.n	8004ec4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d58:	4b5d      	ldr	r3, [pc, #372]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0ad      	b.n	8004ec4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d68:	4b59      	ldr	r3, [pc, #356]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0a5      	b.n	8004ec4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004d78:	f000 f8b4 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4a55      	ldr	r2, [pc, #340]	@ (8004ed4 <HAL_RCC_ClockConfig+0x264>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d90f      	bls.n	8004da4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d84:	4b52      	ldr	r3, [pc, #328]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d90:	4b4f      	ldr	r3, [pc, #316]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d98:	4a4d      	ldr	r2, [pc, #308]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d9e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004da0:	2380      	movs	r3, #128	@ 0x80
 8004da2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004da4:	4b4a      	ldr	r3, [pc, #296]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f023 0203 	bic.w	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4947      	ldr	r1, [pc, #284]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db6:	f7fc fe03 	bl	80019c0 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dbe:	f7fc fdff 	bl	80019c0 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e077      	b.n	8004ec4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 020c 	and.w	r2, r3, #12
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d1eb      	bne.n	8004dbe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b80      	cmp	r3, #128	@ 0x80
 8004dea:	d105      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004dec:	4b38      	ldr	r3, [pc, #224]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a37      	ldr	r2, [pc, #220]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004df2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004df6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d010      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	4b31      	ldr	r3, [pc, #196]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d208      	bcs.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e14:	4b2e      	ldr	r3, [pc, #184]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	492b      	ldr	r1, [pc, #172]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e26:	4b29      	ldr	r3, [pc, #164]	@ (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d210      	bcs.n	8004e56 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e34:	4b25      	ldr	r3, [pc, #148]	@ (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f023 020f 	bic.w	r2, r3, #15
 8004e3c:	4923      	ldr	r1, [pc, #140]	@ (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e44:	4b21      	ldr	r3, [pc, #132]	@ (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d001      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e036      	b.n	8004ec4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e62:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	4918      	ldr	r1, [pc, #96]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d009      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e80:	4b13      	ldr	r3, [pc, #76]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	4910      	ldr	r1, [pc, #64]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e94:	f000 f826 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	490c      	ldr	r1, [pc, #48]	@ (8004ed8 <HAL_RCC_ClockConfig+0x268>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004edc <HAL_RCC_ClockConfig+0x26c>)
 8004eb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <HAL_RCC_ClockConfig+0x270>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fc fd31 	bl	8001920 <HAL_InitTick>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40022000 	.word	0x40022000
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	04c4b400 	.word	0x04c4b400
 8004ed8:	08007044 	.word	0x08007044
 8004edc:	20000004 	.word	0x20000004
 8004ee0:	20000008 	.word	0x20000008

08004ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b089      	sub	sp, #36	@ 0x24
 8004ee8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004efc:	4b3b      	ldr	r3, [pc, #236]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0303 	and.w	r3, r3, #3
 8004f04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0x34>
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b0c      	cmp	r3, #12
 8004f10:	d121      	bne.n	8004f56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d11e      	bne.n	8004f56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f18:	4b34      	ldr	r3, [pc, #208]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d107      	bne.n	8004f34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f24:	4b31      	ldr	r3, [pc, #196]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e005      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f34:	4b2d      	ldr	r3, [pc, #180]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f40:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10d      	bne.n	8004f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f54:	e00a      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d102      	bne.n	8004f62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f5c:	4b25      	ldr	r3, [pc, #148]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	e004      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d101      	bne.n	8004f6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f68:	4b23      	ldr	r3, [pc, #140]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	d134      	bne.n	8004fdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f72:	4b1e      	ldr	r3, [pc, #120]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d003      	beq.n	8004f8a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d003      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0xac>
 8004f88:	e005      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f8c:	617b      	str	r3, [r7, #20]
      break;
 8004f8e:	e005      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f90:	4b19      	ldr	r3, [pc, #100]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f92:	617b      	str	r3, [r7, #20]
      break;
 8004f94:	e002      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	617b      	str	r3, [r7, #20]
      break;
 8004f9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f9c:	4b13      	ldr	r3, [pc, #76]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004faa:	4b10      	ldr	r3, [pc, #64]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	fb03 f202 	mul.w	r2, r3, r2
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	0e5b      	lsrs	r3, r3, #25
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	3301      	adds	r3, #1
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3724      	adds	r7, #36	@ 0x24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	0800705c 	.word	0x0800705c
 8004ff4:	00f42400 	.word	0x00f42400
 8004ff8:	007a1200 	.word	0x007a1200

08004ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005000:	4b03      	ldr	r3, [pc, #12]	@ (8005010 <HAL_RCC_GetHCLKFreq+0x14>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000004 	.word	0x20000004

08005014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005018:	f7ff fff0 	bl	8004ffc <HAL_RCC_GetHCLKFreq>
 800501c:	4602      	mov	r2, r0
 800501e:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	4904      	ldr	r1, [pc, #16]	@ (800503c <HAL_RCC_GetPCLK1Freq+0x28>)
 800502a:	5ccb      	ldrb	r3, [r1, r3]
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	08007054 	.word	0x08007054

08005040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005044:	f7ff ffda 	bl	8004ffc <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b06      	ldr	r3, [pc, #24]	@ (8005064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0adb      	lsrs	r3, r3, #11
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4904      	ldr	r1, [pc, #16]	@ (8005068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40021000 	.word	0x40021000
 8005068:	08007054 	.word	0x08007054

0800506c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005078:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800507c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005084:	f7ff f916 	bl	80042b4 <HAL_PWREx_GetVoltageRange>
 8005088:	6178      	str	r0, [r7, #20]
 800508a:	e014      	b.n	80050b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800508c:	4b22      	ldr	r3, [pc, #136]	@ (8005118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800508e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005090:	4a21      	ldr	r2, [pc, #132]	@ (8005118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005096:	6593      	str	r3, [r2, #88]	@ 0x58
 8005098:	4b1f      	ldr	r3, [pc, #124]	@ (8005118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800509a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050a4:	f7ff f906 	bl	80042b4 <HAL_PWREx_GetVoltageRange>
 80050a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050bc:	d10b      	bne.n	80050d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b80      	cmp	r3, #128	@ 0x80
 80050c2:	d913      	bls.n	80050ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80050c8:	d902      	bls.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ca:	2302      	movs	r3, #2
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e00d      	b.n	80050ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050d0:	2301      	movs	r3, #1
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	e00a      	b.n	80050ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80050da:	d902      	bls.n	80050e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80050dc:	2302      	movs	r3, #2
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	e004      	b.n	80050ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b70      	cmp	r3, #112	@ 0x70
 80050e6:	d101      	bne.n	80050ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050e8:	2301      	movs	r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050ec:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f023 020f 	bic.w	r2, r3, #15
 80050f4:	4909      	ldr	r1, [pc, #36]	@ (800511c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050fc:	4b07      	ldr	r3, [pc, #28]	@ (800511c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	429a      	cmp	r2, r3
 8005108:	d001      	beq.n	800510e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40021000 	.word	0x40021000
 800511c:	40022000 	.word	0x40022000

08005120 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005126:	4b2d      	ldr	r3, [pc, #180]	@ (80051dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d00b      	beq.n	800514e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b03      	cmp	r3, #3
 800513a:	d825      	bhi.n	8005188 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d008      	beq.n	8005154 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d11f      	bne.n	8005188 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005148:	4b25      	ldr	r3, [pc, #148]	@ (80051e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800514a:	613b      	str	r3, [r7, #16]
    break;
 800514c:	e01f      	b.n	800518e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800514e:	4b25      	ldr	r3, [pc, #148]	@ (80051e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005150:	613b      	str	r3, [r7, #16]
    break;
 8005152:	e01c      	b.n	800518e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005154:	4b21      	ldr	r3, [pc, #132]	@ (80051dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d107      	bne.n	8005170 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005160:	4b1e      	ldr	r3, [pc, #120]	@ (80051dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005166:	0a1b      	lsrs	r3, r3, #8
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	e005      	b.n	800517c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005170:	4b1a      	ldr	r3, [pc, #104]	@ (80051dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800517c:	4a1a      	ldr	r2, [pc, #104]	@ (80051e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005184:	613b      	str	r3, [r7, #16]
    break;
 8005186:	e002      	b.n	800518e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	613b      	str	r3, [r7, #16]
    break;
 800518c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800518e:	4b13      	ldr	r3, [pc, #76]	@ (80051dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	091b      	lsrs	r3, r3, #4
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	3301      	adds	r3, #1
 800519a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800519c:	4b0f      	ldr	r3, [pc, #60]	@ (80051dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	0a1b      	lsrs	r3, r3, #8
 80051a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	fb03 f202 	mul.w	r2, r3, r2
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051b4:	4b09      	ldr	r3, [pc, #36]	@ (80051dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	0e5b      	lsrs	r3, r3, #25
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	3301      	adds	r3, #1
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80051ce:	683b      	ldr	r3, [r7, #0]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	40021000 	.word	0x40021000
 80051e0:	00f42400 	.word	0x00f42400
 80051e4:	007a1200 	.word	0x007a1200
 80051e8:	0800705c 	.word	0x0800705c

080051ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051f4:	2300      	movs	r3, #0
 80051f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051f8:	2300      	movs	r3, #0
 80051fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005204:	2b00      	cmp	r3, #0
 8005206:	d040      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800520c:	2b80      	cmp	r3, #128	@ 0x80
 800520e:	d02a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005210:	2b80      	cmp	r3, #128	@ 0x80
 8005212:	d825      	bhi.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005214:	2b60      	cmp	r3, #96	@ 0x60
 8005216:	d026      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005218:	2b60      	cmp	r3, #96	@ 0x60
 800521a:	d821      	bhi.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800521c:	2b40      	cmp	r3, #64	@ 0x40
 800521e:	d006      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005220:	2b40      	cmp	r3, #64	@ 0x40
 8005222:	d81d      	bhi.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005228:	2b20      	cmp	r3, #32
 800522a:	d010      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800522c:	e018      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800522e:	4b89      	ldr	r3, [pc, #548]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4a88      	ldr	r2, [pc, #544]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005238:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800523a:	e015      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3304      	adds	r3, #4
 8005240:	2100      	movs	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fb12 	bl	800586c <RCCEx_PLLSAI1_Config>
 8005248:	4603      	mov	r3, r0
 800524a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800524c:	e00c      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3320      	adds	r3, #32
 8005252:	2100      	movs	r1, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fbfd 	bl	8005a54 <RCCEx_PLLSAI2_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800525e:	e003      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	74fb      	strb	r3, [r7, #19]
      break;
 8005264:	e000      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005268:	7cfb      	ldrb	r3, [r7, #19]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10b      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800526e:	4b79      	ldr	r3, [pc, #484]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005270:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005274:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800527c:	4975      	ldr	r1, [pc, #468]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005284:	e001      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005286:	7cfb      	ldrb	r3, [r7, #19]
 8005288:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d047      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529e:	d030      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80052a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a4:	d82a      	bhi.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80052a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052aa:	d02a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80052ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052b0:	d824      	bhi.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80052b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b6:	d008      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80052b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052bc:	d81e      	bhi.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80052c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c6:	d010      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80052c8:	e018      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052ca:	4b62      	ldr	r3, [pc, #392]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	4a61      	ldr	r2, [pc, #388]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052d6:	e015      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fac4 	bl	800586c <RCCEx_PLLSAI1_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052e8:	e00c      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3320      	adds	r3, #32
 80052ee:	2100      	movs	r1, #0
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fbaf 	bl	8005a54 <RCCEx_PLLSAI2_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052fa:	e003      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	74fb      	strb	r3, [r7, #19]
      break;
 8005300:	e000      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005304:	7cfb      	ldrb	r3, [r7, #19]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800530a:	4b52      	ldr	r3, [pc, #328]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800530c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005310:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005318:	494e      	ldr	r1, [pc, #312]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005320:	e001      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 809f 	beq.w	8005472 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005334:	2300      	movs	r3, #0
 8005336:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005338:	4b46      	ldr	r3, [pc, #280]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800533a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00d      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800534e:	4b41      	ldr	r3, [pc, #260]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005352:	4a40      	ldr	r2, [pc, #256]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005358:	6593      	str	r3, [r2, #88]	@ 0x58
 800535a:	4b3e      	ldr	r3, [pc, #248]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005362:	60bb      	str	r3, [r7, #8]
 8005364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005366:	2301      	movs	r3, #1
 8005368:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800536a:	4b3b      	ldr	r3, [pc, #236]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a3a      	ldr	r2, [pc, #232]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005374:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005376:	f7fc fb23 	bl	80019c0 <HAL_GetTick>
 800537a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800537c:	e009      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537e:	f7fc fb1f 	bl	80019c0 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d902      	bls.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	74fb      	strb	r3, [r7, #19]
        break;
 8005390:	e005      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005392:	4b31      	ldr	r3, [pc, #196]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0ef      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800539e:	7cfb      	ldrb	r3, [r7, #19]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d15b      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01f      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d019      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053c2:	4b24      	ldr	r3, [pc, #144]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053ce:	4b21      	ldr	r3, [pc, #132]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053de:	4b1d      	ldr	r3, [pc, #116]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053ee:	4a19      	ldr	r2, [pc, #100]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d016      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fc fade 	bl	80019c0 <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005406:	e00b      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005408:	f7fc fada 	bl	80019c0 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d902      	bls.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	74fb      	strb	r3, [r7, #19]
            break;
 800541e:	e006      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005420:	4b0c      	ldr	r3, [pc, #48]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0ec      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10c      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005434:	4b07      	ldr	r3, [pc, #28]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005444:	4903      	ldr	r1, [pc, #12]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800544c:	e008      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	74bb      	strb	r3, [r7, #18]
 8005452:	e005      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005454:	40021000 	.word	0x40021000
 8005458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005460:	7c7b      	ldrb	r3, [r7, #17]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d105      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005466:	4ba0      	ldr	r3, [pc, #640]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546a:	4a9f      	ldr	r2, [pc, #636]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800546c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005470:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800547e:	4b9a      	ldr	r3, [pc, #616]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005484:	f023 0203 	bic.w	r2, r3, #3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548c:	4996      	ldr	r1, [pc, #600]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054a0:	4b91      	ldr	r3, [pc, #580]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a6:	f023 020c 	bic.w	r2, r3, #12
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	498e      	ldr	r1, [pc, #568]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054c2:	4b89      	ldr	r3, [pc, #548]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d0:	4985      	ldr	r1, [pc, #532]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054e4:	4b80      	ldr	r3, [pc, #512]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f2:	497d      	ldr	r1, [pc, #500]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005506:	4b78      	ldr	r3, [pc, #480]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005514:	4974      	ldr	r1, [pc, #464]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005528:	4b6f      	ldr	r3, [pc, #444]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005536:	496c      	ldr	r1, [pc, #432]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800554a:	4b67      	ldr	r3, [pc, #412]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005550:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005558:	4963      	ldr	r1, [pc, #396]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800556c:	4b5e      	ldr	r3, [pc, #376]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005572:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800557a:	495b      	ldr	r1, [pc, #364]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800558e:	4b56      	ldr	r3, [pc, #344]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005594:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559c:	4952      	ldr	r1, [pc, #328]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055b0:	4b4d      	ldr	r3, [pc, #308]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055be:	494a      	ldr	r1, [pc, #296]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055d2:	4b45      	ldr	r3, [pc, #276]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e0:	4941      	ldr	r1, [pc, #260]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055f4:	4b3c      	ldr	r3, [pc, #240]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055fa:	f023 0203 	bic.w	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005602:	4939      	ldr	r1, [pc, #228]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d028      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005616:	4b34      	ldr	r3, [pc, #208]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005624:	4930      	ldr	r1, [pc, #192]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005630:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005634:	d106      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005636:	4b2c      	ldr	r3, [pc, #176]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	4a2b      	ldr	r2, [pc, #172]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800563c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005640:	60d3      	str	r3, [r2, #12]
 8005642:	e011      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800564c:	d10c      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3304      	adds	r3, #4
 8005652:	2101      	movs	r1, #1
 8005654:	4618      	mov	r0, r3
 8005656:	f000 f909 	bl	800586c <RCCEx_PLLSAI1_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d04d      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005678:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800567c:	d108      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800567e:	4b1a      	ldr	r3, [pc, #104]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005680:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005684:	4a18      	ldr	r2, [pc, #96]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800568a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800568e:	e012      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005690:	4b15      	ldr	r3, [pc, #84]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005696:	4a14      	ldr	r2, [pc, #80]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005698:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800569c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80056a0:	4b11      	ldr	r3, [pc, #68]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056ae:	490e      	ldr	r1, [pc, #56]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056be:	d106      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c0:	4b09      	ldr	r3, [pc, #36]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	4a08      	ldr	r2, [pc, #32]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ca:	60d3      	str	r3, [r2, #12]
 80056cc:	e020      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056d6:	d109      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056d8:	4b03      	ldr	r3, [pc, #12]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4a02      	ldr	r2, [pc, #8]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e2:	60d3      	str	r3, [r2, #12]
 80056e4:	e014      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80056e6:	bf00      	nop
 80056e8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056f4:	d10c      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3304      	adds	r3, #4
 80056fa:	2101      	movs	r1, #1
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f8b5 	bl	800586c <RCCEx_PLLSAI1_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d028      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800571c:	4b4a      	ldr	r3, [pc, #296]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005722:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800572a:	4947      	ldr	r1, [pc, #284]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800573a:	d106      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800573c:	4b42      	ldr	r3, [pc, #264]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	4a41      	ldr	r2, [pc, #260]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005746:	60d3      	str	r3, [r2, #12]
 8005748:	e011      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800574e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005752:	d10c      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	2101      	movs	r1, #1
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f886 	bl	800586c <RCCEx_PLLSAI1_Config>
 8005760:	4603      	mov	r3, r0
 8005762:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005764:	7cfb      	ldrb	r3, [r7, #19]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800576a:	7cfb      	ldrb	r3, [r7, #19]
 800576c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01e      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800577a:	4b33      	ldr	r3, [pc, #204]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800577c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005780:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800578a:	492f      	ldr	r1, [pc, #188]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800579c:	d10c      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3304      	adds	r3, #4
 80057a2:	2102      	movs	r1, #2
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 f861 	bl	800586c <RCCEx_PLLSAI1_Config>
 80057aa:	4603      	mov	r3, r0
 80057ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ae:	7cfb      	ldrb	r3, [r7, #19]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80057b4:	7cfb      	ldrb	r3, [r7, #19]
 80057b6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00b      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057c4:	4b20      	ldr	r3, [pc, #128]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057ca:	f023 0204 	bic.w	r2, r3, #4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057d4:	491c      	ldr	r1, [pc, #112]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00b      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80057e8:	4b17      	ldr	r3, [pc, #92]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057ee:	f023 0218 	bic.w	r2, r3, #24
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f8:	4913      	ldr	r1, [pc, #76]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d017      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800580c:	4b0e      	ldr	r3, [pc, #56]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800580e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005812:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800581c:	490a      	ldr	r1, [pc, #40]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800582a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800582e:	d105      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005830:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4a04      	ldr	r2, [pc, #16]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800583a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800583c:	7cbb      	ldrb	r3, [r7, #18]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40021000 	.word	0x40021000

0800584c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005850:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a04      	ldr	r2, [pc, #16]	@ (8005868 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005856:	f043 0304 	orr.w	r3, r3, #4
 800585a:	6013      	str	r3, [r2, #0]
}
 800585c:	bf00      	nop
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40021000 	.word	0x40021000

0800586c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800587a:	4b72      	ldr	r3, [pc, #456]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00e      	beq.n	80058a4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005886:	4b6f      	ldr	r3, [pc, #444]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0203 	and.w	r2, r3, #3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d103      	bne.n	800589e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
       ||
 800589a:	2b00      	cmp	r3, #0
 800589c:	d142      	bne.n	8005924 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	73fb      	strb	r3, [r7, #15]
 80058a2:	e03f      	b.n	8005924 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d018      	beq.n	80058de <RCCEx_PLLSAI1_Config+0x72>
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d825      	bhi.n	80058fc <RCCEx_PLLSAI1_Config+0x90>
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d002      	beq.n	80058ba <RCCEx_PLLSAI1_Config+0x4e>
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d009      	beq.n	80058cc <RCCEx_PLLSAI1_Config+0x60>
 80058b8:	e020      	b.n	80058fc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058ba:	4b62      	ldr	r3, [pc, #392]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d11d      	bne.n	8005902 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ca:	e01a      	b.n	8005902 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058cc:	4b5d      	ldr	r3, [pc, #372]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d116      	bne.n	8005906 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058dc:	e013      	b.n	8005906 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058de:	4b59      	ldr	r3, [pc, #356]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10f      	bne.n	800590a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058ea:	4b56      	ldr	r3, [pc, #344]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058fa:	e006      	b.n	800590a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005900:	e004      	b.n	800590c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005902:	bf00      	nop
 8005904:	e002      	b.n	800590c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005906:	bf00      	nop
 8005908:	e000      	b.n	800590c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800590a:	bf00      	nop
    }

    if(status == HAL_OK)
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d108      	bne.n	8005924 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005912:	4b4c      	ldr	r3, [pc, #304]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f023 0203 	bic.w	r2, r3, #3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4949      	ldr	r1, [pc, #292]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005920:	4313      	orrs	r3, r2
 8005922:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 8086 	bne.w	8005a38 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800592c:	4b45      	ldr	r3, [pc, #276]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a44      	ldr	r2, [pc, #272]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005932:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005938:	f7fc f842 	bl	80019c0 <HAL_GetTick>
 800593c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800593e:	e009      	b.n	8005954 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005940:	f7fc f83e 	bl	80019c0 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d902      	bls.n	8005954 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	73fb      	strb	r3, [r7, #15]
        break;
 8005952:	e005      	b.n	8005960 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005954:	4b3b      	ldr	r3, [pc, #236]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1ef      	bne.n	8005940 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d168      	bne.n	8005a38 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d113      	bne.n	8005994 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800596c:	4b35      	ldr	r3, [pc, #212]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	4b35      	ldr	r3, [pc, #212]	@ (8005a48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005972:	4013      	ands	r3, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6892      	ldr	r2, [r2, #8]
 8005978:	0211      	lsls	r1, r2, #8
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	68d2      	ldr	r2, [r2, #12]
 800597e:	06d2      	lsls	r2, r2, #27
 8005980:	4311      	orrs	r1, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6852      	ldr	r2, [r2, #4]
 8005986:	3a01      	subs	r2, #1
 8005988:	0112      	lsls	r2, r2, #4
 800598a:	430a      	orrs	r2, r1
 800598c:	492d      	ldr	r1, [pc, #180]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 800598e:	4313      	orrs	r3, r2
 8005990:	610b      	str	r3, [r1, #16]
 8005992:	e02d      	b.n	80059f0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d115      	bne.n	80059c6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800599a:	4b2a      	ldr	r3, [pc, #168]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	4b2b      	ldr	r3, [pc, #172]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6892      	ldr	r2, [r2, #8]
 80059a6:	0211      	lsls	r1, r2, #8
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6912      	ldr	r2, [r2, #16]
 80059ac:	0852      	lsrs	r2, r2, #1
 80059ae:	3a01      	subs	r2, #1
 80059b0:	0552      	lsls	r2, r2, #21
 80059b2:	4311      	orrs	r1, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6852      	ldr	r2, [r2, #4]
 80059b8:	3a01      	subs	r2, #1
 80059ba:	0112      	lsls	r2, r2, #4
 80059bc:	430a      	orrs	r2, r1
 80059be:	4921      	ldr	r1, [pc, #132]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	610b      	str	r3, [r1, #16]
 80059c4:	e014      	b.n	80059f0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	4b21      	ldr	r3, [pc, #132]	@ (8005a50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6892      	ldr	r2, [r2, #8]
 80059d2:	0211      	lsls	r1, r2, #8
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6952      	ldr	r2, [r2, #20]
 80059d8:	0852      	lsrs	r2, r2, #1
 80059da:	3a01      	subs	r2, #1
 80059dc:	0652      	lsls	r2, r2, #25
 80059de:	4311      	orrs	r1, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6852      	ldr	r2, [r2, #4]
 80059e4:	3a01      	subs	r2, #1
 80059e6:	0112      	lsls	r2, r2, #4
 80059e8:	430a      	orrs	r2, r1
 80059ea:	4916      	ldr	r1, [pc, #88]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059f0:	4b14      	ldr	r3, [pc, #80]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a13      	ldr	r2, [pc, #76]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7fb ffe0 	bl	80019c0 <HAL_GetTick>
 8005a00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a02:	e009      	b.n	8005a18 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a04:	f7fb ffdc 	bl	80019c0 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d902      	bls.n	8005a18 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	73fb      	strb	r3, [r7, #15]
          break;
 8005a16:	e005      	b.n	8005a24 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a18:	4b0a      	ldr	r3, [pc, #40]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0ef      	beq.n	8005a04 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a2a:	4b06      	ldr	r3, [pc, #24]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	4904      	ldr	r1, [pc, #16]	@ (8005a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40021000 	.word	0x40021000
 8005a48:	07ff800f 	.word	0x07ff800f
 8005a4c:	ff9f800f 	.word	0xff9f800f
 8005a50:	f9ff800f 	.word	0xf9ff800f

08005a54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a62:	4b72      	ldr	r3, [pc, #456]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00e      	beq.n	8005a8c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a6e:	4b6f      	ldr	r3, [pc, #444]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0203 	and.w	r2, r3, #3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d103      	bne.n	8005a86 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
       ||
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d142      	bne.n	8005b0c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	73fb      	strb	r3, [r7, #15]
 8005a8a:	e03f      	b.n	8005b0c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d018      	beq.n	8005ac6 <RCCEx_PLLSAI2_Config+0x72>
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d825      	bhi.n	8005ae4 <RCCEx_PLLSAI2_Config+0x90>
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d002      	beq.n	8005aa2 <RCCEx_PLLSAI2_Config+0x4e>
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d009      	beq.n	8005ab4 <RCCEx_PLLSAI2_Config+0x60>
 8005aa0:	e020      	b.n	8005ae4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005aa2:	4b62      	ldr	r3, [pc, #392]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11d      	bne.n	8005aea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab2:	e01a      	b.n	8005aea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ab4:	4b5d      	ldr	r3, [pc, #372]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d116      	bne.n	8005aee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac4:	e013      	b.n	8005aee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ac6:	4b59      	ldr	r3, [pc, #356]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10f      	bne.n	8005af2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ad2:	4b56      	ldr	r3, [pc, #344]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ae2:	e006      	b.n	8005af2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae8:	e004      	b.n	8005af4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005aea:	bf00      	nop
 8005aec:	e002      	b.n	8005af4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005aee:	bf00      	nop
 8005af0:	e000      	b.n	8005af4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005af2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d108      	bne.n	8005b0c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005afa:	4b4c      	ldr	r3, [pc, #304]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f023 0203 	bic.w	r2, r3, #3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4949      	ldr	r1, [pc, #292]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 8086 	bne.w	8005c20 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b14:	4b45      	ldr	r3, [pc, #276]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a44      	ldr	r2, [pc, #272]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b20:	f7fb ff4e 	bl	80019c0 <HAL_GetTick>
 8005b24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b26:	e009      	b.n	8005b3c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b28:	f7fb ff4a 	bl	80019c0 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d902      	bls.n	8005b3c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	73fb      	strb	r3, [r7, #15]
        break;
 8005b3a:	e005      	b.n	8005b48 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1ef      	bne.n	8005b28 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d168      	bne.n	8005c20 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d113      	bne.n	8005b7c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b54:	4b35      	ldr	r3, [pc, #212]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	4b35      	ldr	r3, [pc, #212]	@ (8005c30 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6892      	ldr	r2, [r2, #8]
 8005b60:	0211      	lsls	r1, r2, #8
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	68d2      	ldr	r2, [r2, #12]
 8005b66:	06d2      	lsls	r2, r2, #27
 8005b68:	4311      	orrs	r1, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6852      	ldr	r2, [r2, #4]
 8005b6e:	3a01      	subs	r2, #1
 8005b70:	0112      	lsls	r2, r2, #4
 8005b72:	430a      	orrs	r2, r1
 8005b74:	492d      	ldr	r1, [pc, #180]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	614b      	str	r3, [r1, #20]
 8005b7a:	e02d      	b.n	8005bd8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d115      	bne.n	8005bae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b82:	4b2a      	ldr	r3, [pc, #168]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	4b2b      	ldr	r3, [pc, #172]	@ (8005c34 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6892      	ldr	r2, [r2, #8]
 8005b8e:	0211      	lsls	r1, r2, #8
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6912      	ldr	r2, [r2, #16]
 8005b94:	0852      	lsrs	r2, r2, #1
 8005b96:	3a01      	subs	r2, #1
 8005b98:	0552      	lsls	r2, r2, #21
 8005b9a:	4311      	orrs	r1, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6852      	ldr	r2, [r2, #4]
 8005ba0:	3a01      	subs	r2, #1
 8005ba2:	0112      	lsls	r2, r2, #4
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	4921      	ldr	r1, [pc, #132]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	614b      	str	r3, [r1, #20]
 8005bac:	e014      	b.n	8005bd8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bae:	4b1f      	ldr	r3, [pc, #124]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bb0:	695a      	ldr	r2, [r3, #20]
 8005bb2:	4b21      	ldr	r3, [pc, #132]	@ (8005c38 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6892      	ldr	r2, [r2, #8]
 8005bba:	0211      	lsls	r1, r2, #8
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6952      	ldr	r2, [r2, #20]
 8005bc0:	0852      	lsrs	r2, r2, #1
 8005bc2:	3a01      	subs	r2, #1
 8005bc4:	0652      	lsls	r2, r2, #25
 8005bc6:	4311      	orrs	r1, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6852      	ldr	r2, [r2, #4]
 8005bcc:	3a01      	subs	r2, #1
 8005bce:	0112      	lsls	r2, r2, #4
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	4916      	ldr	r1, [pc, #88]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bd8:	4b14      	ldr	r3, [pc, #80]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a13      	ldr	r2, [pc, #76]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be4:	f7fb feec 	bl	80019c0 <HAL_GetTick>
 8005be8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bea:	e009      	b.n	8005c00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bec:	f7fb fee8 	bl	80019c0 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d902      	bls.n	8005c00 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	73fb      	strb	r3, [r7, #15]
          break;
 8005bfe:	e005      	b.n	8005c0c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c00:	4b0a      	ldr	r3, [pc, #40]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ef      	beq.n	8005bec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c12:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	4904      	ldr	r1, [pc, #16]	@ (8005c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	07ff800f 	.word	0x07ff800f
 8005c34:	ff9f800f 	.word	0xff9f800f
 8005c38:	f9ff800f 	.word	0xf9ff800f

08005c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e095      	b.n	8005d7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d108      	bne.n	8005c68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c5e:	d009      	beq.n	8005c74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	61da      	str	r2, [r3, #28]
 8005c66:	e005      	b.n	8005c74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fb fbba 	bl	8001408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005caa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cb4:	d902      	bls.n	8005cbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	e002      	b.n	8005cc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005cca:	d007      	beq.n	8005cdc <HAL_SPI_Init+0xa0>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cd4:	d002      	beq.n	8005cdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d1e:	ea42 0103 	orr.w	r1, r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	0c1b      	lsrs	r3, r3, #16
 8005d38:	f003 0204 	and.w	r2, r3, #4
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d58:	ea42 0103 	orr.w	r1, r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e049      	b.n	8005e28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d106      	bne.n	8005dae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7fb fba3 	bl	80014f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2202      	movs	r2, #2
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	f000 f9d5 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d001      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e04f      	b.n	8005ee8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a23      	ldr	r2, [pc, #140]	@ (8005ef4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01d      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0x76>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e72:	d018      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0x76>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1f      	ldr	r2, [pc, #124]	@ (8005ef8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0x76>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1e      	ldr	r2, [pc, #120]	@ (8005efc <HAL_TIM_Base_Start_IT+0xcc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0x76>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005f00 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0x76>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1b      	ldr	r2, [pc, #108]	@ (8005f04 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0x76>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a19      	ldr	r2, [pc, #100]	@ (8005f08 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d115      	bne.n	8005ed2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	4b17      	ldr	r3, [pc, #92]	@ (8005f0c <HAL_TIM_Base_Start_IT+0xdc>)
 8005eae:	4013      	ands	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b06      	cmp	r3, #6
 8005eb6:	d015      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0xb4>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ebe:	d011      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed0:	e008      	b.n	8005ee4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0201 	orr.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e000      	b.n	8005ee6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40000800 	.word	0x40000800
 8005f00:	40000c00 	.word	0x40000c00
 8005f04:	40013400 	.word	0x40013400
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	00010007 	.word	0x00010007

08005f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d020      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01b      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0202 	mvn.w	r2, #2
 8005f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f8e9 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005f60:	e005      	b.n	8005f6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f8db 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f8ec 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d020      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01b      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0204 	mvn.w	r2, #4
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f8c3 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8b5 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f8c6 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d020      	beq.n	800600c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f003 0308 	and.w	r3, r3, #8
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01b      	beq.n	800600c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0208 	mvn.w	r2, #8
 8005fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f89d 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005ff8:	e005      	b.n	8006006 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f88f 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f8a0 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b00      	cmp	r3, #0
 8006014:	d020      	beq.n	8006058 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01b      	beq.n	8006058 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0210 	mvn.w	r2, #16
 8006028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2208      	movs	r2, #8
 800602e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f877 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8006044:	e005      	b.n	8006052 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f869 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f87a 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00c      	beq.n	800607c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0201 	mvn.w	r2, #1
 8006074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fa ffa2 	bl	8000fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d104      	bne.n	8006090 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00c      	beq.n	80060aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f913 	bl	80062d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00c      	beq.n	80060ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80060c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f90b 	bl	80062e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00c      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f834 	bl	800615a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00c      	beq.n	8006116 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f06f 0220 	mvn.w	r2, #32
 800610e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f8d3 	bl	80062bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a46      	ldr	r2, [pc, #280]	@ (800629c <TIM_Base_SetConfig+0x12c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800618e:	d00f      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a43      	ldr	r2, [pc, #268]	@ (80062a0 <TIM_Base_SetConfig+0x130>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00b      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a42      	ldr	r2, [pc, #264]	@ (80062a4 <TIM_Base_SetConfig+0x134>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a41      	ldr	r2, [pc, #260]	@ (80062a8 <TIM_Base_SetConfig+0x138>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a40      	ldr	r2, [pc, #256]	@ (80062ac <TIM_Base_SetConfig+0x13c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d108      	bne.n	80061c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a35      	ldr	r2, [pc, #212]	@ (800629c <TIM_Base_SetConfig+0x12c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01f      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d0:	d01b      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a32      	ldr	r2, [pc, #200]	@ (80062a0 <TIM_Base_SetConfig+0x130>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d017      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a31      	ldr	r2, [pc, #196]	@ (80062a4 <TIM_Base_SetConfig+0x134>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a30      	ldr	r2, [pc, #192]	@ (80062a8 <TIM_Base_SetConfig+0x138>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a2f      	ldr	r2, [pc, #188]	@ (80062ac <TIM_Base_SetConfig+0x13c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2e      	ldr	r2, [pc, #184]	@ (80062b0 <TIM_Base_SetConfig+0x140>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2d      	ldr	r2, [pc, #180]	@ (80062b4 <TIM_Base_SetConfig+0x144>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2c      	ldr	r2, [pc, #176]	@ (80062b8 <TIM_Base_SetConfig+0x148>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a16      	ldr	r2, [pc, #88]	@ (800629c <TIM_Base_SetConfig+0x12c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00f      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a18      	ldr	r2, [pc, #96]	@ (80062ac <TIM_Base_SetConfig+0x13c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00b      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a17      	ldr	r2, [pc, #92]	@ (80062b0 <TIM_Base_SetConfig+0x140>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d007      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a16      	ldr	r2, [pc, #88]	@ (80062b4 <TIM_Base_SetConfig+0x144>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a15      	ldr	r2, [pc, #84]	@ (80062b8 <TIM_Base_SetConfig+0x148>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d103      	bne.n	8006270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b01      	cmp	r3, #1
 8006280:	d105      	bne.n	800628e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f023 0201 	bic.w	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	611a      	str	r2, [r3, #16]
  }
}
 800628e:	bf00      	nop
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40013400 	.word	0x40013400
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400
 80062b8:	40014800 	.word	0x40014800

080062bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e042      	b.n	8006390 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006310:	2b00      	cmp	r3, #0
 8006312:	d106      	bne.n	8006322 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7fb f90f 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2224      	movs	r2, #36	@ 0x24
 8006326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fb24 	bl	8006990 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f825 	bl	8006398 <UART_SetConfig>
 800634e:	4603      	mov	r3, r0
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e01b      	b.n	8006390 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006376:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fba3 	bl	8006ad4 <UART_CheckIdleState>
 800638e:	4603      	mov	r3, r0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800639c:	b08c      	sub	sp, #48	@ 0x30
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	431a      	orrs	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	4313      	orrs	r3, r2
 80063be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4baa      	ldr	r3, [pc, #680]	@ (8006670 <UART_SetConfig+0x2d8>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063d0:	430b      	orrs	r3, r1
 80063d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a9f      	ldr	r2, [pc, #636]	@ (8006674 <UART_SetConfig+0x2dc>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d004      	beq.n	8006404 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006400:	4313      	orrs	r3, r2
 8006402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800640e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	6812      	ldr	r2, [r2, #0]
 8006416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006418:	430b      	orrs	r3, r1
 800641a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006422:	f023 010f 	bic.w	r1, r3, #15
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a90      	ldr	r2, [pc, #576]	@ (8006678 <UART_SetConfig+0x2e0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d125      	bne.n	8006488 <UART_SetConfig+0xf0>
 800643c:	4b8f      	ldr	r3, [pc, #572]	@ (800667c <UART_SetConfig+0x2e4>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	2b03      	cmp	r3, #3
 8006448:	d81a      	bhi.n	8006480 <UART_SetConfig+0xe8>
 800644a:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <UART_SetConfig+0xb8>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006461 	.word	0x08006461
 8006454:	08006471 	.word	0x08006471
 8006458:	08006469 	.word	0x08006469
 800645c:	08006479 	.word	0x08006479
 8006460:	2301      	movs	r3, #1
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006466:	e116      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006468:	2302      	movs	r3, #2
 800646a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800646e:	e112      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006470:	2304      	movs	r3, #4
 8006472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006476:	e10e      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006478:	2308      	movs	r3, #8
 800647a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800647e:	e10a      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006480:	2310      	movs	r3, #16
 8006482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006486:	e106      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a7c      	ldr	r2, [pc, #496]	@ (8006680 <UART_SetConfig+0x2e8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d138      	bne.n	8006504 <UART_SetConfig+0x16c>
 8006492:	4b7a      	ldr	r3, [pc, #488]	@ (800667c <UART_SetConfig+0x2e4>)
 8006494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006498:	f003 030c 	and.w	r3, r3, #12
 800649c:	2b0c      	cmp	r3, #12
 800649e:	d82d      	bhi.n	80064fc <UART_SetConfig+0x164>
 80064a0:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <UART_SetConfig+0x110>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064dd 	.word	0x080064dd
 80064ac:	080064fd 	.word	0x080064fd
 80064b0:	080064fd 	.word	0x080064fd
 80064b4:	080064fd 	.word	0x080064fd
 80064b8:	080064ed 	.word	0x080064ed
 80064bc:	080064fd 	.word	0x080064fd
 80064c0:	080064fd 	.word	0x080064fd
 80064c4:	080064fd 	.word	0x080064fd
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	080064fd 	.word	0x080064fd
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	080064f5 	.word	0x080064f5
 80064dc:	2300      	movs	r3, #0
 80064de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064e2:	e0d8      	b.n	8006696 <UART_SetConfig+0x2fe>
 80064e4:	2302      	movs	r3, #2
 80064e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ea:	e0d4      	b.n	8006696 <UART_SetConfig+0x2fe>
 80064ec:	2304      	movs	r3, #4
 80064ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064f2:	e0d0      	b.n	8006696 <UART_SetConfig+0x2fe>
 80064f4:	2308      	movs	r3, #8
 80064f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064fa:	e0cc      	b.n	8006696 <UART_SetConfig+0x2fe>
 80064fc:	2310      	movs	r3, #16
 80064fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006502:	e0c8      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a5e      	ldr	r2, [pc, #376]	@ (8006684 <UART_SetConfig+0x2ec>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d125      	bne.n	800655a <UART_SetConfig+0x1c2>
 800650e:	4b5b      	ldr	r3, [pc, #364]	@ (800667c <UART_SetConfig+0x2e4>)
 8006510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006514:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006518:	2b30      	cmp	r3, #48	@ 0x30
 800651a:	d016      	beq.n	800654a <UART_SetConfig+0x1b2>
 800651c:	2b30      	cmp	r3, #48	@ 0x30
 800651e:	d818      	bhi.n	8006552 <UART_SetConfig+0x1ba>
 8006520:	2b20      	cmp	r3, #32
 8006522:	d00a      	beq.n	800653a <UART_SetConfig+0x1a2>
 8006524:	2b20      	cmp	r3, #32
 8006526:	d814      	bhi.n	8006552 <UART_SetConfig+0x1ba>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <UART_SetConfig+0x19a>
 800652c:	2b10      	cmp	r3, #16
 800652e:	d008      	beq.n	8006542 <UART_SetConfig+0x1aa>
 8006530:	e00f      	b.n	8006552 <UART_SetConfig+0x1ba>
 8006532:	2300      	movs	r3, #0
 8006534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006538:	e0ad      	b.n	8006696 <UART_SetConfig+0x2fe>
 800653a:	2302      	movs	r3, #2
 800653c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006540:	e0a9      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006542:	2304      	movs	r3, #4
 8006544:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006548:	e0a5      	b.n	8006696 <UART_SetConfig+0x2fe>
 800654a:	2308      	movs	r3, #8
 800654c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006550:	e0a1      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006552:	2310      	movs	r3, #16
 8006554:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006558:	e09d      	b.n	8006696 <UART_SetConfig+0x2fe>
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a4a      	ldr	r2, [pc, #296]	@ (8006688 <UART_SetConfig+0x2f0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d125      	bne.n	80065b0 <UART_SetConfig+0x218>
 8006564:	4b45      	ldr	r3, [pc, #276]	@ (800667c <UART_SetConfig+0x2e4>)
 8006566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800656a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800656e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006570:	d016      	beq.n	80065a0 <UART_SetConfig+0x208>
 8006572:	2bc0      	cmp	r3, #192	@ 0xc0
 8006574:	d818      	bhi.n	80065a8 <UART_SetConfig+0x210>
 8006576:	2b80      	cmp	r3, #128	@ 0x80
 8006578:	d00a      	beq.n	8006590 <UART_SetConfig+0x1f8>
 800657a:	2b80      	cmp	r3, #128	@ 0x80
 800657c:	d814      	bhi.n	80065a8 <UART_SetConfig+0x210>
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <UART_SetConfig+0x1f0>
 8006582:	2b40      	cmp	r3, #64	@ 0x40
 8006584:	d008      	beq.n	8006598 <UART_SetConfig+0x200>
 8006586:	e00f      	b.n	80065a8 <UART_SetConfig+0x210>
 8006588:	2300      	movs	r3, #0
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800658e:	e082      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006590:	2302      	movs	r3, #2
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006596:	e07e      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006598:	2304      	movs	r3, #4
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800659e:	e07a      	b.n	8006696 <UART_SetConfig+0x2fe>
 80065a0:	2308      	movs	r3, #8
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065a6:	e076      	b.n	8006696 <UART_SetConfig+0x2fe>
 80065a8:	2310      	movs	r3, #16
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ae:	e072      	b.n	8006696 <UART_SetConfig+0x2fe>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a35      	ldr	r2, [pc, #212]	@ (800668c <UART_SetConfig+0x2f4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d12a      	bne.n	8006610 <UART_SetConfig+0x278>
 80065ba:	4b30      	ldr	r3, [pc, #192]	@ (800667c <UART_SetConfig+0x2e4>)
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065c8:	d01a      	beq.n	8006600 <UART_SetConfig+0x268>
 80065ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ce:	d81b      	bhi.n	8006608 <UART_SetConfig+0x270>
 80065d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065d4:	d00c      	beq.n	80065f0 <UART_SetConfig+0x258>
 80065d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065da:	d815      	bhi.n	8006608 <UART_SetConfig+0x270>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <UART_SetConfig+0x250>
 80065e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e4:	d008      	beq.n	80065f8 <UART_SetConfig+0x260>
 80065e6:	e00f      	b.n	8006608 <UART_SetConfig+0x270>
 80065e8:	2300      	movs	r3, #0
 80065ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ee:	e052      	b.n	8006696 <UART_SetConfig+0x2fe>
 80065f0:	2302      	movs	r3, #2
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065f6:	e04e      	b.n	8006696 <UART_SetConfig+0x2fe>
 80065f8:	2304      	movs	r3, #4
 80065fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065fe:	e04a      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006606:	e046      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006608:	2310      	movs	r3, #16
 800660a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800660e:	e042      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a17      	ldr	r2, [pc, #92]	@ (8006674 <UART_SetConfig+0x2dc>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d13a      	bne.n	8006690 <UART_SetConfig+0x2f8>
 800661a:	4b18      	ldr	r3, [pc, #96]	@ (800667c <UART_SetConfig+0x2e4>)
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006620:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006624:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006628:	d01a      	beq.n	8006660 <UART_SetConfig+0x2c8>
 800662a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800662e:	d81b      	bhi.n	8006668 <UART_SetConfig+0x2d0>
 8006630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006634:	d00c      	beq.n	8006650 <UART_SetConfig+0x2b8>
 8006636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800663a:	d815      	bhi.n	8006668 <UART_SetConfig+0x2d0>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <UART_SetConfig+0x2b0>
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006644:	d008      	beq.n	8006658 <UART_SetConfig+0x2c0>
 8006646:	e00f      	b.n	8006668 <UART_SetConfig+0x2d0>
 8006648:	2300      	movs	r3, #0
 800664a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800664e:	e022      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006650:	2302      	movs	r3, #2
 8006652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006656:	e01e      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006658:	2304      	movs	r3, #4
 800665a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800665e:	e01a      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006660:	2308      	movs	r3, #8
 8006662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006666:	e016      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006668:	2310      	movs	r3, #16
 800666a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800666e:	e012      	b.n	8006696 <UART_SetConfig+0x2fe>
 8006670:	cfff69f3 	.word	0xcfff69f3
 8006674:	40008000 	.word	0x40008000
 8006678:	40013800 	.word	0x40013800
 800667c:	40021000 	.word	0x40021000
 8006680:	40004400 	.word	0x40004400
 8006684:	40004800 	.word	0x40004800
 8006688:	40004c00 	.word	0x40004c00
 800668c:	40005000 	.word	0x40005000
 8006690:	2310      	movs	r3, #16
 8006692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4aae      	ldr	r2, [pc, #696]	@ (8006954 <UART_SetConfig+0x5bc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	f040 8097 	bne.w	80067d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	d823      	bhi.n	80066f2 <UART_SetConfig+0x35a>
 80066aa:	a201      	add	r2, pc, #4	@ (adr r2, 80066b0 <UART_SetConfig+0x318>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066d5 	.word	0x080066d5
 80066b4:	080066f3 	.word	0x080066f3
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066f3 	.word	0x080066f3
 80066c0:	080066e3 	.word	0x080066e3
 80066c4:	080066f3 	.word	0x080066f3
 80066c8:	080066f3 	.word	0x080066f3
 80066cc:	080066f3 	.word	0x080066f3
 80066d0:	080066eb 	.word	0x080066eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d4:	f7fe fc9e 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 80066d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066da:	e010      	b.n	80066fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066dc:	4b9e      	ldr	r3, [pc, #632]	@ (8006958 <UART_SetConfig+0x5c0>)
 80066de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066e0:	e00d      	b.n	80066fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066e2:	f7fe fbff 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 80066e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066e8:	e009      	b.n	80066fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066f0:	e005      	b.n	80066fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8130 	beq.w	8006966 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670a:	4a94      	ldr	r2, [pc, #592]	@ (800695c <UART_SetConfig+0x5c4>)
 800670c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006710:	461a      	mov	r2, r3
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	fbb3 f3f2 	udiv	r3, r3, r2
 8006718:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	4413      	add	r3, r2
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	429a      	cmp	r2, r3
 8006728:	d305      	bcc.n	8006736 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	429a      	cmp	r2, r3
 8006734:	d903      	bls.n	800673e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800673c:	e113      	b.n	8006966 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	2200      	movs	r2, #0
 8006742:	60bb      	str	r3, [r7, #8]
 8006744:	60fa      	str	r2, [r7, #12]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	4a84      	ldr	r2, [pc, #528]	@ (800695c <UART_SetConfig+0x5c4>)
 800674c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006750:	b29b      	uxth	r3, r3
 8006752:	2200      	movs	r2, #0
 8006754:	603b      	str	r3, [r7, #0]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800675c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006760:	f7f9 fd4c 	bl	80001fc <__aeabi_uldivmod>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4610      	mov	r0, r2
 800676a:	4619      	mov	r1, r3
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	020b      	lsls	r3, r1, #8
 8006776:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800677a:	0202      	lsls	r2, r0, #8
 800677c:	6979      	ldr	r1, [r7, #20]
 800677e:	6849      	ldr	r1, [r1, #4]
 8006780:	0849      	lsrs	r1, r1, #1
 8006782:	2000      	movs	r0, #0
 8006784:	460c      	mov	r4, r1
 8006786:	4605      	mov	r5, r0
 8006788:	eb12 0804 	adds.w	r8, r2, r4
 800678c:	eb43 0905 	adc.w	r9, r3, r5
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	469a      	mov	sl, r3
 8006798:	4693      	mov	fp, r2
 800679a:	4652      	mov	r2, sl
 800679c:	465b      	mov	r3, fp
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	f7f9 fd2b 	bl	80001fc <__aeabi_uldivmod>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4613      	mov	r3, r2
 80067ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067b4:	d308      	bcc.n	80067c8 <UART_SetConfig+0x430>
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067bc:	d204      	bcs.n	80067c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6a3a      	ldr	r2, [r7, #32]
 80067c4:	60da      	str	r2, [r3, #12]
 80067c6:	e0ce      	b.n	8006966 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80067ce:	e0ca      	b.n	8006966 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067d8:	d166      	bne.n	80068a8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80067da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d827      	bhi.n	8006832 <UART_SetConfig+0x49a>
 80067e2:	a201      	add	r2, pc, #4	@ (adr r2, 80067e8 <UART_SetConfig+0x450>)
 80067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	08006815 	.word	0x08006815
 80067f0:	0800681d 	.word	0x0800681d
 80067f4:	08006833 	.word	0x08006833
 80067f8:	08006823 	.word	0x08006823
 80067fc:	08006833 	.word	0x08006833
 8006800:	08006833 	.word	0x08006833
 8006804:	08006833 	.word	0x08006833
 8006808:	0800682b 	.word	0x0800682b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fe fc02 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 8006810:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006812:	e014      	b.n	800683e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006814:	f7fe fc14 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 8006818:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800681a:	e010      	b.n	800683e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800681c:	4b4e      	ldr	r3, [pc, #312]	@ (8006958 <UART_SetConfig+0x5c0>)
 800681e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006820:	e00d      	b.n	800683e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006822:	f7fe fb5f 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8006826:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006828:	e009      	b.n	800683e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006830:	e005      	b.n	800683e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800683c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8090 	beq.w	8006966 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	4a44      	ldr	r2, [pc, #272]	@ (800695c <UART_SetConfig+0x5c4>)
 800684c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006850:	461a      	mov	r2, r3
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	fbb3 f3f2 	udiv	r3, r3, r2
 8006858:	005a      	lsls	r2, r3, #1
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	441a      	add	r2, r3
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	fbb2 f3f3 	udiv	r3, r2, r3
 800686a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	2b0f      	cmp	r3, #15
 8006870:	d916      	bls.n	80068a0 <UART_SetConfig+0x508>
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006878:	d212      	bcs.n	80068a0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	b29b      	uxth	r3, r3
 800687e:	f023 030f 	bic.w	r3, r3, #15
 8006882:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	b29b      	uxth	r3, r3
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	b29a      	uxth	r2, r3
 8006890:	8bfb      	ldrh	r3, [r7, #30]
 8006892:	4313      	orrs	r3, r2
 8006894:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	8bfa      	ldrh	r2, [r7, #30]
 800689c:	60da      	str	r2, [r3, #12]
 800689e:	e062      	b.n	8006966 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068a6:	e05e      	b.n	8006966 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d828      	bhi.n	8006902 <UART_SetConfig+0x56a>
 80068b0:	a201      	add	r2, pc, #4	@ (adr r2, 80068b8 <UART_SetConfig+0x520>)
 80068b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b6:	bf00      	nop
 80068b8:	080068dd 	.word	0x080068dd
 80068bc:	080068e5 	.word	0x080068e5
 80068c0:	080068ed 	.word	0x080068ed
 80068c4:	08006903 	.word	0x08006903
 80068c8:	080068f3 	.word	0x080068f3
 80068cc:	08006903 	.word	0x08006903
 80068d0:	08006903 	.word	0x08006903
 80068d4:	08006903 	.word	0x08006903
 80068d8:	080068fb 	.word	0x080068fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068dc:	f7fe fb9a 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 80068e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068e2:	e014      	b.n	800690e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068e4:	f7fe fbac 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 80068e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068ea:	e010      	b.n	800690e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006958 <UART_SetConfig+0x5c0>)
 80068ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068f0:	e00d      	b.n	800690e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068f2:	f7fe faf7 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 80068f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068f8:	e009      	b.n	800690e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006900:	e005      	b.n	800690e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800690c:	bf00      	nop
    }

    if (pclk != 0U)
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	2b00      	cmp	r3, #0
 8006912:	d028      	beq.n	8006966 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006918:	4a10      	ldr	r2, [pc, #64]	@ (800695c <UART_SetConfig+0x5c4>)
 800691a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800691e:	461a      	mov	r2, r3
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	fbb3 f2f2 	udiv	r2, r3, r2
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	441a      	add	r2, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	fbb2 f3f3 	udiv	r3, r2, r3
 8006936:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	2b0f      	cmp	r3, #15
 800693c:	d910      	bls.n	8006960 <UART_SetConfig+0x5c8>
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006944:	d20c      	bcs.n	8006960 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	b29a      	uxth	r2, r3
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60da      	str	r2, [r3, #12]
 8006950:	e009      	b.n	8006966 <UART_SetConfig+0x5ce>
 8006952:	bf00      	nop
 8006954:	40008000 	.word	0x40008000
 8006958:	00f42400 	.word	0x00f42400
 800695c:	0800708c 	.word	0x0800708c
      }
      else
      {
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2201      	movs	r2, #1
 800696a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2201      	movs	r2, #1
 8006972:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2200      	movs	r2, #0
 800697a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2200      	movs	r2, #0
 8006980:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006982:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006986:	4618      	mov	r0, r3
 8006988:	3730      	adds	r7, #48	@ 0x30
 800698a:	46bd      	mov	sp, r7
 800698c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01a      	beq.n	8006aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a8e:	d10a      	bne.n	8006aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	605a      	str	r2, [r3, #4]
  }
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b098      	sub	sp, #96	@ 0x60
 8006ad8:	af02      	add	r7, sp, #8
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ae4:	f7fa ff6c 	bl	80019c0 <HAL_GetTick>
 8006ae8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d12f      	bne.n	8006b58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b00:	2200      	movs	r2, #0
 8006b02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f88e 	bl	8006c28 <UART_WaitOnFlagUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d022      	beq.n	8006b58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b26:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e6      	bne.n	8006b12 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e063      	b.n	8006c20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d149      	bne.n	8006bfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f857 	bl	8006c28 <UART_WaitOnFlagUntilTimeout>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d03c      	beq.n	8006bfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ba0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e6      	bne.n	8006b80 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd2:	61fa      	str	r2, [r7, #28]
 8006bd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	69b9      	ldr	r1, [r7, #24]
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	617b      	str	r3, [r7, #20]
   return(result);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e5      	bne.n	8006bb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e012      	b.n	8006c20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3758      	adds	r7, #88	@ 0x58
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	4613      	mov	r3, r2
 8006c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c38:	e04f      	b.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c40:	d04b      	beq.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c42:	f7fa febd 	bl	80019c0 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d302      	bcc.n	8006c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e04e      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0304 	and.w	r3, r3, #4
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d037      	beq.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b80      	cmp	r3, #128	@ 0x80
 8006c6e:	d034      	beq.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b40      	cmp	r3, #64	@ 0x40
 8006c74:	d031      	beq.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d110      	bne.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2208      	movs	r2, #8
 8006c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f838 	bl	8006d02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2208      	movs	r2, #8
 8006c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e029      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb4:	d111      	bne.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f81e 	bl	8006d02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e00f      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69da      	ldr	r2, [r3, #28]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	bf0c      	ite	eq
 8006cea:	2301      	moveq	r3, #1
 8006cec:	2300      	movne	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d0a0      	beq.n	8006c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b095      	sub	sp, #84	@ 0x54
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e6      	bne.n	8006d0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3308      	adds	r3, #8
 8006d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e3      	bne.n	8006d3c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d118      	bne.n	8006dae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	e853 3f00 	ldrex	r3, [r3]
 8006d88:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f023 0310 	bic.w	r3, r3, #16
 8006d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9a:	61bb      	str	r3, [r7, #24]
 8006d9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	6979      	ldr	r1, [r7, #20]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	e841 2300 	strex	r3, r2, [r1]
 8006da6:	613b      	str	r3, [r7, #16]
   return(result);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1e6      	bne.n	8006d7c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006dc2:	bf00      	nop
 8006dc4:	3754      	adds	r7, #84	@ 0x54
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_UARTEx_DisableFifoMode+0x16>
 8006de0:	2302      	movs	r3, #2
 8006de2:	e027      	b.n	8006e34 <HAL_UARTEx_DisableFifoMode+0x66>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2224      	movs	r2, #36	@ 0x24
 8006df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0201 	bic.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006e12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e02d      	b.n	8006eb4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2224      	movs	r2, #36	@ 0x24
 8006e64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0201 	bic.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f84f 	bl	8006f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e02d      	b.n	8006f30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2224      	movs	r2, #36	@ 0x24
 8006ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f811 	bl	8006f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d108      	bne.n	8006f5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f58:	e031      	b.n	8006fbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f5e:	2308      	movs	r3, #8
 8006f60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	0e5b      	lsrs	r3, r3, #25
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f003 0307 	and.w	r3, r3, #7
 8006f70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	0f5b      	lsrs	r3, r3, #29
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	7b3a      	ldrb	r2, [r7, #12]
 8006f86:	4911      	ldr	r1, [pc, #68]	@ (8006fcc <UARTEx_SetNbDataToProcess+0x94>)
 8006f88:	5c8a      	ldrb	r2, [r1, r2]
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f8e:	7b3a      	ldrb	r2, [r7, #12]
 8006f90:	490f      	ldr	r1, [pc, #60]	@ (8006fd0 <UARTEx_SetNbDataToProcess+0x98>)
 8006f92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f94:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	7b7a      	ldrb	r2, [r7, #13]
 8006fa4:	4909      	ldr	r1, [pc, #36]	@ (8006fcc <UARTEx_SetNbDataToProcess+0x94>)
 8006fa6:	5c8a      	ldrb	r2, [r1, r2]
 8006fa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006fac:	7b7a      	ldrb	r2, [r7, #13]
 8006fae:	4908      	ldr	r1, [pc, #32]	@ (8006fd0 <UARTEx_SetNbDataToProcess+0x98>)
 8006fb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	080070a4 	.word	0x080070a4
 8006fd0:	080070ac 	.word	0x080070ac

08006fd4 <memset>:
 8006fd4:	4402      	add	r2, r0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d100      	bne.n	8006fde <memset+0xa>
 8006fdc:	4770      	bx	lr
 8006fde:	f803 1b01 	strb.w	r1, [r3], #1
 8006fe2:	e7f9      	b.n	8006fd8 <memset+0x4>

08006fe4 <__libc_init_array>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800701c <__libc_init_array+0x38>)
 8006fe8:	4c0d      	ldr	r4, [pc, #52]	@ (8007020 <__libc_init_array+0x3c>)
 8006fea:	1b64      	subs	r4, r4, r5
 8006fec:	10a4      	asrs	r4, r4, #2
 8006fee:	2600      	movs	r6, #0
 8006ff0:	42a6      	cmp	r6, r4
 8006ff2:	d109      	bne.n	8007008 <__libc_init_array+0x24>
 8006ff4:	4d0b      	ldr	r5, [pc, #44]	@ (8007024 <__libc_init_array+0x40>)
 8006ff6:	4c0c      	ldr	r4, [pc, #48]	@ (8007028 <__libc_init_array+0x44>)
 8006ff8:	f000 f818 	bl	800702c <_init>
 8006ffc:	1b64      	subs	r4, r4, r5
 8006ffe:	10a4      	asrs	r4, r4, #2
 8007000:	2600      	movs	r6, #0
 8007002:	42a6      	cmp	r6, r4
 8007004:	d105      	bne.n	8007012 <__libc_init_array+0x2e>
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	f855 3b04 	ldr.w	r3, [r5], #4
 800700c:	4798      	blx	r3
 800700e:	3601      	adds	r6, #1
 8007010:	e7ee      	b.n	8006ff0 <__libc_init_array+0xc>
 8007012:	f855 3b04 	ldr.w	r3, [r5], #4
 8007016:	4798      	blx	r3
 8007018:	3601      	adds	r6, #1
 800701a:	e7f2      	b.n	8007002 <__libc_init_array+0x1e>
 800701c:	080070bc 	.word	0x080070bc
 8007020:	080070bc 	.word	0x080070bc
 8007024:	080070bc 	.word	0x080070bc
 8007028:	080070c0 	.word	0x080070c0

0800702c <_init>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	bf00      	nop
 8007030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007032:	bc08      	pop	{r3}
 8007034:	469e      	mov	lr, r3
 8007036:	4770      	bx	lr

08007038 <_fini>:
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	bf00      	nop
 800703c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800703e:	bc08      	pop	{r3}
 8007040:	469e      	mov	lr, r3
 8007042:	4770      	bx	lr
