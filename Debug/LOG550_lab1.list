
LOG550_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e08  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009fc4  08009fc4  0000afc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a034  0800a034  0000c020  2**0
                  CONTENTS
  4 .ARM          00000008  0800a034  0800a034  0000b034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a03c  0800a03c  0000c020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a03c  0800a03c  0000b03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a040  0800a040  0000b040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800a044  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000020  0800a064  0000c020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800a064  0000c604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002377f  00000000  00000000  0000c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d56  00000000  00000000  0002f7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  00033528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001875  00000000  00000000  00035448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ecc8  00000000  00000000  00036cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002445e  00000000  00000000  00065985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125ceb  00000000  00000000  00089de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aface  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086dc  00000000  00000000  001afb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001b81f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000020 	.word	0x20000020
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08009fac 	.word	0x08009fac

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000024 	.word	0x20000024
 80001f8:	08009fac 	.word	0x08009fac

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f001 fde2 	bl	80020b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f83c 	bl	8000570 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f8:	f000 f89c 	bl	8000634 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fc3a 	bl	8000d74 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000500:	f000 f8c8 	bl	8000694 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000504:	f000 f92a 	bl	800075c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000508:	f000 f960 	bl	80007cc <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f99e 	bl	800084c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000510:	f000 f9dc 	bl	80008cc <MX_OCTOSPI1_Init>
  MX_SPI3_Init();
 8000514:	f000 fa30 	bl	8000978 <MX_SPI3_Init>
  MX_UART4_Init();
 8000518:	f000 faf2 	bl	8000b00 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800051c:	f000 fb3c 	bl	8000b98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000520:	f000 fb86 	bl	8000c30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000524:	f000 fbd2 	bl	8000ccc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000528:	f000 fc1c 	bl	8000d64 <MX_USB_OTG_FS_USB_Init>
  MX_TIM16_Init();
 800052c:	f000 fa9a 	bl	8000a64 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000530:	f000 fabe 	bl	8000ab0 <MX_TIM17_Init>
  MX_TIM7_Init();
 8000534:	f000 fa5e 	bl	80009f4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &received_data, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	4908      	ldr	r1, [pc, #32]	@ (800055c <main+0x70>)
 800053c:	4808      	ldr	r0, [pc, #32]	@ (8000560 <main+0x74>)
 800053e:	f007 faf9 	bl	8007b34 <HAL_UART_Receive_IT>
  BSP_TSENSOR_Init();
 8000542:	f001 fcdb 	bl	8001efc <BSP_TSENSOR_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 8000546:	4807      	ldr	r0, [pc, #28]	@ (8000564 <main+0x78>)
 8000548:	f006 ff24 	bl	8007394 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 800054c:	4806      	ldr	r0, [pc, #24]	@ (8000568 <main+0x7c>)
 800054e:	f006 ff21 	bl	8007394 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000552:	4806      	ldr	r0, [pc, #24]	@ (800056c <main+0x80>)
 8000554:	f006 ff1e 	bl	8007394 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x6c>
 800055c:	2000056c 	.word	0x2000056c
 8000560:	200003b0 	.word	0x200003b0
 8000564:	20000284 	.word	0x20000284
 8000568:	200002d0 	.word	0x200002d0
 800056c:	20000238 	.word	0x20000238

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	@ 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	@ 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f009 fce8 	bl	8009f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000592:	2000      	movs	r0, #0
 8000594:	f005 f960 	bl	8005858 <HAL_PWREx_ControlVoltageScaling>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800059e:	f000 fe9d 	bl	80012dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a2:	f005 f929 	bl	80057f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005a6:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <SystemClock_Config+0xc0>)
 80005a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005ac:	4a20      	ldr	r2, [pc, #128]	@ (8000630 <SystemClock_Config+0xc0>)
 80005ae:	f023 0318 	bic.w	r3, r3, #24
 80005b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b6:	2314      	movs	r3, #20
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ba:	2301      	movs	r3, #1
 80005bc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005be:	2301      	movs	r3, #1
 80005c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c6:	2360      	movs	r3, #96	@ 0x60
 80005c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ce:	2301      	movs	r3, #1
 80005d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005d6:	233c      	movs	r3, #60	@ 0x3c
 80005d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 f9d8 	bl	80059a0 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005f6:	f000 fe71 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2303      	movs	r3, #3
 8000600:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	2105      	movs	r1, #5
 8000612:	4618      	mov	r0, r3
 8000614:	f005 fdde 	bl	80061d4 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800061e:	f000 fe5d 	bl	80012dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000622:	f006 fbc5 	bl	8006db0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000626:	bf00      	nop
 8000628:	3758      	adds	r7, #88	@ 0x58
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b0a6      	sub	sp, #152	@ 0x98
 8000638:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2294      	movs	r2, #148	@ 0x94
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f009 fc87 	bl	8009f54 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000646:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800064a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800064c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000654:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000658:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800065a:	2301      	movs	r3, #1
 800065c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800065e:	2301      	movs	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000662:	2318      	movs	r3, #24
 8000664:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000672:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8000676:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f006 f868 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000686:	f000 fe29 	bl	80012dc <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3798      	adds	r7, #152	@ 0x98
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006aa:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006ac:	4a29      	ldr	r2, [pc, #164]	@ (8000754 <MX_ADC1_Init+0xc0>)
 80006ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006b0:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b6:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006bc:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c2:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c8:	4b21      	ldr	r3, [pc, #132]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ce:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006dc:	2201      	movs	r2, #1
 80006de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f4:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_ADC1_Init+0xbc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_ADC1_Init+0xbc>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070a:	4811      	ldr	r0, [pc, #68]	@ (8000750 <MX_ADC1_Init+0xbc>)
 800070c:	f001 ff36 	bl	800257c <HAL_ADC_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000716:	f000 fde1 	bl	80012dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_ADC1_Init+0xc4>)
 800071c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071e:	2306      	movs	r3, #6
 8000720:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000726:	237f      	movs	r3, #127	@ 0x7f
 8000728:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800072a:	2304      	movs	r3, #4
 800072c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <MX_ADC1_Init+0xbc>)
 8000738:	f002 faf0 	bl	8002d1c <HAL_ADC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000742:	f000 fdcb 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000003c 	.word	0x2000003c
 8000754:	50040000 	.word	0x50040000
 8000758:	04300002 	.word	0x04300002

0800075c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000762:	4a19      	ldr	r2, [pc, #100]	@ (80007c8 <MX_DFSDM1_Init+0x6c>)
 8000764:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000768:	2201      	movs	r2, #1
 800076a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000774:	2202      	movs	r2, #2
 8000776:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000792:	2204      	movs	r2, #4
 8000794:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 800079e:	2201      	movs	r2, #1
 80007a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 80007b0:	f003 f87a 	bl	80038a8 <HAL_DFSDM_ChannelInit>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80007ba:	f000 fd8f 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000a4 	.word	0x200000a4
 80007c8:	40016040 	.word	0x40016040

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000844 <MX_I2C1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000848 <MX_I2C1_Init+0x7c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007dc:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e2:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	@ (8000840 <MX_I2C1_Init+0x74>)
 8000808:	f003 fcca 	bl	80041a0 <HAL_I2C_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000812:	f000 fd63 	bl	80012dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4809      	ldr	r0, [pc, #36]	@ (8000840 <MX_I2C1_Init+0x74>)
 800081a:	f004 fa7b 	bl	8004d14 <HAL_I2CEx_ConfigAnalogFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 fd5a 	bl	80012dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_I2C1_Init+0x74>)
 800082c:	f004 fabd 	bl	8004daa <HAL_I2CEx_ConfigDigitalFilter>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 fd51 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000dc 	.word	0x200000dc
 8000844:	40005400 	.word	0x40005400
 8000848:	30a175ab 	.word	0x30a175ab

0800084c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_I2C2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <MX_I2C2_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000888:	f003 fc8a 	bl	80041a0 <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 fd23 	bl	80012dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800089a:	f004 fa3b 	bl	8004d14 <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 fd1a 	bl	80012dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_I2C2_Init+0x74>)
 80008ac:	f004 fa7d 	bl	8004daa <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fd11 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000130 	.word	0x20000130
 80008c4:	40005800 	.word	0x40005800
 80008c8:	30a175ab 	.word	0x30a175ab

080008cc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008e0:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 80008e2:	4a24      	ldr	r2, [pc, #144]	@ (8000974 <MX_OCTOSPI1_Init+0xa8>)
 80008e4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008e6:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008ec:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 80008f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80008f8:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 80008fc:	2220      	movs	r2, #32
 80008fe:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000902:	2201      	movs	r2, #1
 8000904:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800090c:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000914:	2201      	movs	r2, #1
 8000916:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 800092c:	2208      	movs	r2, #8
 800092e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000930:	480f      	ldr	r0, [pc, #60]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000932:	f004 fa87 	bl	8004e44 <HAL_OSPI_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 800093c:	f000 fcce 	bl	80012dc <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000948:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800094c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000958:	f004 fb2e 	bl	8004fb8 <HAL_OSPIM_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000962:	f000 fcbb 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000184 	.word	0x20000184
 8000974:	a0001000 	.word	0xa0001000

08000978 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <MX_SPI3_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	@ (80009f0 <MX_SPI3_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_SPI3_Init+0x74>)
 8000984:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000988:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <MX_SPI3_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000990:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_SPI3_Init+0x74>)
 8000992:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000996:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_SPI3_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099e:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <MX_SPI3_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_SPI3_Init+0x74>)
 80009a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_SPI3_Init+0x74>)
 80009ae:	2208      	movs	r2, #8
 80009b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_SPI3_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_SPI3_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_SPI3_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_SPI3_Init+0x74>)
 80009c6:	2207      	movs	r2, #7
 80009c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_SPI3_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_SPI3_Init+0x74>)
 80009d2:	2208      	movs	r2, #8
 80009d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_SPI3_Init+0x74>)
 80009d8:	f006 fbe2 	bl	80071a0 <HAL_SPI_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 fc7b 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001d4 	.word	0x200001d4
 80009f0:	40003c00 	.word	0x40003c00

080009f4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_TIM7_Init+0x68>)
 8000a06:	4a16      	ldr	r2, [pc, #88]	@ (8000a60 <MX_TIM7_Init+0x6c>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1919;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_TIM7_Init+0x68>)
 8000a0c:	f240 727f 	movw	r2, #1919	@ 0x77f
 8000a10:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <MX_TIM7_Init+0x68>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62499;
 8000a18:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <MX_TIM7_Init+0x68>)
 8000a1a:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000a1e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_TIM7_Init+0x68>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a26:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <MX_TIM7_Init+0x68>)
 8000a28:	f006 fc5d 	bl	80072e6 <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000a32:	f000 fc53 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <MX_TIM7_Init+0x68>)
 8000a44:	f006 feec 	bl	8007820 <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000a4e:	f000 fc45 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000238 	.word	0x20000238
 8000a60:	40001400 	.word	0x40001400

08000a64 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_TIM16_Init+0x44>)
 8000a6a:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <MX_TIM16_Init+0x48>)
 8000a6c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 29999;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <MX_TIM16_Init+0x44>)
 8000a70:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000a74:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_TIM16_Init+0x44>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <MX_TIM16_Init+0x44>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_TIM16_Init+0x44>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <MX_TIM16_Init+0x44>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_TIM16_Init+0x44>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_TIM16_Init+0x44>)
 8000a96:	f006 fc26 	bl	80072e6 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000aa0:	f000 fc1c 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000284 	.word	0x20000284
 8000aac:	40014400 	.word	0x40014400

08000ab0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_TIM17_Init+0x48>)
 8000ab6:	4a11      	ldr	r2, [pc, #68]	@ (8000afc <MX_TIM17_Init+0x4c>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1249;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_TIM17_Init+0x48>)
 8000abc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000ac0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <MX_TIM17_Init+0x48>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_TIM17_Init+0x48>)
 8000aca:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000ace:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_TIM17_Init+0x48>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_TIM17_Init+0x48>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_TIM17_Init+0x48>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_TIM17_Init+0x48>)
 8000ae4:	f006 fbff 	bl	80072e6 <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000aee:	f000 fbf5 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200002d0 	.word	0x200002d0
 8000afc:	40014800 	.word	0x40014800

08000b00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b06:	4a23      	ldr	r2, [pc, #140]	@ (8000b94 <MX_UART4_Init+0x94>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b48:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b4a:	f006 ff0f 	bl	800796c <HAL_UART_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b54:	f000 fbc2 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b5c:	f009 f92f 	bl	8009dbe <HAL_UARTEx_SetTxFifoThreshold>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b66:	f000 fbb9 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4808      	ldr	r0, [pc, #32]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b6e:	f009 f964 	bl	8009e3a <HAL_UARTEx_SetRxFifoThreshold>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b78:	f000 fbb0 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_UART4_Init+0x90>)
 8000b7e:	f009 f8e5 	bl	8009d4c <HAL_UARTEx_DisableFifoMode>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 fba8 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000031c 	.word	0x2000031c
 8000b94:	40004c00 	.word	0x40004c00

08000b98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000b9e:	4a23      	ldr	r2, [pc, #140]	@ (8000c2c <MX_USART1_UART_Init+0x94>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be0:	4811      	ldr	r0, [pc, #68]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000be2:	f006 fec3 	bl	800796c <HAL_UART_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bec:	f000 fb76 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000bf4:	f009 f8e3 	bl	8009dbe <HAL_UARTEx_SetTxFifoThreshold>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bfe:	f000 fb6d 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c02:	2100      	movs	r1, #0
 8000c04:	4808      	ldr	r0, [pc, #32]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000c06:	f009 f918 	bl	8009e3a <HAL_UARTEx_SetRxFifoThreshold>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c10:	f000 fb64 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <MX_USART1_UART_Init+0x90>)
 8000c16:	f009 f899 	bl	8009d4c <HAL_UARTEx_DisableFifoMode>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c20:	f000 fb5c 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200003b0 	.word	0x200003b0
 8000c2c:	40013800 	.word	0x40013800

08000c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c36:	4a24      	ldr	r2, [pc, #144]	@ (8000cc8 <MX_USART2_UART_Init+0x98>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3a:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b20      	ldr	r3, [pc, #128]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c5c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c60:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c74:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7a:	4812      	ldr	r0, [pc, #72]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c7c:	f006 fe76 	bl	800796c <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c86:	f000 fb29 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c8e:	f009 f896 	bl	8009dbe <HAL_UARTEx_SetTxFifoThreshold>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c98:	f000 fb20 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4809      	ldr	r0, [pc, #36]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000ca0:	f009 f8cb 	bl	8009e3a <HAL_UARTEx_SetRxFifoThreshold>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000caa:	f000 fb17 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000cb0:	f009 f84c 	bl	8009d4c <HAL_UARTEx_DisableFifoMode>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000cba:	f000 fb0f 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000444 	.word	0x20000444
 8000cc8:	40004400 	.word	0x40004400

08000ccc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000cd2:	4a23      	ldr	r2, [pc, #140]	@ (8000d60 <MX_USART3_UART_Init+0x94>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d14:	4811      	ldr	r0, [pc, #68]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000d16:	f006 fe29 	bl	800796c <HAL_UART_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d20:	f000 fadc 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d24:	2100      	movs	r1, #0
 8000d26:	480d      	ldr	r0, [pc, #52]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000d28:	f009 f849 	bl	8009dbe <HAL_UARTEx_SetTxFifoThreshold>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d32:	f000 fad3 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4808      	ldr	r0, [pc, #32]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000d3a:	f009 f87e 	bl	8009e3a <HAL_UARTEx_SetRxFifoThreshold>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d44:	f000 faca 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d48:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <MX_USART3_UART_Init+0x90>)
 8000d4a:	f008 ffff 	bl	8009d4c <HAL_UARTEx_DisableFifoMode>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d54:	f000 fac2 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200004d8 	.word	0x200004d8
 8000d60:	40004800 	.word	0x40004800

08000d64 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	@ 0x30
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8a:	4b9f      	ldr	r3, [pc, #636]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a9e      	ldr	r2, [pc, #632]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b9c      	ldr	r3, [pc, #624]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b99      	ldr	r3, [pc, #612]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a98      	ldr	r2, [pc, #608]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b96      	ldr	r3, [pc, #600]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dba:	4b93      	ldr	r3, [pc, #588]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	4a92      	ldr	r2, [pc, #584]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc6:	4b90      	ldr	r3, [pc, #576]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	4a8c      	ldr	r2, [pc, #560]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dde:	4b8a      	ldr	r3, [pc, #552]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b87      	ldr	r3, [pc, #540]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	4a86      	ldr	r2, [pc, #536]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df6:	4b84      	ldr	r3, [pc, #528]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e02:	4b81      	ldr	r3, [pc, #516]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	4a80      	ldr	r2, [pc, #512]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0e:	4b7e      	ldr	r3, [pc, #504]	@ (8001008 <MX_GPIO_Init+0x294>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f240 1105 	movw	r1, #261	@ 0x105
 8000e20:	487a      	ldr	r0, [pc, #488]	@ (800100c <MX_GPIO_Init+0x298>)
 8000e22:	f003 f98d 	bl	8004140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000e26:	2200      	movs	r2, #0
 8000e28:	f248 113c 	movw	r1, #33084	@ 0x813c
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e30:	f003 f986 	bl	8004140 <HAL_GPIO_WritePin>
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e34:	2200      	movs	r2, #0
 8000e36:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000e3a:	4875      	ldr	r0, [pc, #468]	@ (8001010 <MX_GPIO_Init+0x29c>)
 8000e3c:	f003 f980 	bl	8004140 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f242 0183 	movw	r1, #8323	@ 0x2083
 8000e46:	4873      	ldr	r0, [pc, #460]	@ (8001014 <MX_GPIO_Init+0x2a0>)
 8000e48:	f003 f97a 	bl	8004140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e52:	4871      	ldr	r0, [pc, #452]	@ (8001018 <MX_GPIO_Init+0x2a4>)
 8000e54:	f003 f974 	bl	8004140 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e58:	f240 1305 	movw	r3, #261	@ 0x105
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4866      	ldr	r0, [pc, #408]	@ (800100c <MX_GPIO_Init+0x298>)
 8000e72:	f002 fee1 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e76:	237a      	movs	r3, #122	@ 0x7a
 8000e78:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e7a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4860      	ldr	r0, [pc, #384]	@ (800100c <MX_GPIO_Init+0x298>)
 8000e8c:	f002 fed4 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e90:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	485c      	ldr	r0, [pc, #368]	@ (8001018 <MX_GPIO_Init+0x2a4>)
 8000ea8:	f002 fec6 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin PA5
                           SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000eac:	f248 133c 	movw	r3, #33084	@ 0x813c
 8000eb0:	61fb      	str	r3, [r7, #28]
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec8:	f002 feb6 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000ecc:	23c0      	movs	r3, #192	@ 0xc0
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000edc:	2305      	movs	r3, #5
 8000ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eea:	f002 fea5 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	4843      	ldr	r0, [pc, #268]	@ (8001010 <MX_GPIO_Init+0x29c>)
 8000f04:	f002 fe98 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	483b      	ldr	r0, [pc, #236]	@ (8001010 <MX_GPIO_Init+0x29c>)
 8000f24:	f002 fe88 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f28:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000f2c:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4833      	ldr	r0, [pc, #204]	@ (8001010 <MX_GPIO_Init+0x29c>)
 8000f42:	f002 fe79 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f46:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8000f4a:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	482d      	ldr	r0, [pc, #180]	@ (8001014 <MX_GPIO_Init+0x2a0>)
 8000f5e:	f002 fe6b 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f62:	f242 0383 	movw	r3, #8323	@ 0x2083
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4826      	ldr	r0, [pc, #152]	@ (8001014 <MX_GPIO_Init+0x2a0>)
 8000f7c:	f002 fe5c 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin PC9 */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|GPIO_PIN_9;
 8000f80:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	481f      	ldr	r0, [pc, #124]	@ (8001018 <MX_GPIO_Init+0x2a4>)
 8000f9a:	f002 fe4d 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f002 fe3f 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000fba:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fcc:	230a      	movs	r3, #10
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fda:	f002 fe2d 	bl	8003c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2017      	movs	r0, #23
 8000fe4:	f002 fc29 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fe8:	2017      	movs	r0, #23
 8000fea:	f002 fc42 	bl	8003872 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2028      	movs	r0, #40	@ 0x28
 8000ff4:	f002 fc21 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ff8:	2028      	movs	r0, #40	@ 0x28
 8000ffa:	f002 fc3a 	bl	8003872 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ffe:	bf00      	nop
 8001000:	3730      	adds	r7, #48	@ 0x30
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	48001000 	.word	0x48001000
 8001010:	48000400 	.word	0x48000400
 8001014:	48000c00 	.word	0x48000c00
 8001018:	48000800 	.word	0x48000800

0800101c <HAL_GPIO_EXTI_Callback>:
#define TEMPERATURE_CHANNEL_MASK  0x01  // 0000 0001
#define SOUND_CHANNEL_MASK  0xFE  // 1111 1110
volatile uint8_t uart_transmission_in_processing = 0; // 0 when uart is not currently sending data

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800102c:	d10a      	bne.n	8001044 <HAL_GPIO_EXTI_Callback+0x28>
	  adc_sampling_1000hz = !adc_sampling_1000hz;
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HAL_GPIO_EXTI_Callback+0x34>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <HAL_GPIO_EXTI_Callback+0x34>)
 8001042:	701a      	strb	r2, [r3, #0]
  }
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	20000001 	.word	0x20000001

08001054 <HAL_TIM_PeriodElapsedCallback>:

volatile  GPIO_PinState led_1_2_state = GPIO_PIN_RESET;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if (htim == &htim16 && acquisition_ON)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4e      	ldr	r2, [pc, #312]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d131      	bne.n	80010c8 <HAL_TIM_PeriodElapsedCallback+0x74>
 8001064:	4b4d      	ldr	r3, [pc, #308]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d02c      	beq.n	80010c8 <HAL_TIM_PeriodElapsedCallback+0x74>
  {
	  sampling_rate_divider = !sampling_rate_divider;
 800106e:	4b4c      	ldr	r3, [pc, #304]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf0c      	ite	eq
 8001078:	2301      	moveq	r3, #1
 800107a:	2300      	movne	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001082:	701a      	strb	r2, [r3, #0]

	  if((!adc_sampling_1000hz) || ((sampling_rate_divider != 0) && adc_sampling_1000hz))
 8001084:	4b47      	ldr	r3, [pc, #284]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x4e>
 800108e:	4b44      	ldr	r3, [pc, #272]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d079      	beq.n	800118c <HAL_TIM_PeriodElapsedCallback+0x138>
 8001098:	4b42      	ldr	r3, [pc, #264]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d074      	beq.n	800118c <HAL_TIM_PeriodElapsedCallback+0x138>
	  {
		if(!adc_result_cleared)
 80010a2:	4b41      	ldr	r3, [pc, #260]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d106      	bne.n	80010ba <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b2:	483e      	ldr	r0, [pc, #248]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 80010b4:	f003 f844 	bl	8004140 <HAL_GPIO_WritePin>
	  if((!adc_sampling_1000hz) || ((sampling_rate_divider != 0) && adc_sampling_1000hz))
 80010b8:	e068      	b.n	800118c <HAL_TIM_PeriodElapsedCallback+0x138>
		}
		else
		{
			HAL_ADC_Start_IT(&hadc1);
 80010ba:	483d      	ldr	r0, [pc, #244]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80010bc:	f001 fba4 	bl	8002808 <HAL_ADC_Start_IT>
			adc_result_cleared = 0;
 80010c0:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
	  if((!adc_sampling_1000hz) || ((sampling_rate_divider != 0) && adc_sampling_1000hz))
 80010c6:	e061      	b.n	800118c <HAL_TIM_PeriodElapsedCallback+0x138>
		}
	  }
  }
  else if (htim == &htim17)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a3a      	ldr	r2, [pc, #232]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d123      	bne.n	8001118 <HAL_TIM_PeriodElapsedCallback+0xc4>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_1_2_state);
 80010d0:	4b39      	ldr	r3, [pc, #228]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	2120      	movs	r1, #32
 80010da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010de:	f003 f82f 	bl	8004140 <HAL_GPIO_WritePin>
	  if(acquisition_ON)
 80010e2:	4b2e      	ldr	r3, [pc, #184]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <HAL_TIM_PeriodElapsedCallback+0xaa>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, led_1_2_state);
 80010ec:	4b32      	ldr	r3, [pc, #200]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010f8:	4830      	ldr	r0, [pc, #192]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x168>)
 80010fa:	f003 f821 	bl	8004140 <HAL_GPIO_WritePin>

	  if(led_1_2_state == GPIO_PIN_SET)
 80010fe:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b01      	cmp	r3, #1
 8001106:	d103      	bne.n	8001110 <HAL_TIM_PeriodElapsedCallback+0xbc>
		  led_1_2_state = GPIO_PIN_RESET;
 8001108:	4b2b      	ldr	r3, [pc, #172]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart1, &encoded_temp,1);
		  }
	  }

  }
}
 800110e:	e03e      	b.n	800118e <HAL_TIM_PeriodElapsedCallback+0x13a>
	  else led_1_2_state = GPIO_PIN_SET;
 8001110:	4b29      	ldr	r3, [pc, #164]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
}
 8001116:	e03a      	b.n	800118e <HAL_TIM_PeriodElapsedCallback+0x13a>
  else if (htim == &htim7)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a29      	ldr	r2, [pc, #164]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d136      	bne.n	800118e <HAL_TIM_PeriodElapsedCallback+0x13a>
	  if(acquisition_ON)
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d031      	beq.n	800118e <HAL_TIM_PeriodElapsedCallback+0x13a>
		  temp_value = BSP_TSENSOR_ReadTemp();
 800112a:	f000 ff03 	bl	8001f34 <BSP_TSENSOR_ReadTemp>
 800112e:	eef0 7a40 	vmov.f32	s15, s0
 8001132:	4b24      	ldr	r3, [pc, #144]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001134:	edc3 7a00 	vstr	s15, [r3]
		  uint8_t encoded_temp = (uint8_t) (temp_value/2);
 8001138:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800113a:	ed93 7a00 	vldr	s14, [r3]
 800113e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114a:	edc7 7a00 	vstr	s15, [r7]
 800114e:	783b      	ldrb	r3, [r7, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	73fb      	strb	r3, [r7, #15]
		  encoded_temp |= TEMPERATURE_CHANNEL_MASK;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]
		  if(uart_transmission_in_processing == 1)
 800115e:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b01      	cmp	r3, #1
 8001166:	d106      	bne.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x122>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800116e:	480f      	ldr	r0, [pc, #60]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001170:	f002 ffe6 	bl	8004140 <HAL_GPIO_WritePin>
}
 8001174:	e00b      	b.n	800118e <HAL_TIM_PeriodElapsedCallback+0x13a>
			  uart_transmission_in_processing = 1;
 8001176:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart1, &encoded_temp,1);
 800117c:	f107 030f 	add.w	r3, r7, #15
 8001180:	2201      	movs	r2, #1
 8001182:	4619      	mov	r1, r3
 8001184:	4811      	ldr	r0, [pc, #68]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001186:	f006 fc41 	bl	8007a0c <HAL_UART_Transmit_IT>
}
 800118a:	e000      	b.n	800118e <HAL_TIM_PeriodElapsedCallback+0x13a>
	  if((!adc_sampling_1000hz) || ((sampling_rate_divider != 0) && adc_sampling_1000hz))
 800118c:	bf00      	nop
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000284 	.word	0x20000284
 800119c:	20000574 	.word	0x20000574
 80011a0:	20000002 	.word	0x20000002
 80011a4:	20000001 	.word	0x20000001
 80011a8:	20000000 	.word	0x20000000
 80011ac:	48000800 	.word	0x48000800
 80011b0:	2000003c 	.word	0x2000003c
 80011b4:	200002d0 	.word	0x200002d0
 80011b8:	2000057d 	.word	0x2000057d
 80011bc:	48000400 	.word	0x48000400
 80011c0:	20000238 	.word	0x20000238
 80011c4:	20000578 	.word	0x20000578
 80011c8:	2000057c 	.word	0x2000057c
 80011cc:	200003b0 	.word	0x200003b0

080011d0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* h)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

	if(h == &hadc1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a18      	ldr	r2, [pc, #96]	@ (800123c <HAL_ADC_ConvCpltCallback+0x6c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d128      	bne.n	8001232 <HAL_ADC_ConvCpltCallback+0x62>
	{
		adc_result = HAL_ADC_GetValue(&hadc1);
 80011e0:	4816      	ldr	r0, [pc, #88]	@ (800123c <HAL_ADC_ConvCpltCallback+0x6c>)
 80011e2:	f001 fbc5 	bl	8002970 <HAL_ADC_GetValue>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a15      	ldr	r2, [pc, #84]	@ (8001240 <HAL_ADC_ConvCpltCallback+0x70>)
 80011ea:	6013      	str	r3, [r2, #0]
		adc_result_cleared = 1;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <HAL_ADC_ConvCpltCallback+0x74>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]

		uint8_t encoded_sound = (uint8_t) (adc_result/2);
 80011f2:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <HAL_ADC_ConvCpltCallback+0x70>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	085b      	lsrs	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	73fb      	strb	r3, [r7, #15]
		encoded_sound &= SOUND_CHANNEL_MASK;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	73fb      	strb	r3, [r7, #15]
		if(uart_transmission_in_processing == 1)
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <HAL_ADC_ConvCpltCallback+0x78>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d106      	bne.n	800121e <HAL_ADC_ConvCpltCallback+0x4e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001216:	480d      	ldr	r0, [pc, #52]	@ (800124c <HAL_ADC_ConvCpltCallback+0x7c>)
 8001218:	f002 ff92 	bl	8004140 <HAL_GPIO_WritePin>
		{
			uart_transmission_in_processing = 1;
			HAL_UART_Transmit_IT(&huart1, &encoded_sound,1);
		}
	}
}
 800121c:	e009      	b.n	8001232 <HAL_ADC_ConvCpltCallback+0x62>
			uart_transmission_in_processing = 1;
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <HAL_ADC_ConvCpltCallback+0x78>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, &encoded_sound,1);
 8001224:	f107 030f 	add.w	r3, r7, #15
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	4808      	ldr	r0, [pc, #32]	@ (8001250 <HAL_ADC_ConvCpltCallback+0x80>)
 800122e:	f006 fbed 	bl	8007a0c <HAL_UART_Transmit_IT>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000003c 	.word	0x2000003c
 8001240:	20000570 	.word	0x20000570
 8001244:	20000000 	.word	0x20000000
 8001248:	2000057c 	.word	0x2000057c
 800124c:	48000800 	.word	0x48000800
 8001250:	200003b0 	.word	0x200003b0

08001254 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a06      	ldr	r2, [pc, #24]	@ (8001278 <HAL_UART_TxCpltCallback+0x24>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d102      	bne.n	800126a <HAL_UART_TxCpltCallback+0x16>
	{
		uart_transmission_in_processing = 0;
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <HAL_UART_TxCpltCallback+0x28>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
	}
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200003b0 	.word	0x200003b0
 800127c:	2000057c 	.word	0x2000057c

08001280 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a10      	ldr	r2, [pc, #64]	@ (80012cc <HAL_UART_RxCpltCallback+0x4c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d118      	bne.n	80012c2 <HAL_UART_RxCpltCallback+0x42>
	{

		if(received_data == 's')
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <HAL_UART_RxCpltCallback+0x50>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b73      	cmp	r3, #115	@ 0x73
 8001296:	d102      	bne.n	800129e <HAL_UART_RxCpltCallback+0x1e>
			acquisition_ON = 1;
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <HAL_UART_RxCpltCallback+0x54>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
		if(received_data == 'x')
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <HAL_UART_RxCpltCallback+0x50>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b78      	cmp	r3, #120	@ 0x78
 80012a4:	d108      	bne.n	80012b8 <HAL_UART_RxCpltCallback+0x38>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ac:	480a      	ldr	r0, [pc, #40]	@ (80012d8 <HAL_UART_RxCpltCallback+0x58>)
 80012ae:	f002 ff47 	bl	8004140 <HAL_GPIO_WritePin>
			acquisition_ON = 0;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <HAL_UART_RxCpltCallback+0x54>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &received_data, 1);
 80012b8:	2201      	movs	r2, #1
 80012ba:	4905      	ldr	r1, [pc, #20]	@ (80012d0 <HAL_UART_RxCpltCallback+0x50>)
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f006 fc39 	bl	8007b34 <HAL_UART_Receive_IT>
	}
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200003b0 	.word	0x200003b0
 80012d0:	2000056c 	.word	0x2000056c
 80012d4:	20000574 	.word	0x20000574
 80012d8:	48000400 	.word	0x48000400

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <Error_Handler+0x8>

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <HAL_MspInit+0x44>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f2:	4a0e      	ldr	r2, [pc, #56]	@ (800132c <HAL_MspInit+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HAL_MspInit+0x44>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_MspInit+0x44>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130a:	4a08      	ldr	r2, [pc, #32]	@ (800132c <HAL_MspInit+0x44>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001310:	6593      	str	r3, [r2, #88]	@ 0x58
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_MspInit+0x44>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	@ (80013b4 <HAL_ADC_MspInit+0x84>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12b      	bne.n	80013aa <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001352:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a18      	ldr	r2, [pc, #96]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 8001358:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001382:	233f      	movs	r3, #63	@ 0x3f
 8001384:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001386:	230b      	movs	r3, #11
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4809      	ldr	r0, [pc, #36]	@ (80013bc <HAL_ADC_MspInit+0x8c>)
 8001396:	f002 fc4f 	bl	8003c38 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2012      	movs	r0, #18
 80013a0:	f002 fa4b 	bl	800383a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80013a4:	2012      	movs	r0, #18
 80013a6:	f002 fa64 	bl	8003872 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	@ 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	50040000 	.word	0x50040000
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48000800 	.word	0x48000800

080013c0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0ae      	sub	sp, #184	@ 0xb8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	2294      	movs	r2, #148	@ 0x94
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f008 fdb7 	bl	8009f54 <memset>
  if(DFSDM1_Init == 0)
 80013e6:	4b25      	ldr	r3, [pc, #148]	@ (800147c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d142      	bne.n	8001474 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80013ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 f9a6 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800140a:	f7ff ff67 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001412:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001418:	6613      	str	r3, [r2, #96]	@ 0x60
 800141a:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	4a15      	ldr	r2, [pc, #84]	@ (8001480 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800142c:	f043 0310 	orr.w	r3, r3, #16
 8001430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001432:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800143e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001458:	2306      	movs	r3, #6
 800145a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	@ (8001484 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001466:	f002 fbe7 	bl	8003c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800146a:	4b04      	ldr	r3, [pc, #16]	@ (800147c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	4a02      	ldr	r2, [pc, #8]	@ (800147c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001472:	6013      	str	r3, [r2, #0]
  }

}
 8001474:	bf00      	nop
 8001476:	37b8      	adds	r7, #184	@ 0xb8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000580 	.word	0x20000580
 8001480:	40021000 	.word	0x40021000
 8001484:	48001000 	.word	0x48001000

08001488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0b0      	sub	sp, #192	@ 0xc0
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	2294      	movs	r2, #148	@ 0x94
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f008 fd53 	bl	8009f54 <memset>
  if(hi2c->Instance==I2C1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a42      	ldr	r2, [pc, #264]	@ (80015bc <HAL_I2C_MspInit+0x134>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d13c      	bne.n	8001532 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014b8:	2340      	movs	r3, #64	@ 0x40
 80014ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014bc:	2300      	movs	r3, #0
 80014be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	4618      	mov	r0, r3
 80014c6:	f005 f943 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014d0:	f7ff ff04 	bl	80012dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b3a      	ldr	r3, [pc, #232]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d8:	4a39      	ldr	r2, [pc, #228]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e0:	4b37      	ldr	r3, [pc, #220]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80014ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f4:	2312      	movs	r3, #18
 80014f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001506:	2304      	movs	r3, #4
 8001508:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001510:	4619      	mov	r1, r3
 8001512:	482c      	ldr	r0, [pc, #176]	@ (80015c4 <HAL_I2C_MspInit+0x13c>)
 8001514:	f002 fb90 	bl	8003c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001518:	4b29      	ldr	r3, [pc, #164]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151c:	4a28      	ldr	r2, [pc, #160]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 800151e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001522:	6593      	str	r3, [r2, #88]	@ 0x58
 8001524:	4b26      	ldr	r3, [pc, #152]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001530:	e040      	b.n	80015b4 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a24      	ldr	r2, [pc, #144]	@ (80015c8 <HAL_I2C_MspInit+0x140>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d13b      	bne.n	80015b4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001540:	2300      	movs	r3, #0
 8001542:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001544:	f107 0318 	add.w	r3, r7, #24
 8001548:	4618      	mov	r0, r3
 800154a:	f005 f901 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001554:	f7ff fec2 	bl	80012dc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	4a18      	ldr	r2, [pc, #96]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 800155e:	f043 0302 	orr.w	r3, r3, #2
 8001562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001570:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001574:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001578:	2312      	movs	r3, #18
 800157a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157e:	2301      	movs	r3, #1
 8001580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800158a:	2304      	movs	r3, #4
 800158c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001594:	4619      	mov	r1, r3
 8001596:	480b      	ldr	r0, [pc, #44]	@ (80015c4 <HAL_I2C_MspInit+0x13c>)
 8001598:	f002 fb4e 	bl	8003c38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a0:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 80015a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_I2C_MspInit+0x138>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
}
 80015b4:	bf00      	nop
 80015b6:	37c0      	adds	r7, #192	@ 0xc0
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40005400 	.word	0x40005400
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48000400 	.word	0x48000400
 80015c8:	40005800 	.word	0x40005800

080015cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a16      	ldr	r2, [pc, #88]	@ (8001634 <HAL_I2C_MspDeInit+0x68>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d110      	bne.n	8001600 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80015de:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <HAL_I2C_MspDeInit+0x6c>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e2:	4a15      	ldr	r2, [pc, #84]	@ (8001638 <HAL_I2C_MspDeInit+0x6c>)
 80015e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80015e8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 80015ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ee:	4813      	ldr	r0, [pc, #76]	@ (800163c <HAL_I2C_MspDeInit+0x70>)
 80015f0:	f002 fcb4 	bl	8003f5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 80015f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015f8:	4810      	ldr	r0, [pc, #64]	@ (800163c <HAL_I2C_MspDeInit+0x70>)
 80015fa:	f002 fcaf 	bl	8003f5c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80015fe:	e014      	b.n	800162a <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0e      	ldr	r2, [pc, #56]	@ (8001640 <HAL_I2C_MspDeInit+0x74>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10f      	bne.n	800162a <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_I2C_MspDeInit+0x6c>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <HAL_I2C_MspDeInit+0x6c>)
 8001610:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001614:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001616:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800161a:	4808      	ldr	r0, [pc, #32]	@ (800163c <HAL_I2C_MspDeInit+0x70>)
 800161c:	f002 fc9e 	bl	8003f5c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001620:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <HAL_I2C_MspDeInit+0x70>)
 8001626:	f002 fc99 	bl	8003f5c <HAL_GPIO_DeInit>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40005400 	.word	0x40005400
 8001638:	40021000 	.word	0x40021000
 800163c:	48000400 	.word	0x48000400
 8001640:	40005800 	.word	0x40005800

08001644 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0b0      	sub	sp, #192	@ 0xc0
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	2294      	movs	r2, #148	@ 0x94
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f008 fc75 	bl	8009f54 <memset>
  if(hospi->Instance==OCTOSPI1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a28      	ldr	r2, [pc, #160]	@ (8001710 <HAL_OSPI_MspInit+0xcc>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d149      	bne.n	8001708 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001674:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001678:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	4618      	mov	r0, r3
 8001686:	f005 f863 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001690:	f7ff fe24 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001694:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <HAL_OSPI_MspInit+0xd0>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001698:	4a1e      	ldr	r2, [pc, #120]	@ (8001714 <HAL_OSPI_MspInit+0xd0>)
 800169a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800169e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <HAL_OSPI_MspInit+0xd0>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_OSPI_MspInit+0xd0>)
 80016ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016b0:	4a18      	ldr	r2, [pc, #96]	@ (8001714 <HAL_OSPI_MspInit+0xd0>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80016b8:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <HAL_OSPI_MspInit+0xd0>)
 80016ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c4:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <HAL_OSPI_MspInit+0xd0>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c8:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <HAL_OSPI_MspInit+0xd0>)
 80016ca:	f043 0310 	orr.w	r3, r3, #16
 80016ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d0:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <HAL_OSPI_MspInit+0xd0>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80016dc:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80016e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80016f6:	230a      	movs	r3, #10
 80016f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001700:	4619      	mov	r1, r3
 8001702:	4805      	ldr	r0, [pc, #20]	@ (8001718 <HAL_OSPI_MspInit+0xd4>)
 8001704:	f002 fa98 	bl	8003c38 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8001708:	bf00      	nop
 800170a:	37c0      	adds	r7, #192	@ 0xc0
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	a0001000 	.word	0xa0001000
 8001714:	40021000 	.word	0x40021000
 8001718:	48001000 	.word	0x48001000

0800171c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	@ 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <HAL_SPI_MspInit+0x7c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d128      	bne.n	8001790 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800173e:	4b17      	ldr	r3, [pc, #92]	@ (800179c <HAL_SPI_MspInit+0x80>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	4a16      	ldr	r2, [pc, #88]	@ (800179c <HAL_SPI_MspInit+0x80>)
 8001744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001748:	6593      	str	r3, [r2, #88]	@ 0x58
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <HAL_SPI_MspInit+0x80>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	4b11      	ldr	r3, [pc, #68]	@ (800179c <HAL_SPI_MspInit+0x80>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	4a10      	ldr	r2, [pc, #64]	@ (800179c <HAL_SPI_MspInit+0x80>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_SPI_MspInit+0x80>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800176e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001780:	2306      	movs	r3, #6
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <HAL_SPI_MspInit+0x84>)
 800178c:	f002 fa54 	bl	8003c38 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	@ 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40003c00 	.word	0x40003c00
 800179c:	40021000 	.word	0x40021000
 80017a0:	48000800 	.word	0x48000800

080017a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a27      	ldr	r2, [pc, #156]	@ (8001850 <HAL_TIM_Base_MspInit+0xac>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d114      	bne.n	80017e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017b6:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <HAL_TIM_Base_MspInit+0xb0>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a26      	ldr	r2, [pc, #152]	@ (8001854 <HAL_TIM_Base_MspInit+0xb0>)
 80017bc:	f043 0320 	orr.w	r3, r3, #32
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c2:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <HAL_TIM_Base_MspInit+0xb0>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f003 0320 	and.w	r3, r3, #32
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2037      	movs	r0, #55	@ 0x37
 80017d4:	f002 f831 	bl	800383a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017d8:	2037      	movs	r0, #55	@ 0x37
 80017da:	f002 f84a 	bl	8003872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80017de:	e032      	b.n	8001846 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001858 <HAL_TIM_Base_MspInit+0xb4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d114      	bne.n	8001814 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_TIM_Base_MspInit+0xb0>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <HAL_TIM_Base_MspInit+0xb0>)
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017f6:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <HAL_TIM_Base_MspInit+0xb0>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2019      	movs	r0, #25
 8001808:	f002 f817 	bl	800383a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800180c:	2019      	movs	r0, #25
 800180e:	f002 f830 	bl	8003872 <HAL_NVIC_EnableIRQ>
}
 8001812:	e018      	b.n	8001846 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a10      	ldr	r2, [pc, #64]	@ (800185c <HAL_TIM_Base_MspInit+0xb8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d113      	bne.n	8001846 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800181e:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <HAL_TIM_Base_MspInit+0xb0>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001822:	4a0c      	ldr	r2, [pc, #48]	@ (8001854 <HAL_TIM_Base_MspInit+0xb0>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001828:	6613      	str	r3, [r2, #96]	@ 0x60
 800182a:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <HAL_TIM_Base_MspInit+0xb0>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	201a      	movs	r0, #26
 800183c:	f001 fffd 	bl	800383a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001840:	201a      	movs	r0, #26
 8001842:	f002 f816 	bl	8003872 <HAL_NVIC_EnableIRQ>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40001400 	.word	0x40001400
 8001854:	40021000 	.word	0x40021000
 8001858:	40014400 	.word	0x40014400
 800185c:	40014800 	.word	0x40014800

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0b4      	sub	sp, #208	@ 0xd0
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800187c:	2294      	movs	r2, #148	@ 0x94
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f008 fb67 	bl	8009f54 <memset>
  if(huart->Instance==UART4)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a87      	ldr	r2, [pc, #540]	@ (8001aa8 <HAL_UART_MspInit+0x248>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d13c      	bne.n	800190a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001890:	2308      	movs	r3, #8
 8001892:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001894:	2300      	movs	r3, #0
 8001896:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001898:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800189c:	4618      	mov	r0, r3
 800189e:	f004 ff57 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018a8:	f7ff fd18 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018ac:	4b7f      	ldr	r3, [pc, #508]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b0:	4a7e      	ldr	r2, [pc, #504]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80018b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018b8:	4b7c      	ldr	r3, [pc, #496]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b79      	ldr	r3, [pc, #484]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c8:	4a78      	ldr	r2, [pc, #480]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d0:	4b76      	ldr	r3, [pc, #472]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	623b      	str	r3, [r7, #32]
 80018da:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80018dc:	2303      	movs	r3, #3
 80018de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018f4:	2308      	movs	r3, #8
 80018f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001904:	f002 f998 	bl	8003c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001908:	e0ca      	b.n	8001aa0 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a68      	ldr	r2, [pc, #416]	@ (8001ab0 <HAL_UART_MspInit+0x250>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d143      	bne.n	800199c <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001914:	2301      	movs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001918:	2300      	movs	r3, #0
 800191a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001920:	4618      	mov	r0, r3
 8001922:	f004 ff15 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800192c:	f7ff fcd6 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001930:	4b5e      	ldr	r3, [pc, #376]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 8001932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001934:	4a5d      	ldr	r2, [pc, #372]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193a:	6613      	str	r3, [r2, #96]	@ 0x60
 800193c:	4b5b      	ldr	r3, [pc, #364]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 800193e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b58      	ldr	r3, [pc, #352]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194c:	4a57      	ldr	r2, [pc, #348]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001954:	4b55      	ldr	r3, [pc, #340]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001960:	23c0      	movs	r3, #192	@ 0xc0
 8001962:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001978:	2307      	movs	r3, #7
 800197a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001982:	4619      	mov	r1, r3
 8001984:	484b      	ldr	r0, [pc, #300]	@ (8001ab4 <HAL_UART_MspInit+0x254>)
 8001986:	f002 f957 	bl	8003c38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2025      	movs	r0, #37	@ 0x25
 8001990:	f001 ff53 	bl	800383a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001994:	2025      	movs	r0, #37	@ 0x25
 8001996:	f001 ff6c 	bl	8003872 <HAL_NVIC_EnableIRQ>
}
 800199a:	e081      	b.n	8001aa0 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a45      	ldr	r2, [pc, #276]	@ (8001ab8 <HAL_UART_MspInit+0x258>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d13b      	bne.n	8001a1e <HAL_UART_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fecc 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_UART_MspInit+0x162>
      Error_Handler();
 80019be:	f7ff fc8d 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c2:	4b3a      	ldr	r3, [pc, #232]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c6:	4a39      	ldr	r2, [pc, #228]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ce:	4b37      	ldr	r3, [pc, #220]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019da:	4b34      	ldr	r3, [pc, #208]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	4a33      	ldr	r2, [pc, #204]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e6:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80019f2:	2378      	movs	r3, #120	@ 0x78
 80019f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a10:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001a14:	4619      	mov	r1, r3
 8001a16:	4829      	ldr	r0, [pc, #164]	@ (8001abc <HAL_UART_MspInit+0x25c>)
 8001a18:	f002 f90e 	bl	8003c38 <HAL_GPIO_Init>
}
 8001a1c:	e040      	b.n	8001aa0 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a27      	ldr	r2, [pc, #156]	@ (8001ac0 <HAL_UART_MspInit+0x260>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d13b      	bne.n	8001aa0 <HAL_UART_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 fe8b 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8001a40:	f7ff fc4c 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a48:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 8001a4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a50:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a60:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <HAL_UART_MspInit+0x24c>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001a74:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a8e:	2307      	movs	r3, #7
 8001a90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a94:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4808      	ldr	r0, [pc, #32]	@ (8001abc <HAL_UART_MspInit+0x25c>)
 8001a9c:	f002 f8cc 	bl	8003c38 <HAL_GPIO_Init>
}
 8001aa0:	bf00      	nop
 8001aa2:	37d0      	adds	r7, #208	@ 0xd0
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40004c00 	.word	0x40004c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	48000400 	.word	0x48000400
 8001ab8:	40004400 	.word	0x40004400
 8001abc:	48000c00 	.word	0x48000c00
 8001ac0:	40004800 	.word	0x40004800

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <NMI_Handler+0x4>

08001acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <MemManage_Handler+0x4>

08001adc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1a:	f000 fb21 	bl	8002160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b28:	4802      	ldr	r0, [pc, #8]	@ (8001b34 <ADC1_IRQHandler+0x10>)
 8001b2a:	f000 ff2e 	bl	800298a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000003c 	.word	0x2000003c

08001b38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001b3c:	2020      	movs	r0, #32
 8001b3e:	f002 fb17 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001b42:	2040      	movs	r0, #64	@ 0x40
 8001b44:	f002 fb14 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001b48:	2080      	movs	r0, #128	@ 0x80
 8001b4a:	f002 fb11 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001b4e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b52:	f002 fb0d 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001b62:	f005 fc87 	bl	8007474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000284 	.word	0x20000284

08001b70 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001b76:	f005 fc7d 	bl	8007474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200002d0 	.word	0x200002d0

08001b84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <USART1_IRQHandler+0x10>)
 8001b8a:	f006 f81f 	bl	8007bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200003b0 	.word	0x200003b0

08001b98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001b9c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ba0:	f002 fae6 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001ba4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001ba8:	f002 fae2 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001bac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001bb0:	f002 fade 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001bb4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001bb8:	f002 fada 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001bbc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001bc0:	f002 fad6 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001bc4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001bc8:	f002 fad2 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <TIM7_IRQHandler+0x10>)
 8001bd6:	f005 fc4d 	bl	8007474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000238 	.word	0x20000238

08001be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <SystemInit+0x20>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bee:	4a05      	ldr	r2, [pc, #20]	@ (8001c04 <SystemInit+0x20>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c0c:	f7ff ffea 	bl	8001be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c12:	490d      	ldr	r1, [pc, #52]	@ (8001c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c14:	4a0d      	ldr	r2, [pc, #52]	@ (8001c4c <LoopForever+0xe>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c28:	4c0a      	ldr	r4, [pc, #40]	@ (8001c54 <LoopForever+0x16>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c36:	f008 f995 	bl	8009f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c3a:	f7fe fc57 	bl	80004ec <main>

08001c3e <LoopForever>:

LoopForever:
    b LoopForever
 8001c3e:	e7fe      	b.n	8001c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c40:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001c4c:	0800a044 	.word	0x0800a044
  ldr r2, =_sbss
 8001c50:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001c54:	20000604 	.word	0x20000604

08001c58 <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <AES_IRQHandler>
	...

08001c5c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	@ 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c64:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <I2Cx_MspInit+0xa8>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c68:	4a26      	ldr	r2, [pc, #152]	@ (8001d04 <I2Cx_MspInit+0xa8>)
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <I2Cx_MspInit+0xa8>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001c7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001c82:	2312      	movs	r3, #18
 8001c84:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	481b      	ldr	r0, [pc, #108]	@ (8001d08 <I2Cx_MspInit+0xac>)
 8001c9a:	f001 ffcd 	bl	8003c38 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4818      	ldr	r0, [pc, #96]	@ (8001d08 <I2Cx_MspInit+0xac>)
 8001ca6:	f001 ffc7 	bl	8003c38 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001caa:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <I2Cx_MspInit+0xa8>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cae:	4a15      	ldr	r2, [pc, #84]	@ (8001d04 <I2Cx_MspInit+0xa8>)
 8001cb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb6:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <I2Cx_MspInit+0xa8>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <I2Cx_MspInit+0xa8>)
 8001cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d04 <I2Cx_MspInit+0xa8>)
 8001cc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ccc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001cce:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <I2Cx_MspInit+0xa8>)
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d04 <I2Cx_MspInit+0xa8>)
 8001cd4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001cd8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	210f      	movs	r1, #15
 8001cde:	2021      	movs	r0, #33	@ 0x21
 8001ce0:	f001 fdab 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001ce4:	2021      	movs	r0, #33	@ 0x21
 8001ce6:	f001 fdc4 	bl	8003872 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	210f      	movs	r1, #15
 8001cee:	2022      	movs	r0, #34	@ 0x22
 8001cf0:	f001 fda3 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001cf4:	2022      	movs	r0, #34	@ 0x22
 8001cf6:	f001 fdbc 	bl	8003872 <HAL_NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	@ 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	48000400 	.word	0x48000400

08001d0c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <I2Cx_Init+0x54>)
 8001d18:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a11      	ldr	r2, [pc, #68]	@ (8001d64 <I2Cx_Init+0x58>)
 8001d1e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff89 	bl	8001c5c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f002 fa28 	bl	80041a0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001d50:	2100      	movs	r1, #0
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f002 ffde 	bl	8004d14 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40005800 	.word	0x40005800
 8001d64:	00702681 	.word	0x00702681

08001d68 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af04      	add	r7, sp, #16
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	4608      	mov	r0, r1
 8001d72:	4611      	mov	r1, r2
 8001d74:	461a      	mov	r2, r3
 8001d76:	4603      	mov	r3, r0
 8001d78:	72fb      	strb	r3, [r7, #11]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	813b      	strh	r3, [r7, #8]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d86:	7afb      	ldrb	r3, [r7, #11]
 8001d88:	b299      	uxth	r1, r3
 8001d8a:	88f8      	ldrh	r0, [r7, #6]
 8001d8c:	893a      	ldrh	r2, [r7, #8]
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	9302      	str	r3, [sp, #8]
 8001d94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f002 fbdc 	bl	800455c <HAL_I2C_Mem_Read>
 8001da4:	4603      	mov	r3, r0
 8001da6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	4619      	mov	r1, r3
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f832 	bl	8001e1c <I2Cx_Error>
  }
  return status;
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b08a      	sub	sp, #40	@ 0x28
 8001dc6:	af04      	add	r7, sp, #16
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	4608      	mov	r0, r1
 8001dcc:	4611      	mov	r1, r2
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	72fb      	strb	r3, [r7, #11]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	813b      	strh	r3, [r7, #8]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001de0:	7afb      	ldrb	r3, [r7, #11]
 8001de2:	b299      	uxth	r1, r3
 8001de4:	88f8      	ldrh	r0, [r7, #6]
 8001de6:	893a      	ldrh	r2, [r7, #8]
 8001de8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	4603      	mov	r3, r0
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f002 fa9b 	bl	8004334 <HAL_I2C_Mem_Write>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001e08:	7afb      	ldrb	r3, [r7, #11]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f805 	bl	8001e1c <I2Cx_Error>
  }
  return status;
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f002 fa54 	bl	80042d6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff6c 	bl	8001d0c <I2Cx_Init>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001e40:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <SENSOR_IO_Init+0x10>)
 8001e42:	f7ff ff63 	bl	8001d0c <I2Cx_Init>
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000584 	.word	0x20000584

08001e50 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	71bb      	strb	r3, [r7, #6]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	79f9      	ldrb	r1, [r7, #7]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	1d7b      	adds	r3, r7, #5
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2301      	movs	r3, #1
 8001e72:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <SENSOR_IO_Write+0x30>)
 8001e74:	f7ff ffa5 	bl	8001dc2 <I2Cx_WriteMultiple>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000584 	.word	0x20000584

08001e84 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460a      	mov	r2, r1
 8001e8e:	71fb      	strb	r3, [r7, #7]
 8001e90:	4613      	mov	r3, r2
 8001e92:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	79f9      	ldrb	r1, [r7, #7]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	f107 030f 	add.w	r3, r7, #15
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	4804      	ldr	r0, [pc, #16]	@ (8001ebc <SENSOR_IO_Read+0x38>)
 8001eac:	f7ff ff5c 	bl	8001d68 <I2Cx_ReadMultiple>

  return read_value;
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000584 	.word	0x20000584

08001ec0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	603a      	str	r2, [r7, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	71bb      	strb	r3, [r7, #6]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001ed6:	79bb      	ldrb	r3, [r7, #6]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	79f9      	ldrb	r1, [r7, #7]
 8001edc:	88bb      	ldrh	r3, [r7, #4]
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	4804      	ldr	r0, [pc, #16]	@ (8001ef8 <SENSOR_IO_ReadMultiple+0x38>)
 8001ee8:	f7ff ff3e 	bl	8001d68 <I2Cx_ReadMultiple>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000584 	.word	0x20000584

08001efc <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <BSP_TSENSOR_Init+0x30>)
 8001f08:	4a09      	ldr	r2, [pc, #36]	@ (8001f30 <BSP_TSENSOR_Init+0x34>)
 8001f0a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001f0c:	f7ff ff96 	bl	8001e3c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <BSP_TSENSOR_Init+0x30>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2100      	movs	r1, #0
 8001f18:	20be      	movs	r0, #190	@ 0xbe
 8001f1a:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001f20:	79fb      	ldrb	r3, [r7, #7]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200005d8 	.word	0x200005d8
 8001f30:	20000008 	.word	0x20000008

08001f34 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <BSP_TSENSOR_ReadTemp+0x18>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	20be      	movs	r0, #190	@ 0xbe
 8001f40:	4798      	blx	r3
 8001f42:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f46:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200005d8 	.word	0x200005d8

08001f50 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2120      	movs	r1, #32
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff8e 	bl	8001e84 <SENSOR_IO_Read>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	f023 0303 	bic.w	r3, r3, #3
 8001f82:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f92:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	2120      	movs	r1, #32
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff57 	bl	8001e50 <SENSOR_IO_Write>
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b088      	sub	sp, #32
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	b2d8      	uxtb	r0, r3
 8001fb8:	f107 0208 	add.w	r2, r7, #8
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	21b2      	movs	r1, #178	@ 0xb2
 8001fc0:	f7ff ff7e 	bl	8001ec0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2135      	movs	r1, #53	@ 0x35
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff5a 	bl	8001e84 <SENSOR_IO_Read>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001fd4:	7ffb      	ldrb	r3, [r7, #31]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	7a3b      	ldrb	r3, [r7, #8]
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001fe8:	7ffb      	ldrb	r3, [r7, #31]
 8001fea:	019b      	lsls	r3, r3, #6
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	7a7b      	ldrb	r3, [r7, #9]
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001ffc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002000:	10db      	asrs	r3, r3, #3
 8002002:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002004:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002008:	10db      	asrs	r3, r3, #3
 800200a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	b2d8      	uxtb	r0, r3
 8002010:	f107 0208 	add.w	r2, r7, #8
 8002014:	2304      	movs	r3, #4
 8002016:	21bc      	movs	r1, #188	@ 0xbc
 8002018:	f7ff ff52 	bl	8001ec0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800201c:	7a7b      	ldrb	r3, [r7, #9]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	7a3b      	ldrb	r3, [r7, #8]
 8002024:	b21b      	sxth	r3, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800202a:	7afb      	ldrb	r3, [r7, #11]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b21a      	sxth	r2, r3
 8002030:	7abb      	ldrb	r3, [r7, #10]
 8002032:	b21b      	sxth	r3, r3
 8002034:	4313      	orrs	r3, r2
 8002036:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	b2d8      	uxtb	r0, r3
 800203c:	f107 0208 	add.w	r2, r7, #8
 8002040:	2302      	movs	r3, #2
 8002042:	21aa      	movs	r1, #170	@ 0xaa
 8002044:	f7ff ff3c 	bl	8001ec0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002048:	7a7b      	ldrb	r3, [r7, #9]
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	b21a      	sxth	r2, r3
 800204e:	7a3b      	ldrb	r3, [r7, #8]
 8002050:	b21b      	sxth	r3, r3
 8002052:	4313      	orrs	r3, r2
 8002054:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002056:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800205a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002068:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800206c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800207e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002082:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002094:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	ee07 3a90 	vmov	s15, r3
}
 80020ae:	eeb0 0a67 	vmov.f32	s0, s15
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c2:	2003      	movs	r0, #3
 80020c4:	f001 fbae 	bl	8003824 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020c8:	2000      	movs	r0, #0
 80020ca:	f000 f80d 	bl	80020e8 <HAL_InitTick>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	71fb      	strb	r3, [r7, #7]
 80020d8:	e001      	b.n	80020de <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020da:	f7ff f905 	bl	80012e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020de:	79fb      	ldrb	r3, [r7, #7]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020f4:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <HAL_InitTick+0x6c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d023      	beq.n	8002144 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020fc:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <HAL_InitTick+0x70>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <HAL_InitTick+0x6c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f001 fbbb 	bl	800388e <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b0f      	cmp	r3, #15
 8002122:	d809      	bhi.n	8002138 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002124:	2200      	movs	r2, #0
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f001 fb85 	bl	800383a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002130:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <HAL_InitTick+0x74>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e007      	b.n	8002148 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e004      	b.n	8002148 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e001      	b.n	8002148 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002148:	7bfb      	ldrb	r3, [r7, #15]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000001c 	.word	0x2000001c
 8002158:	20000004 	.word	0x20000004
 800215c:	20000018 	.word	0x20000018

08002160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_IncTick+0x20>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_IncTick+0x24>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <HAL_IncTick+0x24>)
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	2000001c 	.word	0x2000001c
 8002184:	200005dc 	.word	0x200005dc

08002188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b03      	ldr	r3, [pc, #12]	@ (800219c <HAL_GetTick+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	200005dc 	.word	0x200005dc

080021a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	609a      	str	r2, [r3, #8]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3360      	adds	r3, #96	@ 0x60
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <LL_ADC_SetOffset+0x44>)
 800222a:	4013      	ands	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	4313      	orrs	r3, r2
 8002238:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	03fff000 	.word	0x03fff000

08002250 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3360      	adds	r3, #96	@ 0x60
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3360      	adds	r3, #96	@ 0x60
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	615a      	str	r2, [r3, #20]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022fe:	b480      	push	{r7}
 8002300:	b087      	sub	sp, #28
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3330      	adds	r3, #48	@ 0x30
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	211f      	movs	r1, #31
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	401a      	ands	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	f003 011f 	and.w	r1, r3, #31
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	431a      	orrs	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002362:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3314      	adds	r3, #20
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	0e5b      	lsrs	r3, r3, #25
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	4413      	add	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	0d1b      	lsrs	r3, r3, #20
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2107      	movs	r1, #7
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	401a      	ands	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	0d1b      	lsrs	r3, r3, #20
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	431a      	orrs	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023c6:	bf00      	nop
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	43db      	mvns	r3, r3
 80023ee:	401a      	ands	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0318 	and.w	r3, r3, #24
 80023f6:	4908      	ldr	r1, [pc, #32]	@ (8002418 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023f8:	40d9      	lsrs	r1, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	400b      	ands	r3, r1
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	431a      	orrs	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	0007ffff 	.word	0x0007ffff

0800241c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800242c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6093      	str	r3, [r2, #8]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002454:	d101      	bne.n	800245a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002478:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800247c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024a4:	d101      	bne.n	80024aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024cc:	f043 0201 	orr.w	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <LL_ADC_IsEnabled+0x18>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <LL_ADC_IsEnabled+0x1a>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002516:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800251a:	f043 0204 	orr.w	r2, r3, #4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d101      	bne.n	8002546 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b08      	cmp	r3, #8
 8002566:	d101      	bne.n	800256c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e129      	b.n	80027ea <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7fe fec3 	bl	8001330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff3f 	bl	8002440 <LL_ADC_IsDeepPowerDownEnabled>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff25 	bl	800241c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ff5a 	bl	8002490 <LL_ADC_IsInternalRegulatorEnabled>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d115      	bne.n	800260e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff3e 	bl	8002468 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025ec:	4b81      	ldr	r3, [pc, #516]	@ (80027f4 <HAL_ADC_Init+0x278>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	4a81      	ldr	r2, [pc, #516]	@ (80027f8 <HAL_ADC_Init+0x27c>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002600:	e002      	b.n	8002608 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3b01      	subs	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f9      	bne.n	8002602 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff3c 	bl	8002490 <LL_ADC_IsInternalRegulatorEnabled>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10d      	bne.n	800263a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff75 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002644:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 80c2 	bne.w	80027d8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 80be 	bne.w	80027d8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002664:	f043 0202 	orr.w	r2, r3, #2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff35 	bl	80024e0 <LL_ADC_IsEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10b      	bne.n	8002694 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800267c:	485f      	ldr	r0, [pc, #380]	@ (80027fc <HAL_ADC_Init+0x280>)
 800267e:	f7ff ff2f 	bl	80024e0 <LL_ADC_IsEnabled>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4619      	mov	r1, r3
 800268e:	485c      	ldr	r0, [pc, #368]	@ (8002800 <HAL_ADC_Init+0x284>)
 8002690:	f7ff fd86 	bl	80021a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7e5b      	ldrb	r3, [r3, #25]
 8002698:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800269e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d106      	bne.n	80026d0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	3b01      	subs	r3, #1
 80026c8:	045b      	lsls	r3, r3, #17
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026dc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	4b44      	ldr	r3, [pc, #272]	@ (8002804 <HAL_ADC_Init+0x288>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	69b9      	ldr	r1, [r7, #24]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff25 	bl	8002554 <LL_ADC_INJ_IsConversionOngoing>
 800270a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d140      	bne.n	8002794 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d13d      	bne.n	8002794 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7e1b      	ldrb	r3, [r3, #24]
 8002720:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002722:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800272a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800273a:	f023 0306 	bic.w	r3, r3, #6
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	430b      	orrs	r3, r1
 8002746:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800274e:	2b01      	cmp	r3, #1
 8002750:	d118      	bne.n	8002784 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002768:	4311      	orrs	r1, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002774:	430a      	orrs	r2, r1
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	611a      	str	r2, [r3, #16]
 8002782:	e007      	b.n	8002794 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10c      	bne.n	80027b6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f023 010f 	bic.w	r1, r3, #15
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	1e5a      	subs	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027b4:	e007      	b.n	80027c6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 020f 	bic.w	r2, r2, #15
 80027c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80027d6:	e007      	b.n	80027e8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027dc:	f043 0210 	orr.w	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000004 	.word	0x20000004
 80027f8:	053e2d63 	.word	0x053e2d63
 80027fc:	50040000 	.word	0x50040000
 8002800:	50040300 	.word	0x50040300
 8002804:	fff0c007 	.word	0xfff0c007

08002808 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fe8a 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 80a0 	bne.w	8002962 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_ADC_Start_IT+0x28>
 800282c:	2302      	movs	r3, #2
 800282e:	e09b      	b.n	8002968 <HAL_ADC_Start_IT+0x160>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fe6b 	bl	8003514 <ADC_Enable>
 800283e:	4603      	mov	r3, r0
 8002840:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f040 8087 	bne.w	8002958 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d006      	beq.n	8002878 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	f023 0206 	bic.w	r2, r3, #6
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002876:	e002      	b.n	800287e <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	221c      	movs	r2, #28
 8002884:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 021c 	bic.w	r2, r2, #28
 800289c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d108      	bne.n	80028b8 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0208 	orr.w	r2, r2, #8
 80028b4:	605a      	str	r2, [r3, #4]
          break;
 80028b6:	e008      	b.n	80028ca <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0204 	orr.w	r2, r2, #4
 80028c6:	605a      	str	r2, [r3, #4]
          break;
 80028c8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0210 	orr.w	r2, r2, #16
 80028e0:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d02d      	beq.n	800294c <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	2b08      	cmp	r3, #8
 8002906:	d110      	bne.n	800292a <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0220 	bic.w	r2, r2, #32
 8002916:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002926:	605a      	str	r2, [r3, #4]
            break;
 8002928:	e010      	b.n	800294c <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002938:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0220 	orr.w	r2, r2, #32
 8002948:	605a      	str	r2, [r3, #4]
            break;
 800294a:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fdd8 	bl	8002506 <LL_ADC_REG_StartConversion>
 8002956:	e006      	b.n	8002966 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002960:	e001      	b.n	8002966 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002962:	2302      	movs	r3, #2
 8002964:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b088      	sub	sp, #32
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d017      	beq.n	80029e0 <HAL_ADC_IRQHandler+0x56>
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d012      	beq.n	80029e0 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ca:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fe4c 	bl	8003670 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2202      	movs	r2, #2
 80029de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d004      	beq.n	80029f4 <HAL_ADC_IRQHandler+0x6a>
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d05e      	beq.n	8002abc <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d059      	beq.n	8002abc <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc57 	bl	80022d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d03e      	beq.n	8002aae <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d135      	bne.n	8002aae <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d12e      	bne.n	8002aae <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fd6a 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d11a      	bne.n	8002a96 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 020c 	bic.w	r2, r2, #12
 8002a6e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d112      	bne.n	8002aae <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a94:	e00b      	b.n	8002aae <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9a:	f043 0210 	orr.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe fb8e 	bl	80011d0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	220c      	movs	r2, #12
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x146>
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d072      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d06d      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fc28 	bl	8002356 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b06:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fbe3 	bl	80022d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b12:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d047      	beq.n	8002bb2 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_ADC_IRQHandler+0x1b2>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d03f      	beq.n	8002bb2 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d13a      	bne.n	8002bb2 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b46:	2b40      	cmp	r3, #64	@ 0x40
 8002b48:	d133      	bne.n	8002bb2 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d12e      	bne.n	8002bb2 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fcfb 	bl	8002554 <LL_ADC_INJ_IsConversionOngoing>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d11a      	bne.n	8002b9a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b72:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d112      	bne.n	8002bb2 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b98:	e00b      	b.n	8002bb2 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9e:	f043 0210 	orr.w	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002baa:	f043 0201 	orr.w	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fd34 	bl	8003620 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2260      	movs	r2, #96	@ 0x60
 8002bbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d011      	beq.n	8002bee <HAL_ADC_IRQHandler+0x264>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00c      	beq.n	8002bee <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f886 	bl	8002cf2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2280      	movs	r2, #128	@ 0x80
 8002bec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d012      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x294>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fd1a 	bl	8003648 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d012      	beq.n	8002c4e <HAL_ADC_IRQHandler+0x2c4>
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fd0c 	bl	800365c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02a      	beq.n	8002cae <HAL_ADC_IRQHandler+0x324>
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d025      	beq.n	8002cae <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d102      	bne.n	8002c70 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e008      	b.n	8002c82 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d10e      	bne.n	8002ca6 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c98:	f043 0202 	orr.w	r2, r3, #2
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f830 	bl	8002d06 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2210      	movs	r2, #16
 8002cac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d018      	beq.n	8002cea <HAL_ADC_IRQHandler+0x360>
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d013      	beq.n	8002cea <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd2:	f043 0208 	orr.w	r2, r3, #8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fca5 	bl	8003634 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002cea:	bf00      	nop
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b0b6      	sub	sp, #216	@ 0xd8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x22>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e3d5      	b.n	80034ea <HAL_ADC_ConfigChannel+0x7ce>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fbef 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 83ba 	bne.w	80034cc <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d824      	bhi.n	8002db2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	3b02      	subs	r3, #2
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d81b      	bhi.n	8002daa <HAL_ADC_ConfigChannel+0x8e>
 8002d72:	a201      	add	r2, pc, #4	@ (adr r2, 8002d78 <HAL_ADC_ConfigChannel+0x5c>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002d89 	.word	0x08002d89
 8002d7c:	08002d91 	.word	0x08002d91
 8002d80:	08002d99 	.word	0x08002d99
 8002d84:	08002da1 	.word	0x08002da1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002d88:	230c      	movs	r3, #12
 8002d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d8e:	e010      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002d90:	2312      	movs	r3, #18
 8002d92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d96:	e00c      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d98:	2318      	movs	r3, #24
 8002d9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d9e:	e008      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002da0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002da8:	e003      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002daa:	2306      	movs	r3, #6
 8002dac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002db0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002dc0:	f7ff fa9d 	bl	80022fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fbb0 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002dce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fbbc 	bl	8002554 <LL_ADC_INJ_IsConversionOngoing>
 8002ddc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002de0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f040 81bf 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 81ba 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dfc:	d10f      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f7ff fab7 	bl	800237c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fa4b 	bl	80022b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e1c:	e00e      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f7ff faa6 	bl	800237c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fa3b 	bl	80022b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	08db      	lsrs	r3, r3, #3
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d00a      	beq.n	8002e74 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6919      	ldr	r1, [r3, #16]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e6e:	f7ff f9cb 	bl	8002208 <LL_ADC_SetOffset>
 8002e72:	e179      	b.n	8003168 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f9e8 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x184>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff f9dd 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	0e9b      	lsrs	r3, r3, #26
 8002e9a:	f003 021f 	and.w	r2, r3, #31
 8002e9e:	e01e      	b.n	8002ede <HAL_ADC_ConfigChannel+0x1c2>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f9d2 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ec2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ec6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e004      	b.n	8002edc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002ed2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x1da>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0e9b      	lsrs	r3, r3, #26
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	e018      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x20c>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002f0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002f12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002f1a:	2320      	movs	r3, #32
 8002f1c:	e004      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002f1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d106      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2200      	movs	r2, #0
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f9a1 	bl	800227c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f985 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x24a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff f97a 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	0e9b      	lsrs	r3, r3, #26
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	e01e      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x288>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff f96f 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	e004      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002f98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x2a0>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	e018      	b.n	8002fee <HAL_ADC_ConfigChannel+0x2d2>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	e004      	b.n	8002fee <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d106      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff f93e 	bl	800227c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2102      	movs	r1, #2
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f922 	bl	8002250 <LL_ADC_GetOffsetChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <HAL_ADC_ConfigChannel+0x310>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2102      	movs	r1, #2
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f917 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8003022:	4603      	mov	r3, r0
 8003024:	0e9b      	lsrs	r3, r3, #26
 8003026:	f003 021f 	and.w	r2, r3, #31
 800302a:	e01e      	b.n	800306a <HAL_ADC_ConfigChannel+0x34e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2102      	movs	r1, #2
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff f90c 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8003038:	4603      	mov	r3, r0
 800303a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800304a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800304e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800305a:	2320      	movs	r3, #32
 800305c:	e004      	b.n	8003068 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800305e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003072:	2b00      	cmp	r3, #0
 8003074:	d105      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x366>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	e014      	b.n	80030ac <HAL_ADC_ConfigChannel+0x390>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003090:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003092:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003096:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800309e:	2320      	movs	r3, #32
 80030a0:	e004      	b.n	80030ac <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80030a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d106      	bne.n	80030be <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff f8df 	bl	800227c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2103      	movs	r1, #3
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff f8c3 	bl	8002250 <LL_ADC_GetOffsetChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x3ce>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2103      	movs	r1, #3
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff f8b8 	bl	8002250 <LL_ADC_GetOffsetChannel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	0e9b      	lsrs	r3, r3, #26
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	e017      	b.n	800311a <HAL_ADC_ConfigChannel+0x3fe>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2103      	movs	r1, #3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff f8ad 	bl	8002250 <LL_ADC_GetOffsetChannel>
 80030f6:	4603      	mov	r3, r0
 80030f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003104:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800310c:	2320      	movs	r3, #32
 800310e:	e003      	b.n	8003118 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003110:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x416>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	0e9b      	lsrs	r3, r3, #26
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	e011      	b.n	8003156 <HAL_ADC_ConfigChannel+0x43a>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003140:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003142:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003144:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e003      	b.n	8003156 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800314e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003156:	429a      	cmp	r2, r3
 8003158:	d106      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	2103      	movs	r1, #3
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff f88a 	bl	800227c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff f9b7 	bl	80024e0 <LL_ADC_IsEnabled>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	f040 813f 	bne.w	80033f8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	461a      	mov	r2, r3
 8003188:	f7ff f924 	bl	80023d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a8e      	ldr	r2, [pc, #568]	@ (80033cc <HAL_ADC_ConfigChannel+0x6b0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	f040 8130 	bne.w	80033f8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x4a4>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0e9b      	lsrs	r3, r3, #26
 80031ae:	3301      	adds	r3, #1
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	bf94      	ite	ls
 80031b8:	2301      	movls	r3, #1
 80031ba:	2300      	movhi	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e019      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x4d8>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80031ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80031d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e003      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80031dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2b09      	cmp	r3, #9
 80031ec:	bf94      	ite	ls
 80031ee:	2301      	movls	r3, #1
 80031f0:	2300      	movhi	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d079      	beq.n	80032ec <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x4f8>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0e9b      	lsrs	r3, r3, #26
 800320a:	3301      	adds	r3, #1
 800320c:	069b      	lsls	r3, r3, #26
 800320e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003212:	e015      	b.n	8003240 <HAL_ADC_ConfigChannel+0x524>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003224:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800322c:	2320      	movs	r3, #32
 800322e:	e003      	b.n	8003238 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	069b      	lsls	r3, r3, #26
 800323c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003248:	2b00      	cmp	r3, #0
 800324a:	d109      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x544>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0e9b      	lsrs	r3, r3, #26
 8003252:	3301      	adds	r3, #1
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	e017      	b.n	8003290 <HAL_ADC_ConfigChannel+0x574>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800326e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003270:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e003      	b.n	8003284 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800327c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	ea42 0103 	orr.w	r1, r2, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x59a>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	051b      	lsls	r3, r3, #20
 80032b4:	e018      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x5cc>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80032c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80032c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e003      	b.n	80032da <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80032d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e8:	430b      	orrs	r3, r1
 80032ea:	e080      	b.n	80033ee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d107      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x5ec>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0e9b      	lsrs	r3, r3, #26
 80032fe:	3301      	adds	r3, #1
 8003300:	069b      	lsls	r3, r3, #26
 8003302:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003306:	e015      	b.n	8003334 <HAL_ADC_ConfigChannel+0x618>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800331a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003320:	2320      	movs	r3, #32
 8003322:	e003      	b.n	800332c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003326:	fab3 f383 	clz	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	3301      	adds	r3, #1
 800332e:	069b      	lsls	r3, r3, #26
 8003330:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x638>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	0e9b      	lsrs	r3, r3, #26
 8003346:	3301      	adds	r3, #1
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2101      	movs	r1, #1
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	e017      	b.n	8003384 <HAL_ADC_ConfigChannel+0x668>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	61bb      	str	r3, [r7, #24]
  return result;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e003      	b.n	8003378 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	3301      	adds	r3, #1
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	ea42 0103 	orr.w	r1, r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x694>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	3301      	adds	r3, #1
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	3b1e      	subs	r3, #30
 80033a8:	051b      	lsls	r3, r3, #20
 80033aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	e01d      	b.n	80033ec <HAL_ADC_ConfigChannel+0x6d0>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	60fb      	str	r3, [r7, #12]
  return result;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d103      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80033c8:	2320      	movs	r3, #32
 80033ca:	e005      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x6bc>
 80033cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f003 021f 	and.w	r2, r3, #31
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	3b1e      	subs	r3, #30
 80033e6:	051b      	lsls	r3, r3, #20
 80033e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f2:	4619      	mov	r1, r3
 80033f4:	f7fe ffc2 	bl	800237c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b3d      	ldr	r3, [pc, #244]	@ (80034f4 <HAL_ADC_ConfigChannel+0x7d8>)
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d06c      	beq.n	80034de <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003404:	483c      	ldr	r0, [pc, #240]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003406:	f7fe fef1 	bl	80021ec <LL_ADC_GetCommonPathInternalCh>
 800340a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3a      	ldr	r2, [pc, #232]	@ (80034fc <HAL_ADC_ConfigChannel+0x7e0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d127      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800341c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d121      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a35      	ldr	r2, [pc, #212]	@ (8003500 <HAL_ADC_ConfigChannel+0x7e4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d157      	bne.n	80034de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800342e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003432:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003436:	4619      	mov	r1, r3
 8003438:	482f      	ldr	r0, [pc, #188]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7dc>)
 800343a:	f7fe fec4 	bl	80021c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800343e:	4b31      	ldr	r3, [pc, #196]	@ (8003504 <HAL_ADC_ConfigChannel+0x7e8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	4a30      	ldr	r2, [pc, #192]	@ (8003508 <HAL_ADC_ConfigChannel+0x7ec>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	099b      	lsrs	r3, r3, #6
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003458:	e002      	b.n	8003460 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	3b01      	subs	r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f9      	bne.n	800345a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003466:	e03a      	b.n	80034de <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a27      	ldr	r2, [pc, #156]	@ (800350c <HAL_ADC_ConfigChannel+0x7f0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d113      	bne.n	800349a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003476:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10d      	bne.n	800349a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1f      	ldr	r2, [pc, #124]	@ (8003500 <HAL_ADC_ConfigChannel+0x7e4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d12a      	bne.n	80034de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003488:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800348c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003490:	4619      	mov	r1, r3
 8003492:	4819      	ldr	r0, [pc, #100]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003494:	f7fe fe97 	bl	80021c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003498:	e021      	b.n	80034de <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1c      	ldr	r2, [pc, #112]	@ (8003510 <HAL_ADC_ConfigChannel+0x7f4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d11c      	bne.n	80034de <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d116      	bne.n	80034de <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a12      	ldr	r2, [pc, #72]	@ (8003500 <HAL_ADC_ConfigChannel+0x7e4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d111      	bne.n	80034de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034c2:	4619      	mov	r1, r3
 80034c4:	480c      	ldr	r0, [pc, #48]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7dc>)
 80034c6:	f7fe fe7e 	bl	80021c6 <LL_ADC_SetCommonPathInternalCh>
 80034ca:	e008      	b.n	80034de <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80034e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	37d8      	adds	r7, #216	@ 0xd8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	80080000 	.word	0x80080000
 80034f8:	50040300 	.word	0x50040300
 80034fc:	c7520000 	.word	0xc7520000
 8003500:	50040000 	.word	0x50040000
 8003504:	20000004 	.word	0x20000004
 8003508:	053e2d63 	.word	0x053e2d63
 800350c:	cb840000 	.word	0xcb840000
 8003510:	80000001 	.word	0x80000001

08003514 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe ffdb 	bl	80024e0 <LL_ADC_IsEnabled>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d169      	bne.n	8003604 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	4b36      	ldr	r3, [pc, #216]	@ (8003610 <ADC_Enable+0xfc>)
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003542:	f043 0210 	orr.w	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354e:	f043 0201 	orr.w	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e055      	b.n	8003606 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe ffaa 	bl	80024b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003564:	482b      	ldr	r0, [pc, #172]	@ (8003614 <ADC_Enable+0x100>)
 8003566:	f7fe fe41 	bl	80021ec <LL_ADC_GetCommonPathInternalCh>
 800356a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800356c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003570:	2b00      	cmp	r3, #0
 8003572:	d013      	beq.n	800359c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003574:	4b28      	ldr	r3, [pc, #160]	@ (8003618 <ADC_Enable+0x104>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	099b      	lsrs	r3, r3, #6
 800357a:	4a28      	ldr	r2, [pc, #160]	@ (800361c <ADC_Enable+0x108>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	099b      	lsrs	r3, r3, #6
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800358e:	e002      	b.n	8003596 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	3b01      	subs	r3, #1
 8003594:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f9      	bne.n	8003590 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800359c:	f7fe fdf4 	bl	8002188 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035a2:	e028      	b.n	80035f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe ff99 	bl	80024e0 <LL_ADC_IsEnabled>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe ff7d 	bl	80024b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035be:	f7fe fde3 	bl	8002188 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d914      	bls.n	80035f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d00d      	beq.n	80035f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	f043 0210 	orr.w	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	f043 0201 	orr.w	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e007      	b.n	8003606 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d1cf      	bne.n	80035a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	8000003f 	.word	0x8000003f
 8003614:	50040300 	.word	0x50040300
 8003618:	20000004 	.word	0x20000004
 800361c:	053e2d63 	.word	0x053e2d63

08003620 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003694:	4b0c      	ldr	r3, [pc, #48]	@ (80036c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036a0:	4013      	ands	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036b6:	4a04      	ldr	r2, [pc, #16]	@ (80036c8 <__NVIC_SetPriorityGrouping+0x44>)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	60d3      	str	r3, [r2, #12]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d0:	4b04      	ldr	r3, [pc, #16]	@ (80036e4 <__NVIC_GetPriorityGrouping+0x18>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	0a1b      	lsrs	r3, r3, #8
 80036d6:	f003 0307 	and.w	r3, r3, #7
}
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	db0b      	blt.n	8003712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	f003 021f 	and.w	r2, r3, #31
 8003700:	4907      	ldr	r1, [pc, #28]	@ (8003720 <__NVIC_EnableIRQ+0x38>)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2001      	movs	r0, #1
 800370a:	fa00 f202 	lsl.w	r2, r0, r2
 800370e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	e000e100 	.word	0xe000e100

08003724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	6039      	str	r1, [r7, #0]
 800372e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003734:	2b00      	cmp	r3, #0
 8003736:	db0a      	blt.n	800374e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	490c      	ldr	r1, [pc, #48]	@ (8003770 <__NVIC_SetPriority+0x4c>)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	440b      	add	r3, r1
 8003748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800374c:	e00a      	b.n	8003764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__NVIC_SetPriority+0x50>)
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	3b04      	subs	r3, #4
 800375c:	0112      	lsls	r2, r2, #4
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	440b      	add	r3, r1
 8003762:	761a      	strb	r2, [r3, #24]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000e100 	.word	0xe000e100
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	@ 0x24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f1c3 0307 	rsb	r3, r3, #7
 8003792:	2b04      	cmp	r3, #4
 8003794:	bf28      	it	cs
 8003796:	2304      	movcs	r3, #4
 8003798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3304      	adds	r3, #4
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d902      	bls.n	80037a8 <NVIC_EncodePriority+0x30>
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3b03      	subs	r3, #3
 80037a6:	e000      	b.n	80037aa <NVIC_EncodePriority+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ac:	f04f 32ff 	mov.w	r2, #4294967295
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43da      	mvns	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	401a      	ands	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c0:	f04f 31ff 	mov.w	r1, #4294967295
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ca:	43d9      	mvns	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d0:	4313      	orrs	r3, r2
         );
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3724      	adds	r7, #36	@ 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037f0:	d301      	bcc.n	80037f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037f2:	2301      	movs	r3, #1
 80037f4:	e00f      	b.n	8003816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003820 <SysTick_Config+0x40>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037fe:	210f      	movs	r1, #15
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	f7ff ff8e 	bl	8003724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <SysTick_Config+0x40>)
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800380e:	4b04      	ldr	r3, [pc, #16]	@ (8003820 <SysTick_Config+0x40>)
 8003810:	2207      	movs	r2, #7
 8003812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	e000e010 	.word	0xe000e010

08003824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff ff29 	bl	8003684 <__NVIC_SetPriorityGrouping>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800384c:	f7ff ff3e 	bl	80036cc <__NVIC_GetPriorityGrouping>
 8003850:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	6978      	ldr	r0, [r7, #20]
 8003858:	f7ff ff8e 	bl	8003778 <NVIC_EncodePriority>
 800385c:	4602      	mov	r2, r0
 800385e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff5d 	bl	8003724 <__NVIC_SetPriority>
}
 800386a:	bf00      	nop
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	4603      	mov	r3, r0
 800387a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff31 	bl	80036e8 <__NVIC_EnableIRQ>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ffa2 	bl	80037e0 <SysTick_Config>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0ac      	b.n	8003a14 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f8b2 	bl	8003a28 <DFSDM_GetChannelFromInstance>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4a55      	ldr	r2, [pc, #340]	@ (8003a1c <HAL_DFSDM_ChannelInit+0x174>)
 80038c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e09f      	b.n	8003a14 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7fd fd73 	bl	80013c0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80038da:	4b51      	ldr	r3, [pc, #324]	@ (8003a20 <HAL_DFSDM_ChannelInit+0x178>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3301      	adds	r3, #1
 80038e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003a20 <HAL_DFSDM_ChannelInit+0x178>)
 80038e2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80038e4:	4b4e      	ldr	r3, [pc, #312]	@ (8003a20 <HAL_DFSDM_ChannelInit+0x178>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d125      	bne.n	8003938 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80038ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003a24 <HAL_DFSDM_ChannelInit+0x17c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a4c      	ldr	r2, [pc, #304]	@ (8003a24 <HAL_DFSDM_ChannelInit+0x17c>)
 80038f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038f6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80038f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003a24 <HAL_DFSDM_ChannelInit+0x17c>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4948      	ldr	r1, [pc, #288]	@ (8003a24 <HAL_DFSDM_ChannelInit+0x17c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003906:	4b47      	ldr	r3, [pc, #284]	@ (8003a24 <HAL_DFSDM_ChannelInit+0x17c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a46      	ldr	r2, [pc, #280]	@ (8003a24 <HAL_DFSDM_ChannelInit+0x17c>)
 800390c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003910:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	791b      	ldrb	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d108      	bne.n	800392c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800391a:	4b42      	ldr	r3, [pc, #264]	@ (8003a24 <HAL_DFSDM_ChannelInit+0x17c>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	3b01      	subs	r3, #1
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	493f      	ldr	r1, [pc, #252]	@ (8003a24 <HAL_DFSDM_ChannelInit+0x17c>)
 8003928:	4313      	orrs	r3, r2
 800392a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800392c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a24 <HAL_DFSDM_ChannelInit+0x17c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3c      	ldr	r2, [pc, #240]	@ (8003a24 <HAL_DFSDM_ChannelInit+0x17c>)
 8003932:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003936:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003946:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6819      	ldr	r1, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003956:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800395c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 020f 	bic.w	r2, r2, #15
 8003974:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6819      	ldr	r1, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800399c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6899      	ldr	r1, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f002 0207 	and.w	r2, r2, #7
 80039c8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039f4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f810 	bl	8003a28 <DFSDM_GetChannelFromInstance>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4904      	ldr	r1, [pc, #16]	@ (8003a1c <HAL_DFSDM_ChannelInit+0x174>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	200005e4 	.word	0x200005e4
 8003a20:	200005e0 	.word	0x200005e0
 8003a24:	40016000 	.word	0x40016000

08003a28 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d102      	bne.n	8003a3e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	e02b      	b.n	8003a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a19      	ldr	r2, [pc, #100]	@ (8003aa8 <DFSDM_GetChannelFromInstance+0x80>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d102      	bne.n	8003a4c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003a46:	2301      	movs	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	e024      	b.n	8003a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a17      	ldr	r2, [pc, #92]	@ (8003aac <DFSDM_GetChannelFromInstance+0x84>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d102      	bne.n	8003a5a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003a54:	2302      	movs	r3, #2
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	e01d      	b.n	8003a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a14      	ldr	r2, [pc, #80]	@ (8003ab0 <DFSDM_GetChannelFromInstance+0x88>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d102      	bne.n	8003a68 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003a62:	2304      	movs	r3, #4
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	e016      	b.n	8003a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a12      	ldr	r2, [pc, #72]	@ (8003ab4 <DFSDM_GetChannelFromInstance+0x8c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d102      	bne.n	8003a76 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003a70:	2305      	movs	r3, #5
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e00f      	b.n	8003a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a0f      	ldr	r2, [pc, #60]	@ (8003ab8 <DFSDM_GetChannelFromInstance+0x90>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d102      	bne.n	8003a84 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003a7e:	2306      	movs	r3, #6
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	e008      	b.n	8003a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0d      	ldr	r2, [pc, #52]	@ (8003abc <DFSDM_GetChannelFromInstance+0x94>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d102      	bne.n	8003a92 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003a8c:	2307      	movs	r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e001      	b.n	8003a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003a92:	2303      	movs	r3, #3
 8003a94:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003a96:	68fb      	ldr	r3, [r7, #12]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40016000 	.word	0x40016000
 8003aa8:	40016020 	.word	0x40016020
 8003aac:	40016040 	.word	0x40016040
 8003ab0:	40016080 	.word	0x40016080
 8003ab4:	400160a0 	.word	0x400160a0
 8003ab8:	400160c0 	.word	0x400160c0
 8003abc:	400160e0 	.word	0x400160e0

08003ac0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d008      	beq.n	8003aea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2204      	movs	r2, #4
 8003adc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e040      	b.n	8003b6c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 020e 	bic.w	r2, r2, #14
 8003af8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b08:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1e:	f003 021c 	and.w	r2, r3, #28
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2c:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b36:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00c      	beq.n	8003b5a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b58:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d005      	beq.n	8003b9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2204      	movs	r2, #4
 8003b94:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
 8003b9a:	e047      	b.n	8003c2c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 020e 	bic.w	r2, r2, #14
 8003baa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd0:	f003 021c 	and.w	r2, r3, #28
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f202 	lsl.w	r2, r1, r2
 8003bde:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003be8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c0a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
    }
  }
  return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c46:	e166      	b.n	8003f16 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	fa01 f303 	lsl.w	r3, r1, r3
 8003c54:	4013      	ands	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8158 	beq.w	8003f10 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d005      	beq.n	8003c78 <HAL_GPIO_Init+0x40>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d130      	bne.n	8003cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	2203      	movs	r2, #3
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cae:	2201      	movs	r2, #1
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 0201 	and.w	r2, r3, #1
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d017      	beq.n	8003d16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d123      	bne.n	8003d6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	08da      	lsrs	r2, r3, #3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3208      	adds	r2, #8
 8003d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	220f      	movs	r2, #15
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	08da      	lsrs	r2, r3, #3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3208      	adds	r2, #8
 8003d64:	6939      	ldr	r1, [r7, #16]
 8003d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	2203      	movs	r2, #3
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0203 	and.w	r2, r3, #3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80b2 	beq.w	8003f10 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dac:	4b61      	ldr	r3, [pc, #388]	@ (8003f34 <HAL_GPIO_Init+0x2fc>)
 8003dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db0:	4a60      	ldr	r2, [pc, #384]	@ (8003f34 <HAL_GPIO_Init+0x2fc>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003db8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f34 <HAL_GPIO_Init+0x2fc>)
 8003dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dc4:	4a5c      	ldr	r2, [pc, #368]	@ (8003f38 <HAL_GPIO_Init+0x300>)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	3302      	adds	r3, #2
 8003dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	220f      	movs	r2, #15
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dee:	d02b      	beq.n	8003e48 <HAL_GPIO_Init+0x210>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a52      	ldr	r2, [pc, #328]	@ (8003f3c <HAL_GPIO_Init+0x304>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d025      	beq.n	8003e44 <HAL_GPIO_Init+0x20c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a51      	ldr	r2, [pc, #324]	@ (8003f40 <HAL_GPIO_Init+0x308>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d01f      	beq.n	8003e40 <HAL_GPIO_Init+0x208>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a50      	ldr	r2, [pc, #320]	@ (8003f44 <HAL_GPIO_Init+0x30c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d019      	beq.n	8003e3c <HAL_GPIO_Init+0x204>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a4f      	ldr	r2, [pc, #316]	@ (8003f48 <HAL_GPIO_Init+0x310>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <HAL_GPIO_Init+0x200>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a4e      	ldr	r2, [pc, #312]	@ (8003f4c <HAL_GPIO_Init+0x314>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00d      	beq.n	8003e34 <HAL_GPIO_Init+0x1fc>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a4d      	ldr	r2, [pc, #308]	@ (8003f50 <HAL_GPIO_Init+0x318>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d007      	beq.n	8003e30 <HAL_GPIO_Init+0x1f8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a4c      	ldr	r2, [pc, #304]	@ (8003f54 <HAL_GPIO_Init+0x31c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_GPIO_Init+0x1f4>
 8003e28:	2307      	movs	r3, #7
 8003e2a:	e00e      	b.n	8003e4a <HAL_GPIO_Init+0x212>
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	e00c      	b.n	8003e4a <HAL_GPIO_Init+0x212>
 8003e30:	2306      	movs	r3, #6
 8003e32:	e00a      	b.n	8003e4a <HAL_GPIO_Init+0x212>
 8003e34:	2305      	movs	r3, #5
 8003e36:	e008      	b.n	8003e4a <HAL_GPIO_Init+0x212>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	e006      	b.n	8003e4a <HAL_GPIO_Init+0x212>
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e004      	b.n	8003e4a <HAL_GPIO_Init+0x212>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e002      	b.n	8003e4a <HAL_GPIO_Init+0x212>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_GPIO_Init+0x212>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	f002 0203 	and.w	r2, r2, #3
 8003e50:	0092      	lsls	r2, r2, #2
 8003e52:	4093      	lsls	r3, r2
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e5a:	4937      	ldr	r1, [pc, #220]	@ (8003f38 <HAL_GPIO_Init+0x300>)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	089b      	lsrs	r3, r3, #2
 8003e60:	3302      	adds	r3, #2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e68:	4b3b      	ldr	r3, [pc, #236]	@ (8003f58 <HAL_GPIO_Init+0x320>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e8c:	4a32      	ldr	r2, [pc, #200]	@ (8003f58 <HAL_GPIO_Init+0x320>)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e92:	4b31      	ldr	r3, [pc, #196]	@ (8003f58 <HAL_GPIO_Init+0x320>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eb6:	4a28      	ldr	r2, [pc, #160]	@ (8003f58 <HAL_GPIO_Init+0x320>)
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ebc:	4b26      	ldr	r3, [pc, #152]	@ (8003f58 <HAL_GPIO_Init+0x320>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f58 <HAL_GPIO_Init+0x320>)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f58 <HAL_GPIO_Init+0x320>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f0a:	4a13      	ldr	r2, [pc, #76]	@ (8003f58 <HAL_GPIO_Init+0x320>)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	3301      	adds	r3, #1
 8003f14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f47f ae91 	bne.w	8003c48 <HAL_GPIO_Init+0x10>
  }
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	48000400 	.word	0x48000400
 8003f40:	48000800 	.word	0x48000800
 8003f44:	48000c00 	.word	0x48000c00
 8003f48:	48001000 	.word	0x48001000
 8003f4c:	48001400 	.word	0x48001400
 8003f50:	48001800 	.word	0x48001800
 8003f54:	48001c00 	.word	0x48001c00
 8003f58:	40010400 	.word	0x40010400

08003f5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003f6a:	e0c9      	b.n	8004100 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80bc 	beq.w	80040fa <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003f82:	4a66      	ldr	r2, [pc, #408]	@ (800411c <HAL_GPIO_DeInit+0x1c0>)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	3302      	adds	r3, #2
 8003f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	220f      	movs	r2, #15
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003faa:	d02b      	beq.n	8004004 <HAL_GPIO_DeInit+0xa8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a5c      	ldr	r2, [pc, #368]	@ (8004120 <HAL_GPIO_DeInit+0x1c4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d025      	beq.n	8004000 <HAL_GPIO_DeInit+0xa4>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8004124 <HAL_GPIO_DeInit+0x1c8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d01f      	beq.n	8003ffc <HAL_GPIO_DeInit+0xa0>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a5a      	ldr	r2, [pc, #360]	@ (8004128 <HAL_GPIO_DeInit+0x1cc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d019      	beq.n	8003ff8 <HAL_GPIO_DeInit+0x9c>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a59      	ldr	r2, [pc, #356]	@ (800412c <HAL_GPIO_DeInit+0x1d0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_GPIO_DeInit+0x98>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a58      	ldr	r2, [pc, #352]	@ (8004130 <HAL_GPIO_DeInit+0x1d4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_GPIO_DeInit+0x94>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a57      	ldr	r2, [pc, #348]	@ (8004134 <HAL_GPIO_DeInit+0x1d8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <HAL_GPIO_DeInit+0x90>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a56      	ldr	r2, [pc, #344]	@ (8004138 <HAL_GPIO_DeInit+0x1dc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d101      	bne.n	8003fe8 <HAL_GPIO_DeInit+0x8c>
 8003fe4:	2307      	movs	r3, #7
 8003fe6:	e00e      	b.n	8004006 <HAL_GPIO_DeInit+0xaa>
 8003fe8:	2308      	movs	r3, #8
 8003fea:	e00c      	b.n	8004006 <HAL_GPIO_DeInit+0xaa>
 8003fec:	2306      	movs	r3, #6
 8003fee:	e00a      	b.n	8004006 <HAL_GPIO_DeInit+0xaa>
 8003ff0:	2305      	movs	r3, #5
 8003ff2:	e008      	b.n	8004006 <HAL_GPIO_DeInit+0xaa>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	e006      	b.n	8004006 <HAL_GPIO_DeInit+0xaa>
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e004      	b.n	8004006 <HAL_GPIO_DeInit+0xaa>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e002      	b.n	8004006 <HAL_GPIO_DeInit+0xaa>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <HAL_GPIO_DeInit+0xaa>
 8004004:	2300      	movs	r3, #0
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	f002 0203 	and.w	r2, r2, #3
 800400c:	0092      	lsls	r2, r2, #2
 800400e:	4093      	lsls	r3, r2
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	429a      	cmp	r2, r3
 8004014:	d132      	bne.n	800407c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004016:	4b49      	ldr	r3, [pc, #292]	@ (800413c <HAL_GPIO_DeInit+0x1e0>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	43db      	mvns	r3, r3
 800401e:	4947      	ldr	r1, [pc, #284]	@ (800413c <HAL_GPIO_DeInit+0x1e0>)
 8004020:	4013      	ands	r3, r2
 8004022:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004024:	4b45      	ldr	r3, [pc, #276]	@ (800413c <HAL_GPIO_DeInit+0x1e0>)
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	43db      	mvns	r3, r3
 800402c:	4943      	ldr	r1, [pc, #268]	@ (800413c <HAL_GPIO_DeInit+0x1e0>)
 800402e:	4013      	ands	r3, r2
 8004030:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004032:	4b42      	ldr	r3, [pc, #264]	@ (800413c <HAL_GPIO_DeInit+0x1e0>)
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	43db      	mvns	r3, r3
 800403a:	4940      	ldr	r1, [pc, #256]	@ (800413c <HAL_GPIO_DeInit+0x1e0>)
 800403c:	4013      	ands	r3, r2
 800403e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004040:	4b3e      	ldr	r3, [pc, #248]	@ (800413c <HAL_GPIO_DeInit+0x1e0>)
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	43db      	mvns	r3, r3
 8004048:	493c      	ldr	r1, [pc, #240]	@ (800413c <HAL_GPIO_DeInit+0x1e0>)
 800404a:	4013      	ands	r3, r2
 800404c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	220f      	movs	r2, #15
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800405e:	4a2f      	ldr	r2, [pc, #188]	@ (800411c <HAL_GPIO_DeInit+0x1c0>)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	089b      	lsrs	r3, r3, #2
 8004064:	3302      	adds	r3, #2
 8004066:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	43da      	mvns	r2, r3
 800406e:	482b      	ldr	r0, [pc, #172]	@ (800411c <HAL_GPIO_DeInit+0x1c0>)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	089b      	lsrs	r3, r3, #2
 8004074:	400a      	ands	r2, r1
 8004076:	3302      	adds	r3, #2
 8004078:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	2103      	movs	r1, #3
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	08da      	lsrs	r2, r3, #3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3208      	adds	r2, #8
 8004098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	220f      	movs	r2, #15
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	08d2      	lsrs	r2, r2, #3
 80040b0:	4019      	ands	r1, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3208      	adds	r2, #8
 80040b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	2103      	movs	r1, #3
 80040c4:	fa01 f303 	lsl.w	r3, r1, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	401a      	ands	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	2101      	movs	r1, #1
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	fa01 f303 	lsl.w	r3, r1, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	401a      	ands	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	2103      	movs	r1, #3
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	401a      	ands	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	3301      	adds	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	f47f af2f 	bne.w	8003f6c <HAL_GPIO_DeInit+0x10>
  }
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40010000 	.word	0x40010000
 8004120:	48000400 	.word	0x48000400
 8004124:	48000800 	.word	0x48000800
 8004128:	48000c00 	.word	0x48000c00
 800412c:	48001000 	.word	0x48001000
 8004130:	48001400 	.word	0x48001400
 8004134:	48001800 	.word	0x48001800
 8004138:	48001c00 	.word	0x48001c00
 800413c:	40010400 	.word	0x40010400

08004140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
 800414c:	4613      	mov	r3, r2
 800414e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004150:	787b      	ldrb	r3, [r7, #1]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800415c:	e002      	b.n	8004164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800417a:	4b08      	ldr	r3, [pc, #32]	@ (800419c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004186:	4a05      	ldr	r2, [pc, #20]	@ (800419c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc ff44 	bl	800101c <HAL_GPIO_EXTI_Callback>
  }
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40010400 	.word	0x40010400

080041a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e08d      	b.n	80042ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd f95e 	bl	8001488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	@ 0x24
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004200:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	e006      	b.n	8004228 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004226:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d108      	bne.n	8004242 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	e007      	b.n	8004252 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004250:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004264:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004274:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69d9      	ldr	r1, [r3, #28]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1a      	ldr	r2, [r3, #32]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e021      	b.n	800432c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	@ 0x24
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7fd f963 	bl	80015cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	817b      	strh	r3, [r7, #10]
 8004346:	460b      	mov	r3, r1
 8004348:	813b      	strh	r3, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b20      	cmp	r3, #32
 8004358:	f040 80f9 	bne.w	800454e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_I2C_Mem_Write+0x34>
 8004362:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800436e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0ed      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_I2C_Mem_Write+0x4e>
 800437e:	2302      	movs	r3, #2
 8004380:	e0e6      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800438a:	f7fd fefd 	bl	8002188 <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2319      	movs	r3, #25
 8004396:	2201      	movs	r2, #1
 8004398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fac3 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0d1      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2221      	movs	r2, #33	@ 0x21
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2240      	movs	r2, #64	@ 0x40
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a3a      	ldr	r2, [r7, #32]
 80043c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043d4:	88f8      	ldrh	r0, [r7, #6]
 80043d6:	893a      	ldrh	r2, [r7, #8]
 80043d8:	8979      	ldrh	r1, [r7, #10]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	4603      	mov	r3, r0
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f9d3 	bl	8004790 <I2C_RequestMemoryWrite>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0a9      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2bff      	cmp	r3, #255	@ 0xff
 8004404:	d90e      	bls.n	8004424 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	22ff      	movs	r2, #255	@ 0xff
 800440a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004410:	b2da      	uxtb	r2, r3
 8004412:	8979      	ldrh	r1, [r7, #10]
 8004414:	2300      	movs	r3, #0
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fc47 	bl	8004cb0 <I2C_TransferConfig>
 8004422:	e00f      	b.n	8004444 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004432:	b2da      	uxtb	r2, r3
 8004434:	8979      	ldrh	r1, [r7, #10]
 8004436:	2300      	movs	r3, #0
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fc36 	bl	8004cb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fac6 	bl	80049da <I2C_WaitOnTXISFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e07b      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d034      	beq.n	80044fc <HAL_I2C_Mem_Write+0x1c8>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d130      	bne.n	80044fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a0:	2200      	movs	r2, #0
 80044a2:	2180      	movs	r1, #128	@ 0x80
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fa3f 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e04d      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2bff      	cmp	r3, #255	@ 0xff
 80044bc:	d90e      	bls.n	80044dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	22ff      	movs	r2, #255	@ 0xff
 80044c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	8979      	ldrh	r1, [r7, #10]
 80044cc:	2300      	movs	r3, #0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fbeb 	bl	8004cb0 <I2C_TransferConfig>
 80044da:	e00f      	b.n	80044fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	8979      	ldrh	r1, [r7, #10]
 80044ee:	2300      	movs	r3, #0
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fbda 	bl	8004cb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d19e      	bne.n	8004444 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 faac 	bl	8004a68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e01a      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2220      	movs	r2, #32
 8004520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6859      	ldr	r1, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <HAL_I2C_Mem_Write+0x224>)
 800452e:	400b      	ands	r3, r1
 8004530:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	fe00e800 	.word	0xfe00e800

0800455c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	461a      	mov	r2, r3
 800456a:	4603      	mov	r3, r0
 800456c:	817b      	strh	r3, [r7, #10]
 800456e:	460b      	mov	r3, r1
 8004570:	813b      	strh	r3, [r7, #8]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b20      	cmp	r3, #32
 8004580:	f040 80fd 	bne.w	800477e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_I2C_Mem_Read+0x34>
 800458a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	d105      	bne.n	800459c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004596:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0f1      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_I2C_Mem_Read+0x4e>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e0ea      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045b2:	f7fd fde9 	bl	8002188 <HAL_GetTick>
 80045b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	2319      	movs	r3, #25
 80045be:	2201      	movs	r2, #1
 80045c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f9af 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0d5      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2222      	movs	r2, #34	@ 0x22
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2240      	movs	r2, #64	@ 0x40
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a3a      	ldr	r2, [r7, #32]
 80045ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80045f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045fc:	88f8      	ldrh	r0, [r7, #6]
 80045fe:	893a      	ldrh	r2, [r7, #8]
 8004600:	8979      	ldrh	r1, [r7, #10]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	4603      	mov	r3, r0
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f913 	bl	8004838 <I2C_RequestMemoryRead>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0ad      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2bff      	cmp	r3, #255	@ 0xff
 800462c:	d90e      	bls.n	800464c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004638:	b2da      	uxtb	r2, r3
 800463a:	8979      	ldrh	r1, [r7, #10]
 800463c:	4b52      	ldr	r3, [pc, #328]	@ (8004788 <HAL_I2C_Mem_Read+0x22c>)
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fb33 	bl	8004cb0 <I2C_TransferConfig>
 800464a:	e00f      	b.n	800466c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465a:	b2da      	uxtb	r2, r3
 800465c:	8979      	ldrh	r1, [r7, #10]
 800465e:	4b4a      	ldr	r3, [pc, #296]	@ (8004788 <HAL_I2C_Mem_Read+0x22c>)
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fb22 	bl	8004cb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004672:	2200      	movs	r2, #0
 8004674:	2104      	movs	r1, #4
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f956 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e07c      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d034      	beq.n	800472c <HAL_I2C_Mem_Read+0x1d0>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d130      	bne.n	800472c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d0:	2200      	movs	r2, #0
 80046d2:	2180      	movs	r1, #128	@ 0x80
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f927 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e04d      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2bff      	cmp	r3, #255	@ 0xff
 80046ec:	d90e      	bls.n	800470c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	8979      	ldrh	r1, [r7, #10]
 80046fc:	2300      	movs	r3, #0
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fad3 	bl	8004cb0 <I2C_TransferConfig>
 800470a:	e00f      	b.n	800472c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471a:	b2da      	uxtb	r2, r3
 800471c:	8979      	ldrh	r1, [r7, #10]
 800471e:	2300      	movs	r3, #0
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fac2 	bl	8004cb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d19a      	bne.n	800466c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f994 	bl	8004a68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e01a      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2220      	movs	r2, #32
 8004750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6859      	ldr	r1, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <HAL_I2C_Mem_Read+0x230>)
 800475e:	400b      	ands	r3, r1
 8004760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	80002400 	.word	0x80002400
 800478c:	fe00e800 	.word	0xfe00e800

08004790 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	4608      	mov	r0, r1
 800479a:	4611      	mov	r1, r2
 800479c:	461a      	mov	r2, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	817b      	strh	r3, [r7, #10]
 80047a2:	460b      	mov	r3, r1
 80047a4:	813b      	strh	r3, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	8979      	ldrh	r1, [r7, #10]
 80047b0:	4b20      	ldr	r3, [pc, #128]	@ (8004834 <I2C_RequestMemoryWrite+0xa4>)
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fa79 	bl	8004cb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	69b9      	ldr	r1, [r7, #24]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f909 	bl	80049da <I2C_WaitOnTXISFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e02c      	b.n	800482c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d105      	bne.n	80047e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047d8:	893b      	ldrh	r3, [r7, #8]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80047e2:	e015      	b.n	8004810 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047e4:	893b      	ldrh	r3, [r7, #8]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	69b9      	ldr	r1, [r7, #24]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f8ef 	bl	80049da <I2C_WaitOnTXISFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e012      	b.n	800482c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004806:	893b      	ldrh	r3, [r7, #8]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2200      	movs	r2, #0
 8004818:	2180      	movs	r1, #128	@ 0x80
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f884 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	80002000 	.word	0x80002000

08004838 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	4608      	mov	r0, r1
 8004842:	4611      	mov	r1, r2
 8004844:	461a      	mov	r2, r3
 8004846:	4603      	mov	r3, r0
 8004848:	817b      	strh	r3, [r7, #10]
 800484a:	460b      	mov	r3, r1
 800484c:	813b      	strh	r3, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	8979      	ldrh	r1, [r7, #10]
 8004858:	4b20      	ldr	r3, [pc, #128]	@ (80048dc <I2C_RequestMemoryRead+0xa4>)
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	2300      	movs	r3, #0
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fa26 	bl	8004cb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	69b9      	ldr	r1, [r7, #24]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f8b6 	bl	80049da <I2C_WaitOnTXISFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e02c      	b.n	80048d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800487e:	893b      	ldrh	r3, [r7, #8]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	629a      	str	r2, [r3, #40]	@ 0x28
 8004888:	e015      	b.n	80048b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800488a:	893b      	ldrh	r3, [r7, #8]
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	b29b      	uxth	r3, r3
 8004890:	b2da      	uxtb	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	69b9      	ldr	r1, [r7, #24]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f89c 	bl	80049da <I2C_WaitOnTXISFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e012      	b.n	80048d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ac:	893b      	ldrh	r3, [r7, #8]
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2200      	movs	r2, #0
 80048be:	2140      	movs	r1, #64	@ 0x40
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f831 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	80002000 	.word	0x80002000

080048e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d103      	bne.n	80048fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2200      	movs	r2, #0
 80048fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b01      	cmp	r3, #1
 800490a:	d007      	beq.n	800491c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	619a      	str	r2, [r3, #24]
  }
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004938:	e03b      	b.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	6839      	ldr	r1, [r7, #0]
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f8d6 	bl	8004af0 <I2C_IsErrorOccurred>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e041      	b.n	80049d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d02d      	beq.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004956:	f7fd fc17 	bl	8002188 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d302      	bcc.n	800496c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d122      	bne.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4013      	ands	r3, r2
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	429a      	cmp	r2, r3
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	429a      	cmp	r2, r3
 8004988:	d113      	bne.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e00f      	b.n	80049d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4013      	ands	r3, r2
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d0b4      	beq.n	800493a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049e6:	e033      	b.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f87f 	bl	8004af0 <I2C_IsErrorOccurred>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e031      	b.n	8004a60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d025      	beq.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a04:	f7fd fbc0 	bl	8002188 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d302      	bcc.n	8004a1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11a      	bne.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d013      	beq.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e007      	b.n	8004a60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d1c4      	bne.n	80049e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a74:	e02f      	b.n	8004ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f838 	bl	8004af0 <I2C_IsErrorOccurred>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e02d      	b.n	8004ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8a:	f7fd fb7d 	bl	8002188 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d302      	bcc.n	8004aa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d11a      	bne.n	8004ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d013      	beq.n	8004ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e007      	b.n	8004ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d1c8      	bne.n	8004a76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	@ 0x28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d068      	beq.n	8004bee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2210      	movs	r2, #16
 8004b22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b24:	e049      	b.n	8004bba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d045      	beq.n	8004bba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b2e:	f7fd fb2b 	bl	8002188 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d302      	bcc.n	8004b44 <I2C_IsErrorOccurred+0x54>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d13a      	bne.n	8004bba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b66:	d121      	bne.n	8004bac <I2C_IsErrorOccurred+0xbc>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b6e:	d01d      	beq.n	8004bac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d01a      	beq.n	8004bac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b86:	f7fd faff 	bl	8002188 <HAL_GetTick>
 8004b8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b8c:	e00e      	b.n	8004bac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b8e:	f7fd fafb 	bl	8002188 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b19      	cmp	r3, #25
 8004b9a:	d907      	bls.n	8004bac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	f043 0320 	orr.w	r3, r3, #32
 8004ba2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004baa:	e006      	b.n	8004bba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d1e9      	bne.n	8004b8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d003      	beq.n	8004bd0 <I2C_IsErrorOccurred+0xe0>
 8004bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0aa      	beq.n	8004b26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	f043 0304 	orr.w	r3, r3, #4
 8004be6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00b      	beq.n	8004c18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f043 0308 	orr.w	r3, r3, #8
 8004c28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	f043 0302 	orr.w	r3, r3, #2
 8004c4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01c      	beq.n	8004c9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f7ff fe3b 	bl	80048e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <I2C_IsErrorOccurred+0x1bc>)
 8004c76:	400b      	ands	r3, r1
 8004c78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3728      	adds	r7, #40	@ 0x28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	fe00e800 	.word	0xfe00e800

08004cb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	817b      	strh	r3, [r7, #10]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cc2:	897b      	ldrh	r3, [r7, #10]
 8004cc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cc8:	7a7b      	ldrb	r3, [r7, #9]
 8004cca:	041b      	lsls	r3, r3, #16
 8004ccc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	0d5b      	lsrs	r3, r3, #21
 8004cea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004cee:	4b08      	ldr	r3, [pc, #32]	@ (8004d10 <I2C_TransferConfig+0x60>)
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	ea02 0103 	and.w	r1, r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	03ff63ff 	.word	0x03ff63ff

08004d14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d138      	bne.n	8004d9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e032      	b.n	8004d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2224      	movs	r2, #36	@ 0x24
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0201 	bic.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6819      	ldr	r1, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d139      	bne.n	8004e34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e033      	b.n	8004e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2224      	movs	r2, #36	@ 0x24
 8004dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004dfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004e50:	f7fd f99a 	bl	8002188 <HAL_GetTick>
 8004e54:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
 8004e60:	e092      	b.n	8004f88 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 808b 	bne.w	8004f88 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fc fbe6 	bl	8001644 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004e78:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f88b 	bl	8004f98 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	4b42      	ldr	r3, [pc, #264]	@ (8004f94 <HAL_OSPI_Init+0x150>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68d1      	ldr	r1, [r2, #12]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6912      	ldr	r2, [r2, #16]
 8004e94:	3a01      	subs	r2, #1
 8004e96:	0412      	lsls	r2, r2, #16
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6952      	ldr	r2, [r2, #20]
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	0212      	lsls	r2, r2, #8
 8004ea2:	4311      	orrs	r1, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ea8:	4311      	orrs	r1, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	69d2      	ldr	r2, [r2, #28]
 8004eae:	4311      	orrs	r1, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	0412      	lsls	r2, r2, #16
 8004ec2:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	021a      	lsls	r2, r3, #8
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2120      	movs	r1, #32
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fb9c 	bl	8005628 <OSPI_WaitFlagStateUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d146      	bne.n	8004f88 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	1e5a      	subs	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004f30:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d107      	bne.n	8004f70 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0202 	orr.w	r2, r2, #2
 8004f6e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f78:	d103      	bne.n	8004f82 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f80:	e002      	b.n	8004f88 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	f8e0f8f4 	.word	0xf8e0f8f4

08004f98 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b092      	sub	sp, #72	@ 0x48
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a08      	ldr	r2, [pc, #32]	@ (8004ff8 <HAL_OSPIM_Config+0x40>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d105      	bne.n	8004fe6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8004fe4:	e004      	b.n	8004ff0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004ff6:	e01f      	b.n	8005038 <HAL_OSPIM_Config+0x80>
 8004ff8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004ffc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005000:	3301      	adds	r3, #1
 8005002:	b2d8      	uxtb	r0, r3
 8005004:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005008:	f107 0114 	add.w	r1, r7, #20
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	4619      	mov	r1, r3
 8005018:	f000 fb3e 	bl	8005698 <OSPIM_GetConfig>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2208      	movs	r2, #8
 800502c:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800502e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005032:	3301      	adds	r3, #1
 8005034:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005038:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800503c:	2b01      	cmp	r3, #1
 800503e:	d9dd      	bls.n	8004ffc <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8005040:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005044:	2b00      	cmp	r3, #0
 8005046:	f040 82e3 	bne.w	8005610 <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800504a:	4bc5      	ldr	r3, [pc, #788]	@ (8005360 <HAL_OSPIM_Config+0x3a8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005056:	4bc2      	ldr	r3, [pc, #776]	@ (8005360 <HAL_OSPIM_Config+0x3a8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4ac1      	ldr	r2, [pc, #772]	@ (8005360 <HAL_OSPIM_Config+0x3a8>)
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005062:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800506e:	4bbd      	ldr	r3, [pc, #756]	@ (8005364 <HAL_OSPIM_Config+0x3ac>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800507a:	4bba      	ldr	r3, [pc, #744]	@ (8005364 <HAL_OSPIM_Config+0x3ac>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4ab9      	ldr	r2, [pc, #740]	@ (8005364 <HAL_OSPIM_Config+0x3ac>)
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005086:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800508a:	f043 0302 	orr.w	r3, r3, #2
 800508e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005092:	49b5      	ldr	r1, [pc, #724]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 8005094:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	3348      	adds	r3, #72	@ 0x48
 80050a0:	443b      	add	r3, r7
 80050a2:	3b2c      	subs	r3, #44	@ 0x2c
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	6859      	ldr	r1, [r3, #4]
 80050ae:	48ae      	ldr	r0, [pc, #696]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 80050b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	3348      	adds	r3, #72	@ 0x48
 80050bc:	443b      	add	r3, r7
 80050be:	3b2c      	subs	r3, #44	@ 0x2c
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4403      	add	r3, r0
 80050cc:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80050ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	3348      	adds	r3, #72	@ 0x48
 80050da:	443b      	add	r3, r7
 80050dc:	3b34      	subs	r3, #52	@ 0x34
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80a1 	beq.w	8005228 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80050e6:	49a0      	ldr	r1, [pc, #640]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 80050e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	3348      	adds	r3, #72	@ 0x48
 80050f4:	443b      	add	r3, r7
 80050f6:	3b34      	subs	r3, #52	@ 0x34
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	6859      	ldr	r1, [r3, #4]
 8005102:	4899      	ldr	r0, [pc, #612]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 8005104:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	3348      	adds	r3, #72	@ 0x48
 8005110:	443b      	add	r3, r7
 8005112:	3b34      	subs	r3, #52	@ 0x34
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	f021 0201 	bic.w	r2, r1, #1
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4403      	add	r3, r0
 8005120:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005122:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	3348      	adds	r3, #72	@ 0x48
 800512e:	443b      	add	r3, r7
 8005130:	3b30      	subs	r3, #48	@ 0x30
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01d      	beq.n	8005174 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005138:	498b      	ldr	r1, [pc, #556]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 800513a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	3348      	adds	r3, #72	@ 0x48
 8005146:	443b      	add	r3, r7
 8005148:	3b30      	subs	r3, #48	@ 0x30
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3b01      	subs	r3, #1
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	6859      	ldr	r1, [r3, #4]
 8005154:	4884      	ldr	r0, [pc, #528]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 8005156:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	3348      	adds	r3, #72	@ 0x48
 8005162:	443b      	add	r3, r7
 8005164:	3b30      	subs	r3, #48	@ 0x30
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3b01      	subs	r3, #1
 800516a:	f021 0210 	bic.w	r2, r1, #16
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4403      	add	r3, r0
 8005172:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005174:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	3348      	adds	r3, #72	@ 0x48
 8005180:	443b      	add	r3, r7
 8005182:	3b28      	subs	r3, #40	@ 0x28
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d021      	beq.n	80051ce <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800518a:	4977      	ldr	r1, [pc, #476]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 800518c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	3348      	adds	r3, #72	@ 0x48
 8005198:	443b      	add	r3, r7
 800519a:	3b28      	subs	r3, #40	@ 0x28
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3b01      	subs	r3, #1
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	6859      	ldr	r1, [r3, #4]
 80051aa:	486f      	ldr	r0, [pc, #444]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 80051ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	3348      	adds	r3, #72	@ 0x48
 80051b8:	443b      	add	r3, r7
 80051ba:	3b28      	subs	r3, #40	@ 0x28
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3b01      	subs	r3, #1
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4403      	add	r3, r0
 80051cc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80051ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	3348      	adds	r3, #72	@ 0x48
 80051da:	443b      	add	r3, r7
 80051dc:	3b24      	subs	r3, #36	@ 0x24
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d021      	beq.n	8005228 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80051e4:	4960      	ldr	r1, [pc, #384]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 80051e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	3348      	adds	r3, #72	@ 0x48
 80051f2:	443b      	add	r3, r7
 80051f4:	3b24      	subs	r3, #36	@ 0x24
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	6859      	ldr	r1, [r3, #4]
 8005204:	4858      	ldr	r0, [pc, #352]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 8005206:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	3348      	adds	r3, #72	@ 0x48
 8005212:	443b      	add	r3, r7
 8005214:	3b24      	subs	r3, #36	@ 0x24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3b01      	subs	r3, #1
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4403      	add	r3, r0
 8005226:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	6819      	ldr	r1, [r3, #0]
 800522c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	3348      	adds	r3, #72	@ 0x48
 800523a:	443b      	add	r3, r7
 800523c:	3b34      	subs	r3, #52	@ 0x34
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4299      	cmp	r1, r3
 8005242:	d03c      	beq.n	80052be <HAL_OSPIM_Config+0x306>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	6899      	ldr	r1, [r3, #8]
 8005248:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	3348      	adds	r3, #72	@ 0x48
 8005256:	443b      	add	r3, r7
 8005258:	3b2c      	subs	r3, #44	@ 0x2c
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4299      	cmp	r1, r3
 800525e:	d02e      	beq.n	80052be <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	6859      	ldr	r1, [r3, #4]
 8005264:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	3348      	adds	r3, #72	@ 0x48
 8005272:	443b      	add	r3, r7
 8005274:	3b30      	subs	r3, #48	@ 0x30
 8005276:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8005278:	4299      	cmp	r1, r3
 800527a:	d103      	bne.n	8005284 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d11c      	bne.n	80052be <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	68d9      	ldr	r1, [r3, #12]
 8005288:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	3348      	adds	r3, #72	@ 0x48
 8005296:	443b      	add	r3, r7
 8005298:	3b28      	subs	r3, #40	@ 0x28
 800529a:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800529c:	4299      	cmp	r1, r3
 800529e:	d00e      	beq.n	80052be <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	6919      	ldr	r1, [r3, #16]
 80052a4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	3348      	adds	r3, #72	@ 0x48
 80052b2:	443b      	add	r3, r7
 80052b4:	3b24      	subs	r3, #36	@ 0x24
 80052b6:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80052b8:	4299      	cmp	r1, r3
 80052ba:	f040 80d4 	bne.w	8005466 <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80052be:	492a      	ldr	r1, [pc, #168]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 80052c0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	3348      	adds	r3, #72	@ 0x48
 80052ce:	443b      	add	r3, r7
 80052d0:	3b34      	subs	r3, #52	@ 0x34
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	6859      	ldr	r1, [r3, #4]
 80052dc:	4822      	ldr	r0, [pc, #136]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 80052de:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	3348      	adds	r3, #72	@ 0x48
 80052ec:	443b      	add	r3, r7
 80052ee:	3b34      	subs	r3, #52	@ 0x34
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	f021 0201 	bic.w	r2, r1, #1
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4403      	add	r3, r0
 80052fc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80052fe:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	3348      	adds	r3, #72	@ 0x48
 800530c:	443b      	add	r3, r7
 800530e:	3b30      	subs	r3, #48	@ 0x30
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01f      	beq.n	8005356 <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005316:	4914      	ldr	r1, [pc, #80]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 8005318:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	3348      	adds	r3, #72	@ 0x48
 8005326:	443b      	add	r3, r7
 8005328:	3b30      	subs	r3, #48	@ 0x30
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3b01      	subs	r3, #1
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	6859      	ldr	r1, [r3, #4]
 8005334:	480c      	ldr	r0, [pc, #48]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 8005336:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	3348      	adds	r3, #72	@ 0x48
 8005344:	443b      	add	r3, r7
 8005346:	3b30      	subs	r3, #48	@ 0x30
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3b01      	subs	r3, #1
 800534c:	f021 0210 	bic.w	r2, r1, #16
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4403      	add	r3, r0
 8005354:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005356:	4904      	ldr	r1, [pc, #16]	@ (8005368 <HAL_OSPIM_Config+0x3b0>)
 8005358:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800535c:	e006      	b.n	800536c <HAL_OSPIM_Config+0x3b4>
 800535e:	bf00      	nop
 8005360:	a0001000 	.word	0xa0001000
 8005364:	a0001400 	.word	0xa0001400
 8005368:	50061c00 	.word	0x50061c00
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	3348      	adds	r3, #72	@ 0x48
 8005376:	443b      	add	r3, r7
 8005378:	3b2c      	subs	r3, #44	@ 0x2c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3b01      	subs	r3, #1
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	6859      	ldr	r1, [r3, #4]
 8005384:	48a5      	ldr	r0, [pc, #660]	@ (800561c <HAL_OSPIM_Config+0x664>)
 8005386:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	3348      	adds	r3, #72	@ 0x48
 8005394:	443b      	add	r3, r7
 8005396:	3b2c      	subs	r3, #44	@ 0x2c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3b01      	subs	r3, #1
 800539c:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4403      	add	r3, r0
 80053a4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80053a6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	3348      	adds	r3, #72	@ 0x48
 80053b4:	443b      	add	r3, r7
 80053b6:	3b28      	subs	r3, #40	@ 0x28
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d023      	beq.n	8005406 <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80053be:	4997      	ldr	r1, [pc, #604]	@ (800561c <HAL_OSPIM_Config+0x664>)
 80053c0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	3348      	adds	r3, #72	@ 0x48
 80053ce:	443b      	add	r3, r7
 80053d0:	3b28      	subs	r3, #40	@ 0x28
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	488e      	ldr	r0, [pc, #568]	@ (800561c <HAL_OSPIM_Config+0x664>)
 80053e2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80053e6:	4613      	mov	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	3348      	adds	r3, #72	@ 0x48
 80053f0:	443b      	add	r3, r7
 80053f2:	3b28      	subs	r3, #40	@ 0x28
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4403      	add	r3, r0
 8005404:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005406:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	3348      	adds	r3, #72	@ 0x48
 8005414:	443b      	add	r3, r7
 8005416:	3b24      	subs	r3, #36	@ 0x24
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d023      	beq.n	8005466 <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800541e:	497f      	ldr	r1, [pc, #508]	@ (800561c <HAL_OSPIM_Config+0x664>)
 8005420:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	3348      	adds	r3, #72	@ 0x48
 800542e:	443b      	add	r3, r7
 8005430:	3b24      	subs	r3, #36	@ 0x24
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3b01      	subs	r3, #1
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	6859      	ldr	r1, [r3, #4]
 8005440:	4876      	ldr	r0, [pc, #472]	@ (800561c <HAL_OSPIM_Config+0x664>)
 8005442:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	3348      	adds	r3, #72	@ 0x48
 8005450:	443b      	add	r3, r7
 8005452:	3b24      	subs	r3, #36	@ 0x24
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3b01      	subs	r3, #1
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4403      	add	r3, r0
 8005464:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005466:	4a6d      	ldr	r2, [pc, #436]	@ (800561c <HAL_OSPIM_Config+0x664>)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	3b01      	subs	r3, #1
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800547a:	025b      	lsls	r3, r3, #9
 800547c:	431a      	orrs	r2, r3
 800547e:	4967      	ldr	r1, [pc, #412]	@ (800561c <HAL_OSPIM_Config+0x664>)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	3b01      	subs	r3, #1
 8005486:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005490:	4a62      	ldr	r2, [pc, #392]	@ (800561c <HAL_OSPIM_Config+0x664>)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3b01      	subs	r3, #1
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f023 0203 	bic.w	r2, r3, #3
 80054a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	431a      	orrs	r2, r3
 80054a8:	495c      	ldr	r1, [pc, #368]	@ (800561c <HAL_OSPIM_Config+0x664>)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d014      	beq.n	80054ec <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80054c2:	4a56      	ldr	r2, [pc, #344]	@ (800561c <HAL_OSPIM_Config+0x664>)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054d6:	015b      	lsls	r3, r3, #5
 80054d8:	431a      	orrs	r2, r3
 80054da:	4950      	ldr	r1, [pc, #320]	@ (800561c <HAL_OSPIM_Config+0x664>)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	f042 0210 	orr.w	r2, r2, #16
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d019      	beq.n	800552c <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80054f8:	4a48      	ldr	r2, [pc, #288]	@ (800561c <HAL_OSPIM_Config+0x664>)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	3b01      	subs	r3, #1
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800550e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005510:	049b      	lsls	r3, r3, #18
 8005512:	431a      	orrs	r2, r3
 8005514:	4941      	ldr	r1, [pc, #260]	@ (800561c <HAL_OSPIM_Config+0x664>)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	3b01      	subs	r3, #1
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	e01c      	b.n	8005566 <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d018      	beq.n	8005566 <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005534:	4a39      	ldr	r2, [pc, #228]	@ (800561c <HAL_OSPIM_Config+0x664>)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	3b01      	subs	r3, #1
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800554a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800554c:	069b      	lsls	r3, r3, #26
 800554e:	431a      	orrs	r2, r3
 8005550:	4932      	ldr	r1, [pc, #200]	@ (800561c <HAL_OSPIM_Config+0x664>)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	3b01      	subs	r3, #1
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d019      	beq.n	80055a6 <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005572:	4a2a      	ldr	r2, [pc, #168]	@ (800561c <HAL_OSPIM_Config+0x664>)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	3b01      	subs	r3, #1
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800558a:	049b      	lsls	r3, r3, #18
 800558c:	431a      	orrs	r2, r3
 800558e:	4923      	ldr	r1, [pc, #140]	@ (800561c <HAL_OSPIM_Config+0x664>)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	3b01      	subs	r3, #1
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	605a      	str	r2, [r3, #4]
 80055a4:	e01c      	b.n	80055e0 <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d018      	beq.n	80055e0 <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80055ae:	4a1b      	ldr	r2, [pc, #108]	@ (800561c <HAL_OSPIM_Config+0x664>)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80055c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c6:	069b      	lsls	r3, r3, #26
 80055c8:	431a      	orrs	r2, r3
 80055ca:	4914      	ldr	r1, [pc, #80]	@ (800561c <HAL_OSPIM_Config+0x664>)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80055e0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80055ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005620 <HAL_OSPIM_Config+0x668>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0b      	ldr	r2, [pc, #44]	@ (8005620 <HAL_OSPIM_Config+0x668>)
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80055f8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005604:	4b07      	ldr	r3, [pc, #28]	@ (8005624 <HAL_OSPIM_Config+0x66c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a06      	ldr	r2, [pc, #24]	@ (8005624 <HAL_OSPIM_Config+0x66c>)
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005610:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005614:	4618      	mov	r0, r3
 8005616:	3748      	adds	r7, #72	@ 0x48
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	50061c00 	.word	0x50061c00
 8005620:	a0001000 	.word	0xa0001000
 8005624:	a0001400 	.word	0xa0001400

08005628 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005638:	e01a      	b.n	8005670 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d016      	beq.n	8005670 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fc fda1 	bl	8002188 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800565e:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005664:	f043 0201 	orr.w	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e00e      	b.n	800568e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6a1a      	ldr	r2, [r3, #32]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4013      	ands	r3, r2
 800567a:	2b00      	cmp	r3, #0
 800567c:	bf14      	ite	ne
 800567e:	2301      	movne	r3, #1
 8005680:	2300      	moveq	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	429a      	cmp	r2, r3
 800568a:	d1d6      	bne.n	800563a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <OSPIM_GetConfig+0x26>
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d802      	bhi.n	80056be <OSPIM_GetConfig+0x26>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d102      	bne.n	80056c4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	75fb      	strb	r3, [r7, #23]
 80056c2:	e08e      	b.n	80057e2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2200      	movs	r2, #0
 80056ce:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2200      	movs	r2, #0
 80056d4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2200      	movs	r2, #0
 80056da:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d101      	bne.n	80056ec <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80056e8:	4b41      	ldr	r3, [pc, #260]	@ (80057f0 <OSPIM_GetConfig+0x158>)
 80056ea:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e074      	b.n	80057dc <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80056f2:	4a40      	ldr	r2, [pc, #256]	@ (80057f4 <OSPIM_GetConfig+0x15c>)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4053      	eors	r3, r2
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4053      	eors	r3, r2
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d103      	bne.n	800573e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4053      	eors	r3, r2
 800574e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005752:	2b00      	cmp	r3, #0
 8005754:	d103      	bne.n	800575e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d018      	beq.n	800579a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	4053      	eors	r3, r2
 800576e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d111      	bne.n	800579a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	e005      	b.n	800579a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3301      	adds	r3, #1
 8005792:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d018      	beq.n	80057d6 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4053      	eors	r3, r2
 80057aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d111      	bne.n	80057d6 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3301      	adds	r3, #1
 80057c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	611a      	str	r2, [r3, #16]
 80057c8:	e005      	b.n	80057d6 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3301      	adds	r3, #1
 80057ce:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d987      	bls.n	80056f2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	04040222 	.word	0x04040222
 80057f4:	50061c00 	.word	0x50061c00

080057f8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057fc:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a04      	ldr	r2, [pc, #16]	@ (8005814 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005806:	6013      	str	r3, [r2, #0]
}
 8005808:	bf00      	nop
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40007000 	.word	0x40007000

08005818 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800581c:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <HAL_PWREx_GetVoltageRange+0x3c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005828:	d102      	bne.n	8005830 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800582a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800582e:	e00b      	b.n	8005848 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005830:	4b08      	ldr	r3, [pc, #32]	@ (8005854 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800583e:	d102      	bne.n	8005846 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005840:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005844:	e000      	b.n	8005848 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005846:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40007000 	.word	0x40007000

08005858 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d141      	bne.n	80058ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005866:	4b4b      	ldr	r3, [pc, #300]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800586e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005872:	d131      	bne.n	80058d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005874:	4b47      	ldr	r3, [pc, #284]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587a:	4a46      	ldr	r2, [pc, #280]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800587c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005880:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005884:	4b43      	ldr	r3, [pc, #268]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800588c:	4a41      	ldr	r2, [pc, #260]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005892:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005894:	4b40      	ldr	r3, [pc, #256]	@ (8005998 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2232      	movs	r2, #50	@ 0x32
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	4a3f      	ldr	r2, [pc, #252]	@ (800599c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058a0:	fba2 2303 	umull	r2, r3, r2, r3
 80058a4:	0c9b      	lsrs	r3, r3, #18
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058aa:	e002      	b.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058b2:	4b38      	ldr	r3, [pc, #224]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058be:	d102      	bne.n	80058c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f2      	bne.n	80058ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058c6:	4b33      	ldr	r3, [pc, #204]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058d2:	d158      	bne.n	8005986 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e057      	b.n	8005988 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058de:	4a2d      	ldr	r2, [pc, #180]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058e8:	e04d      	b.n	8005986 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058f0:	d141      	bne.n	8005976 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058f2:	4b28      	ldr	r3, [pc, #160]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058fe:	d131      	bne.n	8005964 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005900:	4b24      	ldr	r3, [pc, #144]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005906:	4a23      	ldr	r2, [pc, #140]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800590c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005910:	4b20      	ldr	r3, [pc, #128]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005918:	4a1e      	ldr	r2, [pc, #120]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800591a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800591e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005920:	4b1d      	ldr	r3, [pc, #116]	@ (8005998 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2232      	movs	r2, #50	@ 0x32
 8005926:	fb02 f303 	mul.w	r3, r2, r3
 800592a:	4a1c      	ldr	r2, [pc, #112]	@ (800599c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	0c9b      	lsrs	r3, r3, #18
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005936:	e002      	b.n	800593e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3b01      	subs	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800593e:	4b15      	ldr	r3, [pc, #84]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800594a:	d102      	bne.n	8005952 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f2      	bne.n	8005938 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005952:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800595a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800595e:	d112      	bne.n	8005986 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e011      	b.n	8005988 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005964:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800596a:	4a0a      	ldr	r2, [pc, #40]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800596c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005970:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005974:	e007      	b.n	8005986 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005976:	4b07      	ldr	r3, [pc, #28]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800597e:	4a05      	ldr	r2, [pc, #20]	@ (8005994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005980:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005984:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40007000 	.word	0x40007000
 8005998:	20000004 	.word	0x20000004
 800599c:	431bde83 	.word	0x431bde83

080059a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d102      	bne.n	80059b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f000 bc08 	b.w	80061c4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059b4:	4b96      	ldr	r3, [pc, #600]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 030c 	and.w	r3, r3, #12
 80059bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059be:	4b94      	ldr	r3, [pc, #592]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80e4 	beq.w	8005b9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <HAL_RCC_OscConfig+0x4c>
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b0c      	cmp	r3, #12
 80059e0:	f040 808b 	bne.w	8005afa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	f040 8087 	bne.w	8005afa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059ec:	4b88      	ldr	r3, [pc, #544]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_OscConfig+0x64>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e3df      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1a      	ldr	r2, [r3, #32]
 8005a08:	4b81      	ldr	r3, [pc, #516]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <HAL_RCC_OscConfig+0x7e>
 8005a14:	4b7e      	ldr	r3, [pc, #504]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a1c:	e005      	b.n	8005a2a <HAL_RCC_OscConfig+0x8a>
 8005a1e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d223      	bcs.n	8005a76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fdcc 	bl	80065d0 <RCC_SetFlashLatencyFromMSIRange>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e3c0      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a42:	4b73      	ldr	r3, [pc, #460]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a72      	ldr	r2, [pc, #456]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a48:	f043 0308 	orr.w	r3, r3, #8
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	4b70      	ldr	r3, [pc, #448]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	496d      	ldr	r1, [pc, #436]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a60:	4b6b      	ldr	r3, [pc, #428]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	4968      	ldr	r1, [pc, #416]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	604b      	str	r3, [r1, #4]
 8005a74:	e025      	b.n	8005ac2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a76:	4b66      	ldr	r3, [pc, #408]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a65      	ldr	r2, [pc, #404]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a7c:	f043 0308 	orr.w	r3, r3, #8
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	4b63      	ldr	r3, [pc, #396]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	4960      	ldr	r1, [pc, #384]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a94:	4b5e      	ldr	r3, [pc, #376]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	495b      	ldr	r1, [pc, #364]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fd8c 	bl	80065d0 <RCC_SetFlashLatencyFromMSIRange>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e380      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ac2:	f000 fcc1 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	4b51      	ldr	r3, [pc, #324]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	4950      	ldr	r1, [pc, #320]	@ (8005c14 <HAL_RCC_OscConfig+0x274>)
 8005ad4:	5ccb      	ldrb	r3, [r1, r3]
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	fa22 f303 	lsr.w	r3, r2, r3
 8005ade:	4a4e      	ldr	r2, [pc, #312]	@ (8005c18 <HAL_RCC_OscConfig+0x278>)
 8005ae0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8005c1c <HAL_RCC_OscConfig+0x27c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fc fafe 	bl	80020e8 <HAL_InitTick>
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d052      	beq.n	8005b9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	e364      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d032      	beq.n	8005b68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b02:	4b43      	ldr	r3, [pc, #268]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a42      	ldr	r2, [pc, #264]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b08:	f043 0301 	orr.w	r3, r3, #1
 8005b0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b0e:	f7fc fb3b 	bl	8002188 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b16:	f7fc fb37 	bl	8002188 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e34d      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b28:	4b39      	ldr	r3, [pc, #228]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0f0      	beq.n	8005b16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b34:	4b36      	ldr	r3, [pc, #216]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a35      	ldr	r2, [pc, #212]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b3a:	f043 0308 	orr.w	r3, r3, #8
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	4b33      	ldr	r3, [pc, #204]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	4930      	ldr	r1, [pc, #192]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b52:	4b2f      	ldr	r3, [pc, #188]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	492b      	ldr	r1, [pc, #172]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	604b      	str	r3, [r1, #4]
 8005b66:	e01a      	b.n	8005b9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b68:	4b29      	ldr	r3, [pc, #164]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a28      	ldr	r2, [pc, #160]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b74:	f7fc fb08 	bl	8002188 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b7c:	f7fc fb04 	bl	8002188 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e31a      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b8e:	4b20      	ldr	r3, [pc, #128]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f0      	bne.n	8005b7c <HAL_RCC_OscConfig+0x1dc>
 8005b9a:	e000      	b.n	8005b9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d073      	beq.n	8005c92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_OscConfig+0x21c>
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2b0c      	cmp	r3, #12
 8005bb4:	d10e      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d10b      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bbc:	4b14      	ldr	r3, [pc, #80]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d063      	beq.n	8005c90 <HAL_RCC_OscConfig+0x2f0>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d15f      	bne.n	8005c90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e2f7      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bdc:	d106      	bne.n	8005bec <HAL_RCC_OscConfig+0x24c>
 8005bde:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a0b      	ldr	r2, [pc, #44]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e025      	b.n	8005c38 <HAL_RCC_OscConfig+0x298>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bf4:	d114      	bne.n	8005c20 <HAL_RCC_OscConfig+0x280>
 8005bf6:	4b06      	ldr	r3, [pc, #24]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a05      	ldr	r2, [pc, #20]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	4b03      	ldr	r3, [pc, #12]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a02      	ldr	r2, [pc, #8]	@ (8005c10 <HAL_RCC_OscConfig+0x270>)
 8005c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	e013      	b.n	8005c38 <HAL_RCC_OscConfig+0x298>
 8005c10:	40021000 	.word	0x40021000
 8005c14:	08009fc4 	.word	0x08009fc4
 8005c18:	20000004 	.word	0x20000004
 8005c1c:	20000018 	.word	0x20000018
 8005c20:	4ba0      	ldr	r3, [pc, #640]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a9f      	ldr	r2, [pc, #636]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a9c      	ldr	r2, [pc, #624]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d013      	beq.n	8005c68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c40:	f7fc faa2 	bl	8002188 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c48:	f7fc fa9e 	bl	8002188 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b64      	cmp	r3, #100	@ 0x64
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e2b4      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c5a:	4b92      	ldr	r3, [pc, #584]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f0      	beq.n	8005c48 <HAL_RCC_OscConfig+0x2a8>
 8005c66:	e014      	b.n	8005c92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fc fa8e 	bl	8002188 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c70:	f7fc fa8a 	bl	8002188 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b64      	cmp	r3, #100	@ 0x64
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e2a0      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c82:	4b88      	ldr	r3, [pc, #544]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x2d0>
 8005c8e:	e000      	b.n	8005c92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d060      	beq.n	8005d60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d005      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x310>
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d119      	bne.n	8005cde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d116      	bne.n	8005cde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cb0:	4b7c      	ldr	r3, [pc, #496]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x328>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e27d      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc8:	4b76      	ldr	r3, [pc, #472]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	061b      	lsls	r3, r3, #24
 8005cd6:	4973      	ldr	r1, [pc, #460]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cdc:	e040      	b.n	8005d60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d023      	beq.n	8005d2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a6e      	ldr	r2, [pc, #440]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf2:	f7fc fa49 	bl	8002188 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cfa:	f7fc fa45 	bl	8002188 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e25b      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d0c:	4b65      	ldr	r3, [pc, #404]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0f0      	beq.n	8005cfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d18:	4b62      	ldr	r3, [pc, #392]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	061b      	lsls	r3, r3, #24
 8005d26:	495f      	ldr	r1, [pc, #380]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	604b      	str	r3, [r1, #4]
 8005d2c:	e018      	b.n	8005d60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a5c      	ldr	r2, [pc, #368]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3a:	f7fc fa25 	bl	8002188 <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d40:	e008      	b.n	8005d54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d42:	f7fc fa21 	bl	8002188 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e237      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d54:	4b53      	ldr	r3, [pc, #332]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1f0      	bne.n	8005d42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d03c      	beq.n	8005de6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01c      	beq.n	8005dae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d74:	4b4b      	ldr	r3, [pc, #300]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005d7c:	f043 0301 	orr.w	r3, r3, #1
 8005d80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d84:	f7fc fa00 	bl	8002188 <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d8c:	f7fc f9fc 	bl	8002188 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e212      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d9e:	4b41      	ldr	r3, [pc, #260]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0ef      	beq.n	8005d8c <HAL_RCC_OscConfig+0x3ec>
 8005dac:	e01b      	b.n	8005de6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dae:	4b3d      	ldr	r3, [pc, #244]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005db4:	4a3b      	ldr	r2, [pc, #236]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbe:	f7fc f9e3 	bl	8002188 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dc6:	f7fc f9df 	bl	8002188 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e1f5      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dd8:	4b32      	ldr	r3, [pc, #200]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1ef      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 80a6 	beq.w	8005f40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005df4:	2300      	movs	r3, #0
 8005df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005df8:	4b2a      	ldr	r3, [pc, #168]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10d      	bne.n	8005e20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e04:	4b27      	ldr	r3, [pc, #156]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e08:	4a26      	ldr	r2, [pc, #152]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e10:	4b24      	ldr	r3, [pc, #144]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e20:	4b21      	ldr	r3, [pc, #132]	@ (8005ea8 <HAL_RCC_OscConfig+0x508>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d118      	bne.n	8005e5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ea8 <HAL_RCC_OscConfig+0x508>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea8 <HAL_RCC_OscConfig+0x508>)
 8005e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e38:	f7fc f9a6 	bl	8002188 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e40:	f7fc f9a2 	bl	8002188 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e1b8      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e52:	4b15      	ldr	r3, [pc, #84]	@ (8005ea8 <HAL_RCC_OscConfig+0x508>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d108      	bne.n	8005e78 <HAL_RCC_OscConfig+0x4d8>
 8005e66:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e76:	e029      	b.n	8005ecc <HAL_RCC_OscConfig+0x52c>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	2b05      	cmp	r3, #5
 8005e7e:	d115      	bne.n	8005eac <HAL_RCC_OscConfig+0x50c>
 8005e80:	4b08      	ldr	r3, [pc, #32]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e86:	4a07      	ldr	r2, [pc, #28]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005e88:	f043 0304 	orr.w	r3, r3, #4
 8005e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e90:	4b04      	ldr	r3, [pc, #16]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e96:	4a03      	ldr	r2, [pc, #12]	@ (8005ea4 <HAL_RCC_OscConfig+0x504>)
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ea0:	e014      	b.n	8005ecc <HAL_RCC_OscConfig+0x52c>
 8005ea2:	bf00      	nop
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40007000 	.word	0x40007000
 8005eac:	4b9d      	ldr	r3, [pc, #628]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb2:	4a9c      	ldr	r2, [pc, #624]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ebc:	4b99      	ldr	r3, [pc, #612]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec2:	4a98      	ldr	r2, [pc, #608]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005ec4:	f023 0304 	bic.w	r3, r3, #4
 8005ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d016      	beq.n	8005f02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed4:	f7fc f958 	bl	8002188 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eda:	e00a      	b.n	8005ef2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005edc:	f7fc f954 	bl	8002188 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e168      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ef2:	4b8c      	ldr	r3, [pc, #560]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0ed      	beq.n	8005edc <HAL_RCC_OscConfig+0x53c>
 8005f00:	e015      	b.n	8005f2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f02:	f7fc f941 	bl	8002188 <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f08:	e00a      	b.n	8005f20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f0a:	f7fc f93d 	bl	8002188 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e151      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f20:	4b80      	ldr	r3, [pc, #512]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1ed      	bne.n	8005f0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f2e:	7ffb      	ldrb	r3, [r7, #31]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d105      	bne.n	8005f40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f34:	4b7b      	ldr	r3, [pc, #492]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f38:	4a7a      	ldr	r2, [pc, #488]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d03c      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01c      	beq.n	8005f8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f54:	4b73      	ldr	r3, [pc, #460]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f5a:	4a72      	ldr	r2, [pc, #456]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f64:	f7fc f910 	bl	8002188 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f6c:	f7fc f90c 	bl	8002188 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e122      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f7e:	4b69      	ldr	r3, [pc, #420]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0ef      	beq.n	8005f6c <HAL_RCC_OscConfig+0x5cc>
 8005f8c:	e01b      	b.n	8005fc6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f8e:	4b65      	ldr	r3, [pc, #404]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f94:	4a63      	ldr	r2, [pc, #396]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9e:	f7fc f8f3 	bl	8002188 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fa6:	f7fc f8ef 	bl	8002188 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e105      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1ef      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80f9 	beq.w	80061c2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	f040 80cf 	bne.w	8006178 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005fda:	4b52      	ldr	r3, [pc, #328]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f003 0203 	and.w	r2, r3, #3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d12c      	bne.n	8006048 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d123      	bne.n	8006048 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800600c:	429a      	cmp	r2, r3
 800600e:	d11b      	bne.n	8006048 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800601c:	429a      	cmp	r2, r3
 800601e:	d113      	bne.n	8006048 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602a:	085b      	lsrs	r3, r3, #1
 800602c:	3b01      	subs	r3, #1
 800602e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006030:	429a      	cmp	r2, r3
 8006032:	d109      	bne.n	8006048 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	3b01      	subs	r3, #1
 8006042:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006044:	429a      	cmp	r2, r3
 8006046:	d071      	beq.n	800612c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b0c      	cmp	r3, #12
 800604c:	d068      	beq.n	8006120 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800604e:	4b35      	ldr	r3, [pc, #212]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d105      	bne.n	8006066 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800605a:	4b32      	ldr	r3, [pc, #200]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e0ac      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800606a:	4b2e      	ldr	r3, [pc, #184]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a2d      	ldr	r2, [pc, #180]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8006070:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006074:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006076:	f7fc f887 	bl	8002188 <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607e:	f7fc f883 	bl	8002188 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e099      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006090:	4b24      	ldr	r3, [pc, #144]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f0      	bne.n	800607e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800609c:	4b21      	ldr	r3, [pc, #132]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	4b21      	ldr	r3, [pc, #132]	@ (8006128 <HAL_RCC_OscConfig+0x788>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060ac:	3a01      	subs	r2, #1
 80060ae:	0112      	lsls	r2, r2, #4
 80060b0:	4311      	orrs	r1, r2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80060b6:	0212      	lsls	r2, r2, #8
 80060b8:	4311      	orrs	r1, r2
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80060be:	0852      	lsrs	r2, r2, #1
 80060c0:	3a01      	subs	r2, #1
 80060c2:	0552      	lsls	r2, r2, #21
 80060c4:	4311      	orrs	r1, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80060ca:	0852      	lsrs	r2, r2, #1
 80060cc:	3a01      	subs	r2, #1
 80060ce:	0652      	lsls	r2, r2, #25
 80060d0:	4311      	orrs	r1, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80060d6:	06d2      	lsls	r2, r2, #27
 80060d8:	430a      	orrs	r2, r1
 80060da:	4912      	ldr	r1, [pc, #72]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80060e0:	4b10      	ldr	r3, [pc, #64]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 80060e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 80060f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060f8:	f7fc f846 	bl	8002188 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006100:	f7fc f842 	bl	8002188 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e058      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006112:	4b04      	ldr	r3, [pc, #16]	@ (8006124 <HAL_RCC_OscConfig+0x784>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800611e:	e050      	b.n	80061c2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e04f      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
 8006124:	40021000 	.word	0x40021000
 8006128:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800612c:	4b27      	ldr	r3, [pc, #156]	@ (80061cc <HAL_RCC_OscConfig+0x82c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d144      	bne.n	80061c2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006138:	4b24      	ldr	r3, [pc, #144]	@ (80061cc <HAL_RCC_OscConfig+0x82c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a23      	ldr	r2, [pc, #140]	@ (80061cc <HAL_RCC_OscConfig+0x82c>)
 800613e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006142:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006144:	4b21      	ldr	r3, [pc, #132]	@ (80061cc <HAL_RCC_OscConfig+0x82c>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4a20      	ldr	r2, [pc, #128]	@ (80061cc <HAL_RCC_OscConfig+0x82c>)
 800614a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800614e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006150:	f7fc f81a 	bl	8002188 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006158:	f7fc f816 	bl	8002188 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e02c      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800616a:	4b18      	ldr	r3, [pc, #96]	@ (80061cc <HAL_RCC_OscConfig+0x82c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0f0      	beq.n	8006158 <HAL_RCC_OscConfig+0x7b8>
 8006176:	e024      	b.n	80061c2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2b0c      	cmp	r3, #12
 800617c:	d01f      	beq.n	80061be <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800617e:	4b13      	ldr	r3, [pc, #76]	@ (80061cc <HAL_RCC_OscConfig+0x82c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a12      	ldr	r2, [pc, #72]	@ (80061cc <HAL_RCC_OscConfig+0x82c>)
 8006184:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618a:	f7fb fffd 	bl	8002188 <HAL_GetTick>
 800618e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006192:	f7fb fff9 	bl	8002188 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e00f      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061a4:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <HAL_RCC_OscConfig+0x82c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1f0      	bne.n	8006192 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80061b0:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <HAL_RCC_OscConfig+0x82c>)
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	4905      	ldr	r1, [pc, #20]	@ (80061cc <HAL_RCC_OscConfig+0x82c>)
 80061b6:	4b06      	ldr	r3, [pc, #24]	@ (80061d0 <HAL_RCC_OscConfig+0x830>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	60cb      	str	r3, [r1, #12]
 80061bc:	e001      	b.n	80061c2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3720      	adds	r7, #32
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40021000 	.word	0x40021000
 80061d0:	feeefffc 	.word	0xfeeefffc

080061d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e11d      	b.n	8006428 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061ec:	4b90      	ldr	r3, [pc, #576]	@ (8006430 <HAL_RCC_ClockConfig+0x25c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 030f 	and.w	r3, r3, #15
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d910      	bls.n	800621c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006430 <HAL_RCC_ClockConfig+0x25c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f023 020f 	bic.w	r2, r3, #15
 8006202:	498b      	ldr	r1, [pc, #556]	@ (8006430 <HAL_RCC_ClockConfig+0x25c>)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	4313      	orrs	r3, r2
 8006208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800620a:	4b89      	ldr	r3, [pc, #548]	@ (8006430 <HAL_RCC_ClockConfig+0x25c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d001      	beq.n	800621c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e105      	b.n	8006428 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d010      	beq.n	800624a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	4b81      	ldr	r3, [pc, #516]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006234:	429a      	cmp	r2, r3
 8006236:	d908      	bls.n	800624a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006238:	4b7e      	ldr	r3, [pc, #504]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	497b      	ldr	r1, [pc, #492]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 8006246:	4313      	orrs	r3, r2
 8006248:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d079      	beq.n	800634a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b03      	cmp	r3, #3
 800625c:	d11e      	bne.n	800629c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800625e:	4b75      	ldr	r3, [pc, #468]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e0dc      	b.n	8006428 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800626e:	f000 fa09 	bl	8006684 <RCC_GetSysClockFreqFromPLLSource>
 8006272:	4603      	mov	r3, r0
 8006274:	4a70      	ldr	r2, [pc, #448]	@ (8006438 <HAL_RCC_ClockConfig+0x264>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d946      	bls.n	8006308 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800627a:	4b6e      	ldr	r3, [pc, #440]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d140      	bne.n	8006308 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006286:	4b6b      	ldr	r3, [pc, #428]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800628e:	4a69      	ldr	r2, [pc, #420]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 8006290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006294:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006296:	2380      	movs	r3, #128	@ 0x80
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	e035      	b.n	8006308 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d107      	bne.n	80062b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062a4:	4b63      	ldr	r3, [pc, #396]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d115      	bne.n	80062dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0b9      	b.n	8006428 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d107      	bne.n	80062cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062bc:	4b5d      	ldr	r3, [pc, #372]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0ad      	b.n	8006428 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062cc:	4b59      	ldr	r3, [pc, #356]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0a5      	b.n	8006428 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80062dc:	f000 f8b4 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 80062e0:	4603      	mov	r3, r0
 80062e2:	4a55      	ldr	r2, [pc, #340]	@ (8006438 <HAL_RCC_ClockConfig+0x264>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d90f      	bls.n	8006308 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80062e8:	4b52      	ldr	r3, [pc, #328]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d109      	bne.n	8006308 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062f4:	4b4f      	ldr	r3, [pc, #316]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062fc:	4a4d      	ldr	r2, [pc, #308]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 80062fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006302:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006304:	2380      	movs	r3, #128	@ 0x80
 8006306:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006308:	4b4a      	ldr	r3, [pc, #296]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f023 0203 	bic.w	r2, r3, #3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4947      	ldr	r1, [pc, #284]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 8006316:	4313      	orrs	r3, r2
 8006318:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631a:	f7fb ff35 	bl	8002188 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006320:	e00a      	b.n	8006338 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006322:	f7fb ff31 	bl	8002188 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006330:	4293      	cmp	r3, r2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e077      	b.n	8006428 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006338:	4b3e      	ldr	r3, [pc, #248]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 020c 	and.w	r2, r3, #12
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	429a      	cmp	r2, r3
 8006348:	d1eb      	bne.n	8006322 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b80      	cmp	r3, #128	@ 0x80
 800634e:	d105      	bne.n	800635c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006350:	4b38      	ldr	r3, [pc, #224]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	4a37      	ldr	r2, [pc, #220]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 8006356:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800635a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	4b31      	ldr	r3, [pc, #196]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006374:	429a      	cmp	r2, r3
 8006376:	d208      	bcs.n	800638a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006378:	4b2e      	ldr	r3, [pc, #184]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	492b      	ldr	r1, [pc, #172]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 8006386:	4313      	orrs	r3, r2
 8006388:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800638a:	4b29      	ldr	r3, [pc, #164]	@ (8006430 <HAL_RCC_ClockConfig+0x25c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d210      	bcs.n	80063ba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006398:	4b25      	ldr	r3, [pc, #148]	@ (8006430 <HAL_RCC_ClockConfig+0x25c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f023 020f 	bic.w	r2, r3, #15
 80063a0:	4923      	ldr	r1, [pc, #140]	@ (8006430 <HAL_RCC_ClockConfig+0x25c>)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a8:	4b21      	ldr	r3, [pc, #132]	@ (8006430 <HAL_RCC_ClockConfig+0x25c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d001      	beq.n	80063ba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e036      	b.n	8006428 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d008      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	4918      	ldr	r1, [pc, #96]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d009      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063e4:	4b13      	ldr	r3, [pc, #76]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	4910      	ldr	r1, [pc, #64]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063f8:	f000 f826 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 80063fc:	4602      	mov	r2, r0
 80063fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006434 <HAL_RCC_ClockConfig+0x260>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	490c      	ldr	r1, [pc, #48]	@ (800643c <HAL_RCC_ClockConfig+0x268>)
 800640a:	5ccb      	ldrb	r3, [r1, r3]
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	fa22 f303 	lsr.w	r3, r2, r3
 8006414:	4a0a      	ldr	r2, [pc, #40]	@ (8006440 <HAL_RCC_ClockConfig+0x26c>)
 8006416:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006418:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <HAL_RCC_ClockConfig+0x270>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f7fb fe63 	bl	80020e8 <HAL_InitTick>
 8006422:	4603      	mov	r3, r0
 8006424:	73fb      	strb	r3, [r7, #15]

  return status;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40022000 	.word	0x40022000
 8006434:	40021000 	.word	0x40021000
 8006438:	04c4b400 	.word	0x04c4b400
 800643c:	08009fc4 	.word	0x08009fc4
 8006440:	20000004 	.word	0x20000004
 8006444:	20000018 	.word	0x20000018

08006448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006448:	b480      	push	{r7}
 800644a:	b089      	sub	sp, #36	@ 0x24
 800644c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006456:	4b3e      	ldr	r3, [pc, #248]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
 800645e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006460:	4b3b      	ldr	r3, [pc, #236]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_RCC_GetSysClockFreq+0x34>
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2b0c      	cmp	r3, #12
 8006474:	d121      	bne.n	80064ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d11e      	bne.n	80064ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800647c:	4b34      	ldr	r3, [pc, #208]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d107      	bne.n	8006498 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006488:	4b31      	ldr	r3, [pc, #196]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 800648a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800648e:	0a1b      	lsrs	r3, r3, #8
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	e005      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006498:	4b2d      	ldr	r3, [pc, #180]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80064a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006554 <HAL_RCC_GetSysClockFreq+0x10c>)
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10d      	bne.n	80064d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064b8:	e00a      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d102      	bne.n	80064c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064c0:	4b25      	ldr	r3, [pc, #148]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x110>)
 80064c2:	61bb      	str	r3, [r7, #24]
 80064c4:	e004      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d101      	bne.n	80064d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064cc:	4b23      	ldr	r3, [pc, #140]	@ (800655c <HAL_RCC_GetSysClockFreq+0x114>)
 80064ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b0c      	cmp	r3, #12
 80064d4:	d134      	bne.n	8006540 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d003      	beq.n	80064ee <HAL_RCC_GetSysClockFreq+0xa6>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d003      	beq.n	80064f4 <HAL_RCC_GetSysClockFreq+0xac>
 80064ec:	e005      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80064ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x110>)
 80064f0:	617b      	str	r3, [r7, #20]
      break;
 80064f2:	e005      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064f4:	4b19      	ldr	r3, [pc, #100]	@ (800655c <HAL_RCC_GetSysClockFreq+0x114>)
 80064f6:	617b      	str	r3, [r7, #20]
      break;
 80064f8:	e002      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	617b      	str	r3, [r7, #20]
      break;
 80064fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006500:	4b13      	ldr	r3, [pc, #76]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	091b      	lsrs	r3, r3, #4
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	3301      	adds	r3, #1
 800650c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800650e:	4b10      	ldr	r3, [pc, #64]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	fb03 f202 	mul.w	r2, r3, r2
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	fbb2 f3f3 	udiv	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006526:	4b0a      	ldr	r3, [pc, #40]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x108>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	0e5b      	lsrs	r3, r3, #25
 800652c:	f003 0303 	and.w	r3, r3, #3
 8006530:	3301      	adds	r3, #1
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	fbb2 f3f3 	udiv	r3, r2, r3
 800653e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006540:	69bb      	ldr	r3, [r7, #24]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3724      	adds	r7, #36	@ 0x24
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40021000 	.word	0x40021000
 8006554:	08009fdc 	.word	0x08009fdc
 8006558:	00f42400 	.word	0x00f42400
 800655c:	007a1200 	.word	0x007a1200

08006560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006564:	4b03      	ldr	r3, [pc, #12]	@ (8006574 <HAL_RCC_GetHCLKFreq+0x14>)
 8006566:	681b      	ldr	r3, [r3, #0]
}
 8006568:	4618      	mov	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000004 	.word	0x20000004

08006578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800657c:	f7ff fff0 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 8006580:	4602      	mov	r2, r0
 8006582:	4b06      	ldr	r3, [pc, #24]	@ (800659c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	0a1b      	lsrs	r3, r3, #8
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	4904      	ldr	r1, [pc, #16]	@ (80065a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800658e:	5ccb      	ldrb	r3, [r1, r3]
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006598:	4618      	mov	r0, r3
 800659a:	bd80      	pop	{r7, pc}
 800659c:	40021000 	.word	0x40021000
 80065a0:	08009fd4 	.word	0x08009fd4

080065a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80065a8:	f7ff ffda 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 80065ac:	4602      	mov	r2, r0
 80065ae:	4b06      	ldr	r3, [pc, #24]	@ (80065c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	0adb      	lsrs	r3, r3, #11
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	4904      	ldr	r1, [pc, #16]	@ (80065cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80065ba:	5ccb      	ldrb	r3, [r1, r3]
 80065bc:	f003 031f 	and.w	r3, r3, #31
 80065c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	40021000 	.word	0x40021000
 80065cc:	08009fd4 	.word	0x08009fd4

080065d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80065d8:	2300      	movs	r3, #0
 80065da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80065dc:	4b27      	ldr	r3, [pc, #156]	@ (800667c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80065e8:	f7ff f916 	bl	8005818 <HAL_PWREx_GetVoltageRange>
 80065ec:	6178      	str	r0, [r7, #20]
 80065ee:	e014      	b.n	800661a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065f0:	4b22      	ldr	r3, [pc, #136]	@ (800667c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f4:	4a21      	ldr	r2, [pc, #132]	@ (800667c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80065fc:	4b1f      	ldr	r3, [pc, #124]	@ (800667c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006608:	f7ff f906 	bl	8005818 <HAL_PWREx_GetVoltageRange>
 800660c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800660e:	4b1b      	ldr	r3, [pc, #108]	@ (800667c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006612:	4a1a      	ldr	r2, [pc, #104]	@ (800667c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006614:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006618:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006620:	d10b      	bne.n	800663a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b80      	cmp	r3, #128	@ 0x80
 8006626:	d913      	bls.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2ba0      	cmp	r3, #160	@ 0xa0
 800662c:	d902      	bls.n	8006634 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800662e:	2302      	movs	r3, #2
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	e00d      	b.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006634:	2301      	movs	r3, #1
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	e00a      	b.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b7f      	cmp	r3, #127	@ 0x7f
 800663e:	d902      	bls.n	8006646 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006640:	2302      	movs	r3, #2
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	e004      	b.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b70      	cmp	r3, #112	@ 0x70
 800664a:	d101      	bne.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800664c:	2301      	movs	r3, #1
 800664e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006650:	4b0b      	ldr	r3, [pc, #44]	@ (8006680 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f023 020f 	bic.w	r2, r3, #15
 8006658:	4909      	ldr	r1, [pc, #36]	@ (8006680 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006660:	4b07      	ldr	r3, [pc, #28]	@ (8006680 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	429a      	cmp	r2, r3
 800666c:	d001      	beq.n	8006672 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	40021000 	.word	0x40021000
 8006680:	40022000 	.word	0x40022000

08006684 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800668a:	4b2d      	ldr	r3, [pc, #180]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b03      	cmp	r3, #3
 8006698:	d00b      	beq.n	80066b2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b03      	cmp	r3, #3
 800669e:	d825      	bhi.n	80066ec <RCC_GetSysClockFreqFromPLLSource+0x68>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d008      	beq.n	80066b8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d11f      	bne.n	80066ec <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80066ac:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80066ae:	613b      	str	r3, [r7, #16]
    break;
 80066b0:	e01f      	b.n	80066f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80066b2:	4b25      	ldr	r3, [pc, #148]	@ (8006748 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80066b4:	613b      	str	r3, [r7, #16]
    break;
 80066b6:	e01c      	b.n	80066f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80066b8:	4b21      	ldr	r3, [pc, #132]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d107      	bne.n	80066d4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ca:	0a1b      	lsrs	r3, r3, #8
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e005      	b.n	80066e0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	091b      	lsrs	r3, r3, #4
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80066e0:	4a1a      	ldr	r2, [pc, #104]	@ (800674c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e8:	613b      	str	r3, [r7, #16]
    break;
 80066ea:	e002      	b.n	80066f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	613b      	str	r3, [r7, #16]
    break;
 80066f0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066f2:	4b13      	ldr	r3, [pc, #76]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	091b      	lsrs	r3, r3, #4
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	3301      	adds	r3, #1
 80066fe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006700:	4b0f      	ldr	r3, [pc, #60]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	0a1b      	lsrs	r3, r3, #8
 8006706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	fb03 f202 	mul.w	r2, r3, r2
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	fbb2 f3f3 	udiv	r3, r2, r3
 8006716:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006718:	4b09      	ldr	r3, [pc, #36]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	0e5b      	lsrs	r3, r3, #25
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	3301      	adds	r3, #1
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006730:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006732:	683b      	ldr	r3, [r7, #0]
}
 8006734:	4618      	mov	r0, r3
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	40021000 	.word	0x40021000
 8006744:	00f42400 	.word	0x00f42400
 8006748:	007a1200 	.word	0x007a1200
 800674c:	08009fdc 	.word	0x08009fdc

08006750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006758:	2300      	movs	r3, #0
 800675a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800675c:	2300      	movs	r3, #0
 800675e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006768:	2b00      	cmp	r3, #0
 800676a:	d040      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006770:	2b80      	cmp	r3, #128	@ 0x80
 8006772:	d02a      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006774:	2b80      	cmp	r3, #128	@ 0x80
 8006776:	d825      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006778:	2b60      	cmp	r3, #96	@ 0x60
 800677a:	d026      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800677c:	2b60      	cmp	r3, #96	@ 0x60
 800677e:	d821      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006780:	2b40      	cmp	r3, #64	@ 0x40
 8006782:	d006      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006784:	2b40      	cmp	r3, #64	@ 0x40
 8006786:	d81d      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d009      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800678c:	2b20      	cmp	r3, #32
 800678e:	d010      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006790:	e018      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006792:	4b89      	ldr	r3, [pc, #548]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	4a88      	ldr	r2, [pc, #544]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800679c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800679e:	e015      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3304      	adds	r3, #4
 80067a4:	2100      	movs	r1, #0
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fb12 	bl	8006dd0 <RCCEx_PLLSAI1_Config>
 80067ac:	4603      	mov	r3, r0
 80067ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067b0:	e00c      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3320      	adds	r3, #32
 80067b6:	2100      	movs	r1, #0
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fbfd 	bl	8006fb8 <RCCEx_PLLSAI2_Config>
 80067be:	4603      	mov	r3, r0
 80067c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067c2:	e003      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	74fb      	strb	r3, [r7, #19]
      break;
 80067c8:	e000      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80067ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067cc:	7cfb      	ldrb	r3, [r7, #19]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067d2:	4b79      	ldr	r3, [pc, #484]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067d8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067e0:	4975      	ldr	r1, [pc, #468]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80067e8:	e001      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ea:	7cfb      	ldrb	r3, [r7, #19]
 80067ec:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d047      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006802:	d030      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006808:	d82a      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800680a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800680e:	d02a      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006810:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006814:	d824      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800681a:	d008      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800681c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006820:	d81e      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800682a:	d010      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800682c:	e018      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800682e:	4b62      	ldr	r3, [pc, #392]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	4a61      	ldr	r2, [pc, #388]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006838:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800683a:	e015      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3304      	adds	r3, #4
 8006840:	2100      	movs	r1, #0
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fac4 	bl	8006dd0 <RCCEx_PLLSAI1_Config>
 8006848:	4603      	mov	r3, r0
 800684a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800684c:	e00c      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3320      	adds	r3, #32
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fbaf 	bl	8006fb8 <RCCEx_PLLSAI2_Config>
 800685a:	4603      	mov	r3, r0
 800685c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800685e:	e003      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	74fb      	strb	r3, [r7, #19]
      break;
 8006864:	e000      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006868:	7cfb      	ldrb	r3, [r7, #19]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10b      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800686e:	4b52      	ldr	r3, [pc, #328]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006870:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006874:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687c:	494e      	ldr	r1, [pc, #312]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800687e:	4313      	orrs	r3, r2
 8006880:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006884:	e001      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006886:	7cfb      	ldrb	r3, [r7, #19]
 8006888:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 809f 	beq.w	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006898:	2300      	movs	r3, #0
 800689a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800689c:	4b46      	ldr	r3, [pc, #280]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800689e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80068ac:	2300      	movs	r3, #0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00d      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b2:	4b41      	ldr	r3, [pc, #260]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b6:	4a40      	ldr	r2, [pc, #256]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80068be:	4b3e      	ldr	r3, [pc, #248]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c6:	60bb      	str	r3, [r7, #8]
 80068c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ca:	2301      	movs	r3, #1
 80068cc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ce:	4b3b      	ldr	r3, [pc, #236]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a3a      	ldr	r2, [pc, #232]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80068d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068da:	f7fb fc55 	bl	8002188 <HAL_GetTick>
 80068de:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068e0:	e009      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e2:	f7fb fc51 	bl	8002188 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d902      	bls.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	74fb      	strb	r3, [r7, #19]
        break;
 80068f4:	e005      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068f6:	4b31      	ldr	r3, [pc, #196]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0ef      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006902:	7cfb      	ldrb	r3, [r7, #19]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d15b      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006908:	4b2b      	ldr	r3, [pc, #172]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800690a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006912:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d01f      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	429a      	cmp	r2, r3
 8006924:	d019      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006926:	4b24      	ldr	r3, [pc, #144]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006930:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006932:	4b21      	ldr	r3, [pc, #132]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006938:	4a1f      	ldr	r2, [pc, #124]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800693a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800693e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006942:	4b1d      	ldr	r3, [pc, #116]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006948:	4a1b      	ldr	r2, [pc, #108]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800694a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800694e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006952:	4a19      	ldr	r2, [pc, #100]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d016      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fb fc10 	bl	8002188 <HAL_GetTick>
 8006968:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800696a:	e00b      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800696c:	f7fb fc0c 	bl	8002188 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800697a:	4293      	cmp	r3, r2
 800697c:	d902      	bls.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	74fb      	strb	r3, [r7, #19]
            break;
 8006982:	e006      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006984:	4b0c      	ldr	r3, [pc, #48]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0ec      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006992:	7cfb      	ldrb	r3, [r7, #19]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10c      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006998:	4b07      	ldr	r3, [pc, #28]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800699a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800699e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a8:	4903      	ldr	r1, [pc, #12]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80069b0:	e008      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069b2:	7cfb      	ldrb	r3, [r7, #19]
 80069b4:	74bb      	strb	r3, [r7, #18]
 80069b6:	e005      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80069b8:	40021000 	.word	0x40021000
 80069bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c0:	7cfb      	ldrb	r3, [r7, #19]
 80069c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069c4:	7c7b      	ldrb	r3, [r7, #17]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d105      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ca:	4ba0      	ldr	r3, [pc, #640]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ce:	4a9f      	ldr	r2, [pc, #636]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069e2:	4b9a      	ldr	r3, [pc, #616]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e8:	f023 0203 	bic.w	r2, r3, #3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f0:	4996      	ldr	r1, [pc, #600]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a04:	4b91      	ldr	r3, [pc, #580]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a0a:	f023 020c 	bic.w	r2, r3, #12
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	498e      	ldr	r1, [pc, #568]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a26:	4b89      	ldr	r3, [pc, #548]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a34:	4985      	ldr	r1, [pc, #532]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a48:	4b80      	ldr	r3, [pc, #512]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a56:	497d      	ldr	r1, [pc, #500]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0310 	and.w	r3, r3, #16
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a6a:	4b78      	ldr	r3, [pc, #480]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a78:	4974      	ldr	r1, [pc, #464]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00a      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a8c:	4b6f      	ldr	r3, [pc, #444]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a9a:	496c      	ldr	r1, [pc, #432]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aae:	4b67      	ldr	r3, [pc, #412]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006abc:	4963      	ldr	r1, [pc, #396]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ad0:	4b5e      	ldr	r3, [pc, #376]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ade:	495b      	ldr	r1, [pc, #364]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006af2:	4b56      	ldr	r3, [pc, #344]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b00:	4952      	ldr	r1, [pc, #328]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b14:	4b4d      	ldr	r3, [pc, #308]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b22:	494a      	ldr	r1, [pc, #296]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b36:	4b45      	ldr	r3, [pc, #276]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b44:	4941      	ldr	r1, [pc, #260]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00a      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b58:	4b3c      	ldr	r3, [pc, #240]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b5e:	f023 0203 	bic.w	r2, r3, #3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b66:	4939      	ldr	r1, [pc, #228]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d028      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b7a:	4b34      	ldr	r3, [pc, #208]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b88:	4930      	ldr	r1, [pc, #192]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b98:	d106      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ba0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ba4:	60d3      	str	r3, [r2, #12]
 8006ba6:	e011      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bb0:	d10c      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 f909 	bl	8006dd0 <RCCEx_PLLSAI1_Config>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006bc2:	7cfb      	ldrb	r3, [r7, #19]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006bc8:	7cfb      	ldrb	r3, [r7, #19]
 8006bca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d04d      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006be0:	d108      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006be2:	4b1a      	ldr	r3, [pc, #104]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006be8:	4a18      	ldr	r2, [pc, #96]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006bee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006bf2:	e012      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006bf4:	4b15      	ldr	r3, [pc, #84]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bfa:	4a14      	ldr	r2, [pc, #80]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c00:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006c04:	4b11      	ldr	r3, [pc, #68]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c12:	490e      	ldr	r1, [pc, #56]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c22:	d106      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c24:	4b09      	ldr	r3, [pc, #36]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4a08      	ldr	r2, [pc, #32]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c2e:	60d3      	str	r3, [r2, #12]
 8006c30:	e020      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c3a:	d109      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c3c:	4b03      	ldr	r3, [pc, #12]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4a02      	ldr	r2, [pc, #8]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c46:	60d3      	str	r3, [r2, #12]
 8006c48:	e014      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006c4a:	bf00      	nop
 8006c4c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c58:	d10c      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	2101      	movs	r1, #1
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 f8b5 	bl	8006dd0 <RCCEx_PLLSAI1_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c6a:	7cfb      	ldrb	r3, [r7, #19]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006c70:	7cfb      	ldrb	r3, [r7, #19]
 8006c72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d028      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c80:	4b4a      	ldr	r3, [pc, #296]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c8e:	4947      	ldr	r1, [pc, #284]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c9e:	d106      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ca0:	4b42      	ldr	r3, [pc, #264]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4a41      	ldr	r2, [pc, #260]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006caa:	60d3      	str	r3, [r2, #12]
 8006cac:	e011      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cb6:	d10c      	bne.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 f886 	bl	8006dd0 <RCCEx_PLLSAI1_Config>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cc8:	7cfb      	ldrb	r3, [r7, #19]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006cce:	7cfb      	ldrb	r3, [r7, #19]
 8006cd0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01e      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cde:	4b33      	ldr	r3, [pc, #204]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cee:	492f      	ldr	r1, [pc, #188]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d00:	d10c      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3304      	adds	r3, #4
 8006d06:	2102      	movs	r1, #2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 f861 	bl	8006dd0 <RCCEx_PLLSAI1_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d12:	7cfb      	ldrb	r3, [r7, #19]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006d18:	7cfb      	ldrb	r3, [r7, #19]
 8006d1a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00b      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d28:	4b20      	ldr	r3, [pc, #128]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d2e:	f023 0204 	bic.w	r2, r3, #4
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d38:	491c      	ldr	r1, [pc, #112]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006d4c:	4b17      	ldr	r3, [pc, #92]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d52:	f023 0218 	bic.w	r2, r3, #24
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5c:	4913      	ldr	r1, [pc, #76]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d017      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006d70:	4b0e      	ldr	r3, [pc, #56]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d80:	490a      	ldr	r1, [pc, #40]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d92:	d105      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d94:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	4a04      	ldr	r2, [pc, #16]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006da0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40021000 	.word	0x40021000

08006db0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006db4:	4b05      	ldr	r3, [pc, #20]	@ (8006dcc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a04      	ldr	r2, [pc, #16]	@ (8006dcc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006dba:	f043 0304 	orr.w	r3, r3, #4
 8006dbe:	6013      	str	r3, [r2, #0]
}
 8006dc0:	bf00      	nop
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40021000 	.word	0x40021000

08006dd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006dde:	4b72      	ldr	r3, [pc, #456]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00e      	beq.n	8006e08 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006dea:	4b6f      	ldr	r3, [pc, #444]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0203 	and.w	r2, r3, #3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d103      	bne.n	8006e02 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
       ||
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d142      	bne.n	8006e88 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	73fb      	strb	r3, [r7, #15]
 8006e06:	e03f      	b.n	8006e88 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d018      	beq.n	8006e42 <RCCEx_PLLSAI1_Config+0x72>
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d825      	bhi.n	8006e60 <RCCEx_PLLSAI1_Config+0x90>
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d002      	beq.n	8006e1e <RCCEx_PLLSAI1_Config+0x4e>
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d009      	beq.n	8006e30 <RCCEx_PLLSAI1_Config+0x60>
 8006e1c:	e020      	b.n	8006e60 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e1e:	4b62      	ldr	r3, [pc, #392]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d11d      	bne.n	8006e66 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e2e:	e01a      	b.n	8006e66 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e30:	4b5d      	ldr	r3, [pc, #372]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d116      	bne.n	8006e6a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e40:	e013      	b.n	8006e6a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e42:	4b59      	ldr	r3, [pc, #356]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10f      	bne.n	8006e6e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e4e:	4b56      	ldr	r3, [pc, #344]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e5e:	e006      	b.n	8006e6e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	73fb      	strb	r3, [r7, #15]
      break;
 8006e64:	e004      	b.n	8006e70 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006e66:	bf00      	nop
 8006e68:	e002      	b.n	8006e70 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006e6a:	bf00      	nop
 8006e6c:	e000      	b.n	8006e70 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006e6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d108      	bne.n	8006e88 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006e76:	4b4c      	ldr	r3, [pc, #304]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f023 0203 	bic.w	r2, r3, #3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4949      	ldr	r1, [pc, #292]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f040 8086 	bne.w	8006f9c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e90:	4b45      	ldr	r3, [pc, #276]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a44      	ldr	r2, [pc, #272]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e9c:	f7fb f974 	bl	8002188 <HAL_GetTick>
 8006ea0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ea2:	e009      	b.n	8006eb8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ea4:	f7fb f970 	bl	8002188 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d902      	bls.n	8006eb8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	73fb      	strb	r3, [r7, #15]
        break;
 8006eb6:	e005      	b.n	8006ec4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1ef      	bne.n	8006ea4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d168      	bne.n	8006f9c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d113      	bne.n	8006ef8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ed0:	4b35      	ldr	r3, [pc, #212]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	4b35      	ldr	r3, [pc, #212]	@ (8006fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6892      	ldr	r2, [r2, #8]
 8006edc:	0211      	lsls	r1, r2, #8
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	68d2      	ldr	r2, [r2, #12]
 8006ee2:	06d2      	lsls	r2, r2, #27
 8006ee4:	4311      	orrs	r1, r2
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6852      	ldr	r2, [r2, #4]
 8006eea:	3a01      	subs	r2, #1
 8006eec:	0112      	lsls	r2, r2, #4
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	492d      	ldr	r1, [pc, #180]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	610b      	str	r3, [r1, #16]
 8006ef6:	e02d      	b.n	8006f54 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d115      	bne.n	8006f2a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006efe:	4b2a      	ldr	r3, [pc, #168]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	4b2b      	ldr	r3, [pc, #172]	@ (8006fb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6892      	ldr	r2, [r2, #8]
 8006f0a:	0211      	lsls	r1, r2, #8
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6912      	ldr	r2, [r2, #16]
 8006f10:	0852      	lsrs	r2, r2, #1
 8006f12:	3a01      	subs	r2, #1
 8006f14:	0552      	lsls	r2, r2, #21
 8006f16:	4311      	orrs	r1, r2
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6852      	ldr	r2, [r2, #4]
 8006f1c:	3a01      	subs	r2, #1
 8006f1e:	0112      	lsls	r2, r2, #4
 8006f20:	430a      	orrs	r2, r1
 8006f22:	4921      	ldr	r1, [pc, #132]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	610b      	str	r3, [r1, #16]
 8006f28:	e014      	b.n	8006f54 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f2c:	691a      	ldr	r2, [r3, #16]
 8006f2e:	4b21      	ldr	r3, [pc, #132]	@ (8006fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6892      	ldr	r2, [r2, #8]
 8006f36:	0211      	lsls	r1, r2, #8
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6952      	ldr	r2, [r2, #20]
 8006f3c:	0852      	lsrs	r2, r2, #1
 8006f3e:	3a01      	subs	r2, #1
 8006f40:	0652      	lsls	r2, r2, #25
 8006f42:	4311      	orrs	r1, r2
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6852      	ldr	r2, [r2, #4]
 8006f48:	3a01      	subs	r2, #1
 8006f4a:	0112      	lsls	r2, r2, #4
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	4916      	ldr	r1, [pc, #88]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006f54:	4b14      	ldr	r3, [pc, #80]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a13      	ldr	r2, [pc, #76]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f60:	f7fb f912 	bl	8002188 <HAL_GetTick>
 8006f64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f66:	e009      	b.n	8006f7c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f68:	f7fb f90e 	bl	8002188 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d902      	bls.n	8006f7c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	73fb      	strb	r3, [r7, #15]
          break;
 8006f7a:	e005      	b.n	8006f88 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0ef      	beq.n	8006f68 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006f8e:	4b06      	ldr	r3, [pc, #24]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	4904      	ldr	r1, [pc, #16]	@ (8006fa8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	07ff800f 	.word	0x07ff800f
 8006fb0:	ff9f800f 	.word	0xff9f800f
 8006fb4:	f9ff800f 	.word	0xf9ff800f

08006fb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006fc6:	4b72      	ldr	r3, [pc, #456]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00e      	beq.n	8006ff0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f003 0203 	and.w	r2, r3, #3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d103      	bne.n	8006fea <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
       ||
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d142      	bne.n	8007070 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	73fb      	strb	r3, [r7, #15]
 8006fee:	e03f      	b.n	8007070 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d018      	beq.n	800702a <RCCEx_PLLSAI2_Config+0x72>
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d825      	bhi.n	8007048 <RCCEx_PLLSAI2_Config+0x90>
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d002      	beq.n	8007006 <RCCEx_PLLSAI2_Config+0x4e>
 8007000:	2b02      	cmp	r3, #2
 8007002:	d009      	beq.n	8007018 <RCCEx_PLLSAI2_Config+0x60>
 8007004:	e020      	b.n	8007048 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007006:	4b62      	ldr	r3, [pc, #392]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d11d      	bne.n	800704e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007016:	e01a      	b.n	800704e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007018:	4b5d      	ldr	r3, [pc, #372]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007020:	2b00      	cmp	r3, #0
 8007022:	d116      	bne.n	8007052 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007028:	e013      	b.n	8007052 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800702a:	4b59      	ldr	r3, [pc, #356]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10f      	bne.n	8007056 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007036:	4b56      	ldr	r3, [pc, #344]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007046:	e006      	b.n	8007056 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	73fb      	strb	r3, [r7, #15]
      break;
 800704c:	e004      	b.n	8007058 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800704e:	bf00      	nop
 8007050:	e002      	b.n	8007058 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007052:	bf00      	nop
 8007054:	e000      	b.n	8007058 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007056:	bf00      	nop
    }

    if(status == HAL_OK)
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d108      	bne.n	8007070 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800705e:	4b4c      	ldr	r3, [pc, #304]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f023 0203 	bic.w	r2, r3, #3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4949      	ldr	r1, [pc, #292]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 800706c:	4313      	orrs	r3, r2
 800706e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 8086 	bne.w	8007184 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007078:	4b45      	ldr	r3, [pc, #276]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a44      	ldr	r2, [pc, #272]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 800707e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007084:	f7fb f880 	bl	8002188 <HAL_GetTick>
 8007088:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800708a:	e009      	b.n	80070a0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800708c:	f7fb f87c 	bl	8002188 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d902      	bls.n	80070a0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	73fb      	strb	r3, [r7, #15]
        break;
 800709e:	e005      	b.n	80070ac <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80070a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1ef      	bne.n	800708c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d168      	bne.n	8007184 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d113      	bne.n	80070e0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070b8:	4b35      	ldr	r3, [pc, #212]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070ba:	695a      	ldr	r2, [r3, #20]
 80070bc:	4b35      	ldr	r3, [pc, #212]	@ (8007194 <RCCEx_PLLSAI2_Config+0x1dc>)
 80070be:	4013      	ands	r3, r2
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6892      	ldr	r2, [r2, #8]
 80070c4:	0211      	lsls	r1, r2, #8
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	68d2      	ldr	r2, [r2, #12]
 80070ca:	06d2      	lsls	r2, r2, #27
 80070cc:	4311      	orrs	r1, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6852      	ldr	r2, [r2, #4]
 80070d2:	3a01      	subs	r2, #1
 80070d4:	0112      	lsls	r2, r2, #4
 80070d6:	430a      	orrs	r2, r1
 80070d8:	492d      	ldr	r1, [pc, #180]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	614b      	str	r3, [r1, #20]
 80070de:	e02d      	b.n	800713c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d115      	bne.n	8007112 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070e8:	695a      	ldr	r2, [r3, #20]
 80070ea:	4b2b      	ldr	r3, [pc, #172]	@ (8007198 <RCCEx_PLLSAI2_Config+0x1e0>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6892      	ldr	r2, [r2, #8]
 80070f2:	0211      	lsls	r1, r2, #8
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6912      	ldr	r2, [r2, #16]
 80070f8:	0852      	lsrs	r2, r2, #1
 80070fa:	3a01      	subs	r2, #1
 80070fc:	0552      	lsls	r2, r2, #21
 80070fe:	4311      	orrs	r1, r2
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6852      	ldr	r2, [r2, #4]
 8007104:	3a01      	subs	r2, #1
 8007106:	0112      	lsls	r2, r2, #4
 8007108:	430a      	orrs	r2, r1
 800710a:	4921      	ldr	r1, [pc, #132]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 800710c:	4313      	orrs	r3, r2
 800710e:	614b      	str	r3, [r1, #20]
 8007110:	e014      	b.n	800713c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007112:	4b1f      	ldr	r3, [pc, #124]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007114:	695a      	ldr	r2, [r3, #20]
 8007116:	4b21      	ldr	r3, [pc, #132]	@ (800719c <RCCEx_PLLSAI2_Config+0x1e4>)
 8007118:	4013      	ands	r3, r2
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6892      	ldr	r2, [r2, #8]
 800711e:	0211      	lsls	r1, r2, #8
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6952      	ldr	r2, [r2, #20]
 8007124:	0852      	lsrs	r2, r2, #1
 8007126:	3a01      	subs	r2, #1
 8007128:	0652      	lsls	r2, r2, #25
 800712a:	4311      	orrs	r1, r2
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6852      	ldr	r2, [r2, #4]
 8007130:	3a01      	subs	r2, #1
 8007132:	0112      	lsls	r2, r2, #4
 8007134:	430a      	orrs	r2, r1
 8007136:	4916      	ldr	r1, [pc, #88]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007138:	4313      	orrs	r3, r2
 800713a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800713c:	4b14      	ldr	r3, [pc, #80]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a13      	ldr	r2, [pc, #76]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007146:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007148:	f7fb f81e 	bl	8002188 <HAL_GetTick>
 800714c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800714e:	e009      	b.n	8007164 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007150:	f7fb f81a 	bl	8002188 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d902      	bls.n	8007164 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	73fb      	strb	r3, [r7, #15]
          break;
 8007162:	e005      	b.n	8007170 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007164:	4b0a      	ldr	r3, [pc, #40]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0ef      	beq.n	8007150 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007176:	4b06      	ldr	r3, [pc, #24]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007178:	695a      	ldr	r2, [r3, #20]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	4904      	ldr	r1, [pc, #16]	@ (8007190 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007180:	4313      	orrs	r3, r2
 8007182:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007184:	7bfb      	ldrb	r3, [r7, #15]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40021000 	.word	0x40021000
 8007194:	07ff800f 	.word	0x07ff800f
 8007198:	ff9f800f 	.word	0xff9f800f
 800719c:	f9ff800f 	.word	0xf9ff800f

080071a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e095      	b.n	80072de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d108      	bne.n	80071cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071c2:	d009      	beq.n	80071d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	61da      	str	r2, [r3, #28]
 80071ca:	e005      	b.n	80071d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d106      	bne.n	80071f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fa fa92 	bl	800171c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800720e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007218:	d902      	bls.n	8007220 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	e002      	b.n	8007226 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007220:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007224:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800722e:	d007      	beq.n	8007240 <HAL_SPI_Init+0xa0>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007238:	d002      	beq.n	8007240 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007250:	431a      	orrs	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	431a      	orrs	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800726e:	431a      	orrs	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007282:	ea42 0103 	orr.w	r1, r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	0c1b      	lsrs	r3, r3, #16
 800729c:	f003 0204 	and.w	r2, r3, #4
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80072bc:	ea42 0103 	orr.w	r1, r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e049      	b.n	800738c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7fa fa49 	bl	80017a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2202      	movs	r2, #2
 8007316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3304      	adds	r3, #4
 8007322:	4619      	mov	r1, r3
 8007324:	4610      	mov	r0, r2
 8007326:	f000 f9d5 	bl	80076d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d001      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e04f      	b.n	800744c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a23      	ldr	r2, [pc, #140]	@ (8007458 <HAL_TIM_Base_Start_IT+0xc4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01d      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d6:	d018      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1f      	ldr	r2, [pc, #124]	@ (800745c <HAL_TIM_Base_Start_IT+0xc8>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d013      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007460 <HAL_TIM_Base_Start_IT+0xcc>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00e      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007464 <HAL_TIM_Base_Start_IT+0xd0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d009      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007468 <HAL_TIM_Base_Start_IT+0xd4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d004      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a19      	ldr	r2, [pc, #100]	@ (800746c <HAL_TIM_Base_Start_IT+0xd8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d115      	bne.n	8007436 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	4b17      	ldr	r3, [pc, #92]	@ (8007470 <HAL_TIM_Base_Start_IT+0xdc>)
 8007412:	4013      	ands	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b06      	cmp	r3, #6
 800741a:	d015      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0xb4>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007422:	d011      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007434:	e008      	b.n	8007448 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0201 	orr.w	r2, r2, #1
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	e000      	b.n	800744a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007448:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	40012c00 	.word	0x40012c00
 800745c:	40000400 	.word	0x40000400
 8007460:	40000800 	.word	0x40000800
 8007464:	40000c00 	.word	0x40000c00
 8007468:	40013400 	.word	0x40013400
 800746c:	40014000 	.word	0x40014000
 8007470:	00010007 	.word	0x00010007

08007474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d020      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01b      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0202 	mvn.w	r2, #2
 80074a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f8e9 	bl	8007696 <HAL_TIM_IC_CaptureCallback>
 80074c4:	e005      	b.n	80074d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f8db 	bl	8007682 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f8ec 	bl	80076aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d020      	beq.n	8007524 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01b      	beq.n	8007524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0204 	mvn.w	r2, #4
 80074f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f8c3 	bl	8007696 <HAL_TIM_IC_CaptureCallback>
 8007510:	e005      	b.n	800751e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f8b5 	bl	8007682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f8c6 	bl	80076aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 0308 	and.w	r3, r3, #8
 800752a:	2b00      	cmp	r3, #0
 800752c:	d020      	beq.n	8007570 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01b      	beq.n	8007570 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0208 	mvn.w	r2, #8
 8007540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2204      	movs	r2, #4
 8007546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f89d 	bl	8007696 <HAL_TIM_IC_CaptureCallback>
 800755c:	e005      	b.n	800756a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f88f 	bl	8007682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f8a0 	bl	80076aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f003 0310 	and.w	r3, r3, #16
 8007576:	2b00      	cmp	r3, #0
 8007578:	d020      	beq.n	80075bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01b      	beq.n	80075bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0210 	mvn.w	r2, #16
 800758c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2208      	movs	r2, #8
 8007592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f877 	bl	8007696 <HAL_TIM_IC_CaptureCallback>
 80075a8:	e005      	b.n	80075b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f869 	bl	8007682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f87a 	bl	80076aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00c      	beq.n	80075e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0201 	mvn.w	r2, #1
 80075d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7f9 fd3a 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d104      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00c      	beq.n	800760e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f99b 	bl	8007944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00c      	beq.n	8007632 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800761e:	2b00      	cmp	r3, #0
 8007620:	d007      	beq.n	8007632 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800762a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f993 	bl	8007958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00c      	beq.n	8007656 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800764e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f834 	bl	80076be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00c      	beq.n	800767a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f003 0320 	and.w	r3, r3, #32
 8007666:	2b00      	cmp	r3, #0
 8007668:	d007      	beq.n	800767a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f06f 0220 	mvn.w	r2, #32
 8007672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f95b 	bl	8007930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800767a:	bf00      	nop
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007696:	b480      	push	{r7}
 8007698:	b083      	sub	sp, #12
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076b2:	bf00      	nop
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
	...

080076d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a46      	ldr	r2, [pc, #280]	@ (8007800 <TIM_Base_SetConfig+0x12c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d013      	beq.n	8007714 <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f2:	d00f      	beq.n	8007714 <TIM_Base_SetConfig+0x40>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a43      	ldr	r2, [pc, #268]	@ (8007804 <TIM_Base_SetConfig+0x130>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d00b      	beq.n	8007714 <TIM_Base_SetConfig+0x40>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a42      	ldr	r2, [pc, #264]	@ (8007808 <TIM_Base_SetConfig+0x134>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d007      	beq.n	8007714 <TIM_Base_SetConfig+0x40>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a41      	ldr	r2, [pc, #260]	@ (800780c <TIM_Base_SetConfig+0x138>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d003      	beq.n	8007714 <TIM_Base_SetConfig+0x40>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a40      	ldr	r2, [pc, #256]	@ (8007810 <TIM_Base_SetConfig+0x13c>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d108      	bne.n	8007726 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800771a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a35      	ldr	r2, [pc, #212]	@ (8007800 <TIM_Base_SetConfig+0x12c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01f      	beq.n	800776e <TIM_Base_SetConfig+0x9a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007734:	d01b      	beq.n	800776e <TIM_Base_SetConfig+0x9a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a32      	ldr	r2, [pc, #200]	@ (8007804 <TIM_Base_SetConfig+0x130>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d017      	beq.n	800776e <TIM_Base_SetConfig+0x9a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a31      	ldr	r2, [pc, #196]	@ (8007808 <TIM_Base_SetConfig+0x134>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d013      	beq.n	800776e <TIM_Base_SetConfig+0x9a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a30      	ldr	r2, [pc, #192]	@ (800780c <TIM_Base_SetConfig+0x138>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00f      	beq.n	800776e <TIM_Base_SetConfig+0x9a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a2f      	ldr	r2, [pc, #188]	@ (8007810 <TIM_Base_SetConfig+0x13c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00b      	beq.n	800776e <TIM_Base_SetConfig+0x9a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a2e      	ldr	r2, [pc, #184]	@ (8007814 <TIM_Base_SetConfig+0x140>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d007      	beq.n	800776e <TIM_Base_SetConfig+0x9a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a2d      	ldr	r2, [pc, #180]	@ (8007818 <TIM_Base_SetConfig+0x144>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d003      	beq.n	800776e <TIM_Base_SetConfig+0x9a>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a2c      	ldr	r2, [pc, #176]	@ (800781c <TIM_Base_SetConfig+0x148>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d108      	bne.n	8007780 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a16      	ldr	r2, [pc, #88]	@ (8007800 <TIM_Base_SetConfig+0x12c>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00f      	beq.n	80077cc <TIM_Base_SetConfig+0xf8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a18      	ldr	r2, [pc, #96]	@ (8007810 <TIM_Base_SetConfig+0x13c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d00b      	beq.n	80077cc <TIM_Base_SetConfig+0xf8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a17      	ldr	r2, [pc, #92]	@ (8007814 <TIM_Base_SetConfig+0x140>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d007      	beq.n	80077cc <TIM_Base_SetConfig+0xf8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a16      	ldr	r2, [pc, #88]	@ (8007818 <TIM_Base_SetConfig+0x144>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_Base_SetConfig+0xf8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a15      	ldr	r2, [pc, #84]	@ (800781c <TIM_Base_SetConfig+0x148>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d103      	bne.n	80077d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	691a      	ldr	r2, [r3, #16]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d105      	bne.n	80077f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f023 0201 	bic.w	r2, r3, #1
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	611a      	str	r2, [r3, #16]
  }
}
 80077f2:	bf00      	nop
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40012c00 	.word	0x40012c00
 8007804:	40000400 	.word	0x40000400
 8007808:	40000800 	.word	0x40000800
 800780c:	40000c00 	.word	0x40000c00
 8007810:	40013400 	.word	0x40013400
 8007814:	40014000 	.word	0x40014000
 8007818:	40014400 	.word	0x40014400
 800781c:	40014800 	.word	0x40014800

08007820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007834:	2302      	movs	r3, #2
 8007836:	e068      	b.n	800790a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a2e      	ldr	r2, [pc, #184]	@ (8007918 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d004      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a2d      	ldr	r2, [pc, #180]	@ (800791c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d108      	bne.n	800787e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007872:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007884:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4313      	orrs	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a1e      	ldr	r2, [pc, #120]	@ (8007918 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d01d      	beq.n	80078de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078aa:	d018      	beq.n	80078de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d013      	beq.n	80078de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00e      	beq.n	80078de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a18      	ldr	r2, [pc, #96]	@ (8007928 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d009      	beq.n	80078de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a13      	ldr	r2, [pc, #76]	@ (800791c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d004      	beq.n	80078de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a14      	ldr	r2, [pc, #80]	@ (800792c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d10c      	bne.n	80078f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	40012c00 	.word	0x40012c00
 800791c:	40013400 	.word	0x40013400
 8007920:	40000400 	.word	0x40000400
 8007924:	40000800 	.word	0x40000800
 8007928:	40000c00 	.word	0x40000c00
 800792c:	40014000 	.word	0x40014000

08007930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e042      	b.n	8007a04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007984:	2b00      	cmp	r3, #0
 8007986:	d106      	bne.n	8007996 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7f9 ff65 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2224      	movs	r2, #36	@ 0x24
 800799a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0201 	bic.w	r2, r2, #1
 80079ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 ff5c 	bl	8008874 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fc5d 	bl	800827c <UART_SetConfig>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e01b      	b.n	8007a04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0201 	orr.w	r2, r2, #1
 80079fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 ffdb 	bl	80089b8 <UART_CheckIdleState>
 8007a02:	4603      	mov	r3, r0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b091      	sub	sp, #68	@ 0x44
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	4613      	mov	r3, r2
 8007a18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a20:	2b20      	cmp	r3, #32
 8007a22:	d178      	bne.n	8007b16 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <HAL_UART_Transmit_IT+0x24>
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e071      	b.n	8007b18 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	88fa      	ldrh	r2, [r7, #6]
 8007a3e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	88fa      	ldrh	r2, [r7, #6]
 8007a46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2221      	movs	r2, #33	@ 0x21
 8007a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a68:	d12a      	bne.n	8007ac0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a72:	d107      	bne.n	8007a84 <HAL_UART_Transmit_IT+0x78>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d103      	bne.n	8007a84 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4a29      	ldr	r2, [pc, #164]	@ (8007b24 <HAL_UART_Transmit_IT+0x118>)
 8007a80:	679a      	str	r2, [r3, #120]	@ 0x78
 8007a82:	e002      	b.n	8007a8a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4a28      	ldr	r2, [pc, #160]	@ (8007b28 <HAL_UART_Transmit_IT+0x11c>)
 8007a88:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3308      	adds	r3, #8
 8007a90:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007aaa:	637a      	str	r2, [r7, #52]	@ 0x34
 8007aac:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e5      	bne.n	8007a8a <HAL_UART_Transmit_IT+0x7e>
 8007abe:	e028      	b.n	8007b12 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ac8:	d107      	bne.n	8007ada <HAL_UART_Transmit_IT+0xce>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d103      	bne.n	8007ada <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4a15      	ldr	r2, [pc, #84]	@ (8007b2c <HAL_UART_Transmit_IT+0x120>)
 8007ad6:	679a      	str	r2, [r3, #120]	@ 0x78
 8007ad8:	e002      	b.n	8007ae0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4a14      	ldr	r2, [pc, #80]	@ (8007b30 <HAL_UART_Transmit_IT+0x124>)
 8007ade:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	613b      	str	r3, [r7, #16]
   return(result);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007afe:	623b      	str	r3, [r7, #32]
 8007b00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	69f9      	ldr	r1, [r7, #28]
 8007b04:	6a3a      	ldr	r2, [r7, #32]
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e6      	bne.n	8007ae0 <HAL_UART_Transmit_IT+0xd4>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	e000      	b.n	8007b18 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007b16:	2302      	movs	r3, #2
  }
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3744      	adds	r7, #68	@ 0x44
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	0800917f 	.word	0x0800917f
 8007b28:	0800909f 	.word	0x0800909f
 8007b2c:	08008fdd 	.word	0x08008fdd
 8007b30:	08008f25 	.word	0x08008f25

08007b34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08a      	sub	sp, #40	@ 0x28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d137      	bne.n	8007bbc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_UART_Receive_IT+0x24>
 8007b52:	88fb      	ldrh	r3, [r7, #6]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e030      	b.n	8007bbe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a18      	ldr	r2, [pc, #96]	@ (8007bc8 <HAL_UART_Receive_IT+0x94>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d01f      	beq.n	8007bac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d018      	beq.n	8007bac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	613b      	str	r3, [r7, #16]
   return(result);
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	623b      	str	r3, [r7, #32]
 8007b9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	69f9      	ldr	r1, [r7, #28]
 8007b9e:	6a3a      	ldr	r2, [r7, #32]
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e6      	bne.n	8007b7a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bac:	88fb      	ldrh	r3, [r7, #6]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f001 f818 	bl	8008be8 <UART_Start_Receive_IT>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	e000      	b.n	8007bbe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bbc:	2302      	movs	r3, #2
  }
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3728      	adds	r7, #40	@ 0x28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	40008000 	.word	0x40008000

08007bcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b0ba      	sub	sp, #232	@ 0xe8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007bf6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d11b      	bne.n	8007c40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d015      	beq.n	8007c40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d105      	bne.n	8007c2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d009      	beq.n	8007c40 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8300 	beq.w	8008236 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	4798      	blx	r3
      }
      return;
 8007c3e:	e2fa      	b.n	8008236 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8123 	beq.w	8007e90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8007e84 <HAL_UART_IRQHandler+0x2b8>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d106      	bne.n	8007c64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007c5a:	4b8b      	ldr	r3, [pc, #556]	@ (8007e88 <HAL_UART_IRQHandler+0x2bc>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8116 	beq.w	8007e90 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d011      	beq.n	8007c94 <HAL_UART_IRQHandler+0xc8>
 8007c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2201      	movs	r2, #1
 8007c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c8a:	f043 0201 	orr.w	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d011      	beq.n	8007cc4 <HAL_UART_IRQHandler+0xf8>
 8007ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cba:	f043 0204 	orr.w	r2, r3, #4
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cc8:	f003 0304 	and.w	r3, r3, #4
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d011      	beq.n	8007cf4 <HAL_UART_IRQHandler+0x128>
 8007cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00b      	beq.n	8007cf4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cea:	f043 0202 	orr.w	r2, r3, #2
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cf8:	f003 0308 	and.w	r3, r3, #8
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d017      	beq.n	8007d30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d105      	bne.n	8007d18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d10:	4b5c      	ldr	r3, [pc, #368]	@ (8007e84 <HAL_UART_IRQHandler+0x2b8>)
 8007d12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d26:	f043 0208 	orr.w	r2, r3, #8
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d012      	beq.n	8007d62 <HAL_UART_IRQHandler+0x196>
 8007d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00c      	beq.n	8007d62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d58:	f043 0220 	orr.w	r2, r3, #32
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 8266 	beq.w	800823a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d013      	beq.n	8007da2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d105      	bne.n	8007d92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d007      	beq.n	8007da2 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db6:	2b40      	cmp	r3, #64	@ 0x40
 8007db8:	d005      	beq.n	8007dc6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dbe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d054      	beq.n	8007e70 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 f830 	bl	8008e2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd6:	2b40      	cmp	r3, #64	@ 0x40
 8007dd8:	d146      	bne.n	8007e68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3308      	adds	r3, #8
 8007de0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007df4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007df8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3308      	adds	r3, #8
 8007e02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1d9      	bne.n	8007dda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d017      	beq.n	8007e60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e36:	4a15      	ldr	r2, [pc, #84]	@ (8007e8c <HAL_UART_IRQHandler+0x2c0>)
 8007e38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fb fe99 	bl	8003b78 <HAL_DMA_Abort_IT>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d019      	beq.n	8007e80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e5e:	e00f      	b.n	8007e80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f9f5 	bl	8008250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e66:	e00b      	b.n	8007e80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f9f1 	bl	8008250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e6e:	e007      	b.n	8007e80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f9ed 	bl	8008250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007e7e:	e1dc      	b.n	800823a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e80:	bf00      	nop
    return;
 8007e82:	e1da      	b.n	800823a <HAL_UART_IRQHandler+0x66e>
 8007e84:	10000001 	.word	0x10000001
 8007e88:	04000120 	.word	0x04000120
 8007e8c:	08008ef9 	.word	0x08008ef9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	f040 8170 	bne.w	800817a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e9e:	f003 0310 	and.w	r3, r3, #16
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 8169 	beq.w	800817a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 8162 	beq.w	800817a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2210      	movs	r2, #16
 8007ebc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec8:	2b40      	cmp	r3, #64	@ 0x40
 8007eca:	f040 80d8 	bne.w	800807e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007edc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 80af 	beq.w	8008044 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007eec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	f080 80a7 	bcs.w	8008044 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007efc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f040 8087 	bne.w	8008022 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f42:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1da      	bne.n	8007f14 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3308      	adds	r3, #8
 8007f64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f70:	f023 0301 	bic.w	r3, r3, #1
 8007f74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e1      	bne.n	8007f5e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e3      	bne.n	8007f9a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fe8:	e853 3f00 	ldrex	r3, [r3]
 8007fec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ff0:	f023 0310 	bic.w	r3, r3, #16
 8007ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008002:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008004:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008006:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008008:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800800a:	e841 2300 	strex	r3, r2, [r1]
 800800e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1e4      	bne.n	8007fe0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800801c:	4618      	mov	r0, r3
 800801e:	f7fb fd4f 	bl	8003ac0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008034:	b29b      	uxth	r3, r3
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	b29b      	uxth	r3, r3
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f911 	bl	8008264 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008042:	e0fc      	b.n	800823e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800804a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800804e:	429a      	cmp	r2, r3
 8008050:	f040 80f5 	bne.w	800823e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b20      	cmp	r3, #32
 8008064:	f040 80eb 	bne.w	800823e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f8f4 	bl	8008264 <HAL_UARTEx_RxEventCallback>
      return;
 800807c:	e0df      	b.n	800823e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800808a:	b29b      	uxth	r3, r3
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008098:	b29b      	uxth	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 80d1 	beq.w	8008242 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80080a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 80cc 	beq.w	8008242 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e4      	bne.n	80080aa <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3308      	adds	r3, #8
 80080e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ea:	e853 3f00 	ldrex	r3, [r3]
 80080ee:	623b      	str	r3, [r7, #32]
   return(result);
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080f6:	f023 0301 	bic.w	r3, r3, #1
 80080fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3308      	adds	r3, #8
 8008104:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008108:	633a      	str	r2, [r7, #48]	@ 0x30
 800810a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800810e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e1      	bne.n	80080e0 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	60fb      	str	r3, [r7, #12]
   return(result);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f023 0310 	bic.w	r3, r3, #16
 8008144:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	69b9      	ldr	r1, [r7, #24]
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	617b      	str	r3, [r7, #20]
   return(result);
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e4      	bne.n	8008130 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2202      	movs	r2, #2
 800816a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800816c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f876 	bl	8008264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008178:	e063      	b.n	8008242 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800817a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800817e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00e      	beq.n	80081a4 <HAL_UART_IRQHandler+0x5d8>
 8008186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800818a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d008      	beq.n	80081a4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800819a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 fdb7 	bl	8009d10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081a2:	e051      	b.n	8008248 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d014      	beq.n	80081da <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d105      	bne.n	80081c8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d008      	beq.n	80081da <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d03a      	beq.n	8008246 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	4798      	blx	r3
    }
    return;
 80081d8:	e035      	b.n	8008246 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d009      	beq.n	80081fa <HAL_UART_IRQHandler+0x62e>
 80081e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 f838 	bl	8009268 <UART_EndTransmit_IT>
    return;
 80081f8:	e026      	b.n	8008248 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80081fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d009      	beq.n	800821a <HAL_UART_IRQHandler+0x64e>
 8008206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800820a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fd90 	bl	8009d38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008218:	e016      	b.n	8008248 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800821a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800821e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d010      	beq.n	8008248 <HAL_UART_IRQHandler+0x67c>
 8008226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800822a:	2b00      	cmp	r3, #0
 800822c:	da0c      	bge.n	8008248 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 fd78 	bl	8009d24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008234:	e008      	b.n	8008248 <HAL_UART_IRQHandler+0x67c>
      return;
 8008236:	bf00      	nop
 8008238:	e006      	b.n	8008248 <HAL_UART_IRQHandler+0x67c>
    return;
 800823a:	bf00      	nop
 800823c:	e004      	b.n	8008248 <HAL_UART_IRQHandler+0x67c>
      return;
 800823e:	bf00      	nop
 8008240:	e002      	b.n	8008248 <HAL_UART_IRQHandler+0x67c>
      return;
 8008242:	bf00      	nop
 8008244:	e000      	b.n	8008248 <HAL_UART_IRQHandler+0x67c>
    return;
 8008246:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8008248:	37e8      	adds	r7, #232	@ 0xe8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop

08008250 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800827c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008280:	b08c      	sub	sp, #48	@ 0x30
 8008282:	af00      	add	r7, sp, #0
 8008284:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	431a      	orrs	r2, r3
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	431a      	orrs	r2, r3
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	4baa      	ldr	r3, [pc, #680]	@ (8008554 <UART_SetConfig+0x2d8>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	6812      	ldr	r2, [r2, #0]
 80082b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082b4:	430b      	orrs	r3, r1
 80082b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a9f      	ldr	r2, [pc, #636]	@ (8008558 <UART_SetConfig+0x2dc>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d004      	beq.n	80082e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082e4:	4313      	orrs	r3, r2
 80082e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80082f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	6812      	ldr	r2, [r2, #0]
 80082fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082fc:	430b      	orrs	r3, r1
 80082fe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008306:	f023 010f 	bic.w	r1, r3, #15
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a90      	ldr	r2, [pc, #576]	@ (800855c <UART_SetConfig+0x2e0>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d125      	bne.n	800836c <UART_SetConfig+0xf0>
 8008320:	4b8f      	ldr	r3, [pc, #572]	@ (8008560 <UART_SetConfig+0x2e4>)
 8008322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	2b03      	cmp	r3, #3
 800832c:	d81a      	bhi.n	8008364 <UART_SetConfig+0xe8>
 800832e:	a201      	add	r2, pc, #4	@ (adr r2, 8008334 <UART_SetConfig+0xb8>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	08008345 	.word	0x08008345
 8008338:	08008355 	.word	0x08008355
 800833c:	0800834d 	.word	0x0800834d
 8008340:	0800835d 	.word	0x0800835d
 8008344:	2301      	movs	r3, #1
 8008346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800834a:	e116      	b.n	800857a <UART_SetConfig+0x2fe>
 800834c:	2302      	movs	r3, #2
 800834e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008352:	e112      	b.n	800857a <UART_SetConfig+0x2fe>
 8008354:	2304      	movs	r3, #4
 8008356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800835a:	e10e      	b.n	800857a <UART_SetConfig+0x2fe>
 800835c:	2308      	movs	r3, #8
 800835e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008362:	e10a      	b.n	800857a <UART_SetConfig+0x2fe>
 8008364:	2310      	movs	r3, #16
 8008366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800836a:	e106      	b.n	800857a <UART_SetConfig+0x2fe>
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a7c      	ldr	r2, [pc, #496]	@ (8008564 <UART_SetConfig+0x2e8>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d138      	bne.n	80083e8 <UART_SetConfig+0x16c>
 8008376:	4b7a      	ldr	r3, [pc, #488]	@ (8008560 <UART_SetConfig+0x2e4>)
 8008378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800837c:	f003 030c 	and.w	r3, r3, #12
 8008380:	2b0c      	cmp	r3, #12
 8008382:	d82d      	bhi.n	80083e0 <UART_SetConfig+0x164>
 8008384:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <UART_SetConfig+0x110>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	080083c1 	.word	0x080083c1
 8008390:	080083e1 	.word	0x080083e1
 8008394:	080083e1 	.word	0x080083e1
 8008398:	080083e1 	.word	0x080083e1
 800839c:	080083d1 	.word	0x080083d1
 80083a0:	080083e1 	.word	0x080083e1
 80083a4:	080083e1 	.word	0x080083e1
 80083a8:	080083e1 	.word	0x080083e1
 80083ac:	080083c9 	.word	0x080083c9
 80083b0:	080083e1 	.word	0x080083e1
 80083b4:	080083e1 	.word	0x080083e1
 80083b8:	080083e1 	.word	0x080083e1
 80083bc:	080083d9 	.word	0x080083d9
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083c6:	e0d8      	b.n	800857a <UART_SetConfig+0x2fe>
 80083c8:	2302      	movs	r3, #2
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ce:	e0d4      	b.n	800857a <UART_SetConfig+0x2fe>
 80083d0:	2304      	movs	r3, #4
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d6:	e0d0      	b.n	800857a <UART_SetConfig+0x2fe>
 80083d8:	2308      	movs	r3, #8
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083de:	e0cc      	b.n	800857a <UART_SetConfig+0x2fe>
 80083e0:	2310      	movs	r3, #16
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e6:	e0c8      	b.n	800857a <UART_SetConfig+0x2fe>
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a5e      	ldr	r2, [pc, #376]	@ (8008568 <UART_SetConfig+0x2ec>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d125      	bne.n	800843e <UART_SetConfig+0x1c2>
 80083f2:	4b5b      	ldr	r3, [pc, #364]	@ (8008560 <UART_SetConfig+0x2e4>)
 80083f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80083fc:	2b30      	cmp	r3, #48	@ 0x30
 80083fe:	d016      	beq.n	800842e <UART_SetConfig+0x1b2>
 8008400:	2b30      	cmp	r3, #48	@ 0x30
 8008402:	d818      	bhi.n	8008436 <UART_SetConfig+0x1ba>
 8008404:	2b20      	cmp	r3, #32
 8008406:	d00a      	beq.n	800841e <UART_SetConfig+0x1a2>
 8008408:	2b20      	cmp	r3, #32
 800840a:	d814      	bhi.n	8008436 <UART_SetConfig+0x1ba>
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <UART_SetConfig+0x19a>
 8008410:	2b10      	cmp	r3, #16
 8008412:	d008      	beq.n	8008426 <UART_SetConfig+0x1aa>
 8008414:	e00f      	b.n	8008436 <UART_SetConfig+0x1ba>
 8008416:	2300      	movs	r3, #0
 8008418:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800841c:	e0ad      	b.n	800857a <UART_SetConfig+0x2fe>
 800841e:	2302      	movs	r3, #2
 8008420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008424:	e0a9      	b.n	800857a <UART_SetConfig+0x2fe>
 8008426:	2304      	movs	r3, #4
 8008428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800842c:	e0a5      	b.n	800857a <UART_SetConfig+0x2fe>
 800842e:	2308      	movs	r3, #8
 8008430:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008434:	e0a1      	b.n	800857a <UART_SetConfig+0x2fe>
 8008436:	2310      	movs	r3, #16
 8008438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800843c:	e09d      	b.n	800857a <UART_SetConfig+0x2fe>
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a4a      	ldr	r2, [pc, #296]	@ (800856c <UART_SetConfig+0x2f0>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d125      	bne.n	8008494 <UART_SetConfig+0x218>
 8008448:	4b45      	ldr	r3, [pc, #276]	@ (8008560 <UART_SetConfig+0x2e4>)
 800844a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800844e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008452:	2bc0      	cmp	r3, #192	@ 0xc0
 8008454:	d016      	beq.n	8008484 <UART_SetConfig+0x208>
 8008456:	2bc0      	cmp	r3, #192	@ 0xc0
 8008458:	d818      	bhi.n	800848c <UART_SetConfig+0x210>
 800845a:	2b80      	cmp	r3, #128	@ 0x80
 800845c:	d00a      	beq.n	8008474 <UART_SetConfig+0x1f8>
 800845e:	2b80      	cmp	r3, #128	@ 0x80
 8008460:	d814      	bhi.n	800848c <UART_SetConfig+0x210>
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <UART_SetConfig+0x1f0>
 8008466:	2b40      	cmp	r3, #64	@ 0x40
 8008468:	d008      	beq.n	800847c <UART_SetConfig+0x200>
 800846a:	e00f      	b.n	800848c <UART_SetConfig+0x210>
 800846c:	2300      	movs	r3, #0
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008472:	e082      	b.n	800857a <UART_SetConfig+0x2fe>
 8008474:	2302      	movs	r3, #2
 8008476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800847a:	e07e      	b.n	800857a <UART_SetConfig+0x2fe>
 800847c:	2304      	movs	r3, #4
 800847e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008482:	e07a      	b.n	800857a <UART_SetConfig+0x2fe>
 8008484:	2308      	movs	r3, #8
 8008486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800848a:	e076      	b.n	800857a <UART_SetConfig+0x2fe>
 800848c:	2310      	movs	r3, #16
 800848e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008492:	e072      	b.n	800857a <UART_SetConfig+0x2fe>
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a35      	ldr	r2, [pc, #212]	@ (8008570 <UART_SetConfig+0x2f4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d12a      	bne.n	80084f4 <UART_SetConfig+0x278>
 800849e:	4b30      	ldr	r3, [pc, #192]	@ (8008560 <UART_SetConfig+0x2e4>)
 80084a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084ac:	d01a      	beq.n	80084e4 <UART_SetConfig+0x268>
 80084ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084b2:	d81b      	bhi.n	80084ec <UART_SetConfig+0x270>
 80084b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084b8:	d00c      	beq.n	80084d4 <UART_SetConfig+0x258>
 80084ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084be:	d815      	bhi.n	80084ec <UART_SetConfig+0x270>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <UART_SetConfig+0x250>
 80084c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084c8:	d008      	beq.n	80084dc <UART_SetConfig+0x260>
 80084ca:	e00f      	b.n	80084ec <UART_SetConfig+0x270>
 80084cc:	2300      	movs	r3, #0
 80084ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084d2:	e052      	b.n	800857a <UART_SetConfig+0x2fe>
 80084d4:	2302      	movs	r3, #2
 80084d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084da:	e04e      	b.n	800857a <UART_SetConfig+0x2fe>
 80084dc:	2304      	movs	r3, #4
 80084de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084e2:	e04a      	b.n	800857a <UART_SetConfig+0x2fe>
 80084e4:	2308      	movs	r3, #8
 80084e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ea:	e046      	b.n	800857a <UART_SetConfig+0x2fe>
 80084ec:	2310      	movs	r3, #16
 80084ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084f2:	e042      	b.n	800857a <UART_SetConfig+0x2fe>
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a17      	ldr	r2, [pc, #92]	@ (8008558 <UART_SetConfig+0x2dc>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d13a      	bne.n	8008574 <UART_SetConfig+0x2f8>
 80084fe:	4b18      	ldr	r3, [pc, #96]	@ (8008560 <UART_SetConfig+0x2e4>)
 8008500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008504:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008508:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800850c:	d01a      	beq.n	8008544 <UART_SetConfig+0x2c8>
 800850e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008512:	d81b      	bhi.n	800854c <UART_SetConfig+0x2d0>
 8008514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008518:	d00c      	beq.n	8008534 <UART_SetConfig+0x2b8>
 800851a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800851e:	d815      	bhi.n	800854c <UART_SetConfig+0x2d0>
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <UART_SetConfig+0x2b0>
 8008524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008528:	d008      	beq.n	800853c <UART_SetConfig+0x2c0>
 800852a:	e00f      	b.n	800854c <UART_SetConfig+0x2d0>
 800852c:	2300      	movs	r3, #0
 800852e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008532:	e022      	b.n	800857a <UART_SetConfig+0x2fe>
 8008534:	2302      	movs	r3, #2
 8008536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800853a:	e01e      	b.n	800857a <UART_SetConfig+0x2fe>
 800853c:	2304      	movs	r3, #4
 800853e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008542:	e01a      	b.n	800857a <UART_SetConfig+0x2fe>
 8008544:	2308      	movs	r3, #8
 8008546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800854a:	e016      	b.n	800857a <UART_SetConfig+0x2fe>
 800854c:	2310      	movs	r3, #16
 800854e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008552:	e012      	b.n	800857a <UART_SetConfig+0x2fe>
 8008554:	cfff69f3 	.word	0xcfff69f3
 8008558:	40008000 	.word	0x40008000
 800855c:	40013800 	.word	0x40013800
 8008560:	40021000 	.word	0x40021000
 8008564:	40004400 	.word	0x40004400
 8008568:	40004800 	.word	0x40004800
 800856c:	40004c00 	.word	0x40004c00
 8008570:	40005000 	.word	0x40005000
 8008574:	2310      	movs	r3, #16
 8008576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4aae      	ldr	r2, [pc, #696]	@ (8008838 <UART_SetConfig+0x5bc>)
 8008580:	4293      	cmp	r3, r2
 8008582:	f040 8097 	bne.w	80086b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008586:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800858a:	2b08      	cmp	r3, #8
 800858c:	d823      	bhi.n	80085d6 <UART_SetConfig+0x35a>
 800858e:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <UART_SetConfig+0x318>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085b9 	.word	0x080085b9
 8008598:	080085d7 	.word	0x080085d7
 800859c:	080085c1 	.word	0x080085c1
 80085a0:	080085d7 	.word	0x080085d7
 80085a4:	080085c7 	.word	0x080085c7
 80085a8:	080085d7 	.word	0x080085d7
 80085ac:	080085d7 	.word	0x080085d7
 80085b0:	080085d7 	.word	0x080085d7
 80085b4:	080085cf 	.word	0x080085cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085b8:	f7fd ffde 	bl	8006578 <HAL_RCC_GetPCLK1Freq>
 80085bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085be:	e010      	b.n	80085e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085c0:	4b9e      	ldr	r3, [pc, #632]	@ (800883c <UART_SetConfig+0x5c0>)
 80085c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085c4:	e00d      	b.n	80085e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085c6:	f7fd ff3f 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 80085ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085cc:	e009      	b.n	80085e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085d4:	e005      	b.n	80085e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80085e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 8130 	beq.w	800884a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ee:	4a94      	ldr	r2, [pc, #592]	@ (8008840 <UART_SetConfig+0x5c4>)
 80085f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085f4:	461a      	mov	r2, r3
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80085fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	4613      	mov	r3, r2
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	4413      	add	r3, r2
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	429a      	cmp	r2, r3
 800860c:	d305      	bcc.n	800861a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	429a      	cmp	r2, r3
 8008618:	d903      	bls.n	8008622 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008620:	e113      	b.n	800884a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	2200      	movs	r2, #0
 8008626:	60bb      	str	r3, [r7, #8]
 8008628:	60fa      	str	r2, [r7, #12]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862e:	4a84      	ldr	r2, [pc, #528]	@ (8008840 <UART_SetConfig+0x5c4>)
 8008630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008634:	b29b      	uxth	r3, r3
 8008636:	2200      	movs	r2, #0
 8008638:	603b      	str	r3, [r7, #0]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008640:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008644:	f7f7 fdda 	bl	80001fc <__aeabi_uldivmod>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4610      	mov	r0, r2
 800864e:	4619      	mov	r1, r3
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	f04f 0300 	mov.w	r3, #0
 8008658:	020b      	lsls	r3, r1, #8
 800865a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800865e:	0202      	lsls	r2, r0, #8
 8008660:	6979      	ldr	r1, [r7, #20]
 8008662:	6849      	ldr	r1, [r1, #4]
 8008664:	0849      	lsrs	r1, r1, #1
 8008666:	2000      	movs	r0, #0
 8008668:	460c      	mov	r4, r1
 800866a:	4605      	mov	r5, r0
 800866c:	eb12 0804 	adds.w	r8, r2, r4
 8008670:	eb43 0905 	adc.w	r9, r3, r5
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	469a      	mov	sl, r3
 800867c:	4693      	mov	fp, r2
 800867e:	4652      	mov	r2, sl
 8008680:	465b      	mov	r3, fp
 8008682:	4640      	mov	r0, r8
 8008684:	4649      	mov	r1, r9
 8008686:	f7f7 fdb9 	bl	80001fc <__aeabi_uldivmod>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4613      	mov	r3, r2
 8008690:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008698:	d308      	bcc.n	80086ac <UART_SetConfig+0x430>
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086a0:	d204      	bcs.n	80086ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6a3a      	ldr	r2, [r7, #32]
 80086a8:	60da      	str	r2, [r3, #12]
 80086aa:	e0ce      	b.n	800884a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80086b2:	e0ca      	b.n	800884a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086bc:	d166      	bne.n	800878c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80086be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086c2:	2b08      	cmp	r3, #8
 80086c4:	d827      	bhi.n	8008716 <UART_SetConfig+0x49a>
 80086c6:	a201      	add	r2, pc, #4	@ (adr r2, 80086cc <UART_SetConfig+0x450>)
 80086c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086cc:	080086f1 	.word	0x080086f1
 80086d0:	080086f9 	.word	0x080086f9
 80086d4:	08008701 	.word	0x08008701
 80086d8:	08008717 	.word	0x08008717
 80086dc:	08008707 	.word	0x08008707
 80086e0:	08008717 	.word	0x08008717
 80086e4:	08008717 	.word	0x08008717
 80086e8:	08008717 	.word	0x08008717
 80086ec:	0800870f 	.word	0x0800870f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086f0:	f7fd ff42 	bl	8006578 <HAL_RCC_GetPCLK1Freq>
 80086f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086f6:	e014      	b.n	8008722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086f8:	f7fd ff54 	bl	80065a4 <HAL_RCC_GetPCLK2Freq>
 80086fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086fe:	e010      	b.n	8008722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008700:	4b4e      	ldr	r3, [pc, #312]	@ (800883c <UART_SetConfig+0x5c0>)
 8008702:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008704:	e00d      	b.n	8008722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008706:	f7fd fe9f 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 800870a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800870c:	e009      	b.n	8008722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800870e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008712:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008714:	e005      	b.n	8008722 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008720:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8090 	beq.w	800884a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872e:	4a44      	ldr	r2, [pc, #272]	@ (8008840 <UART_SetConfig+0x5c4>)
 8008730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008734:	461a      	mov	r2, r3
 8008736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008738:	fbb3 f3f2 	udiv	r3, r3, r2
 800873c:	005a      	lsls	r2, r3, #1
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	085b      	lsrs	r3, r3, #1
 8008744:	441a      	add	r2, r3
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	fbb2 f3f3 	udiv	r3, r2, r3
 800874e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	2b0f      	cmp	r3, #15
 8008754:	d916      	bls.n	8008784 <UART_SetConfig+0x508>
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800875c:	d212      	bcs.n	8008784 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	b29b      	uxth	r3, r3
 8008762:	f023 030f 	bic.w	r3, r3, #15
 8008766:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	085b      	lsrs	r3, r3, #1
 800876c:	b29b      	uxth	r3, r3
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	b29a      	uxth	r2, r3
 8008774:	8bfb      	ldrh	r3, [r7, #30]
 8008776:	4313      	orrs	r3, r2
 8008778:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	8bfa      	ldrh	r2, [r7, #30]
 8008780:	60da      	str	r2, [r3, #12]
 8008782:	e062      	b.n	800884a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800878a:	e05e      	b.n	800884a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800878c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008790:	2b08      	cmp	r3, #8
 8008792:	d828      	bhi.n	80087e6 <UART_SetConfig+0x56a>
 8008794:	a201      	add	r2, pc, #4	@ (adr r2, 800879c <UART_SetConfig+0x520>)
 8008796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879a:	bf00      	nop
 800879c:	080087c1 	.word	0x080087c1
 80087a0:	080087c9 	.word	0x080087c9
 80087a4:	080087d1 	.word	0x080087d1
 80087a8:	080087e7 	.word	0x080087e7
 80087ac:	080087d7 	.word	0x080087d7
 80087b0:	080087e7 	.word	0x080087e7
 80087b4:	080087e7 	.word	0x080087e7
 80087b8:	080087e7 	.word	0x080087e7
 80087bc:	080087df 	.word	0x080087df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087c0:	f7fd feda 	bl	8006578 <HAL_RCC_GetPCLK1Freq>
 80087c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087c6:	e014      	b.n	80087f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087c8:	f7fd feec 	bl	80065a4 <HAL_RCC_GetPCLK2Freq>
 80087cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087ce:	e010      	b.n	80087f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087d0:	4b1a      	ldr	r3, [pc, #104]	@ (800883c <UART_SetConfig+0x5c0>)
 80087d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087d4:	e00d      	b.n	80087f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087d6:	f7fd fe37 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 80087da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087dc:	e009      	b.n	80087f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087e4:	e005      	b.n	80087f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80087f0:	bf00      	nop
    }

    if (pclk != 0U)
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d028      	beq.n	800884a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fc:	4a10      	ldr	r2, [pc, #64]	@ (8008840 <UART_SetConfig+0x5c4>)
 80087fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008802:	461a      	mov	r2, r3
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	fbb3 f2f2 	udiv	r2, r3, r2
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	085b      	lsrs	r3, r3, #1
 8008810:	441a      	add	r2, r3
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	fbb2 f3f3 	udiv	r3, r2, r3
 800881a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	2b0f      	cmp	r3, #15
 8008820:	d910      	bls.n	8008844 <UART_SetConfig+0x5c8>
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008828:	d20c      	bcs.n	8008844 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	b29a      	uxth	r2, r3
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60da      	str	r2, [r3, #12]
 8008834:	e009      	b.n	800884a <UART_SetConfig+0x5ce>
 8008836:	bf00      	nop
 8008838:	40008000 	.word	0x40008000
 800883c:	00f42400 	.word	0x00f42400
 8008840:	0800a00c 	.word	0x0800a00c
      }
      else
      {
        ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2201      	movs	r2, #1
 800884e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2201      	movs	r2, #1
 8008856:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2200      	movs	r2, #0
 800885e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	2200      	movs	r2, #0
 8008864:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008866:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800886a:	4618      	mov	r0, r3
 800886c:	3730      	adds	r7, #48	@ 0x30
 800886e:	46bd      	mov	sp, r7
 8008870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008880:	f003 0308 	and.w	r3, r3, #8
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00a      	beq.n	800889e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	430a      	orrs	r2, r1
 800889c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00a      	beq.n	80088e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e6:	f003 0304 	and.w	r3, r3, #4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00a      	beq.n	8008904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	430a      	orrs	r2, r1
 8008902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008908:	f003 0310 	and.w	r3, r3, #16
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00a      	beq.n	8008926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892a:	f003 0320 	and.w	r3, r3, #32
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00a      	beq.n	8008948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01a      	beq.n	800898a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800896e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008972:	d10a      	bne.n	800898a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	605a      	str	r2, [r3, #4]
  }
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b098      	sub	sp, #96	@ 0x60
 80089bc:	af02      	add	r7, sp, #8
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089c8:	f7f9 fbde 	bl	8002188 <HAL_GetTick>
 80089cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0308 	and.w	r3, r3, #8
 80089d8:	2b08      	cmp	r3, #8
 80089da:	d12f      	bne.n	8008a3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089e4:	2200      	movs	r2, #0
 80089e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f88e 	bl	8008b0c <UART_WaitOnFlagUntilTimeout>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d022      	beq.n	8008a3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e6      	bne.n	80089f6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e063      	b.n	8008b04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0304 	and.w	r3, r3, #4
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	d149      	bne.n	8008ade <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a52:	2200      	movs	r2, #0
 8008a54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f857 	bl	8008b0c <UART_WaitOnFlagUntilTimeout>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d03c      	beq.n	8008ade <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6c:	e853 3f00 	ldrex	r3, [r3]
 8008a70:	623b      	str	r3, [r7, #32]
   return(result);
 8008a72:	6a3b      	ldr	r3, [r7, #32]
 8008a74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e6      	bne.n	8008a64 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3308      	adds	r3, #8
 8008a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f023 0301 	bic.w	r3, r3, #1
 8008aac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3308      	adds	r3, #8
 8008ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ab6:	61fa      	str	r2, [r7, #28]
 8008ab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	69b9      	ldr	r1, [r7, #24]
 8008abc:	69fa      	ldr	r2, [r7, #28]
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e5      	bne.n	8008a96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2220      	movs	r2, #32
 8008ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e012      	b.n	8008b04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3758      	adds	r7, #88	@ 0x58
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b1c:	e04f      	b.n	8008bbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b24:	d04b      	beq.n	8008bbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b26:	f7f9 fb2f 	bl	8002188 <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d302      	bcc.n	8008b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e04e      	b.n	8008bde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d037      	beq.n	8008bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b80      	cmp	r3, #128	@ 0x80
 8008b52:	d034      	beq.n	8008bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2b40      	cmp	r3, #64	@ 0x40
 8008b58:	d031      	beq.n	8008bbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	f003 0308 	and.w	r3, r3, #8
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d110      	bne.n	8008b8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2208      	movs	r2, #8
 8008b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f000 f95b 	bl	8008e2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2208      	movs	r2, #8
 8008b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e029      	b.n	8008bde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b98:	d111      	bne.n	8008bbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f941 	bl	8008e2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2220      	movs	r2, #32
 8008bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e00f      	b.n	8008bde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69da      	ldr	r2, [r3, #28]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	bf0c      	ite	eq
 8008bce:	2301      	moveq	r3, #1
 8008bd0:	2300      	movne	r3, #0
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	79fb      	ldrb	r3, [r7, #7]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d0a0      	beq.n	8008b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
	...

08008be8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b0a3      	sub	sp, #140	@ 0x8c
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	88fa      	ldrh	r2, [r7, #6]
 8008c00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	88fa      	ldrh	r2, [r7, #6]
 8008c08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c1a:	d10e      	bne.n	8008c3a <UART_Start_Receive_IT+0x52>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d105      	bne.n	8008c30 <UART_Start_Receive_IT+0x48>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008c2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c2e:	e02d      	b.n	8008c8c <UART_Start_Receive_IT+0xa4>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	22ff      	movs	r2, #255	@ 0xff
 8008c34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c38:	e028      	b.n	8008c8c <UART_Start_Receive_IT+0xa4>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10d      	bne.n	8008c5e <UART_Start_Receive_IT+0x76>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d104      	bne.n	8008c54 <UART_Start_Receive_IT+0x6c>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	22ff      	movs	r2, #255	@ 0xff
 8008c4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c52:	e01b      	b.n	8008c8c <UART_Start_Receive_IT+0xa4>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	227f      	movs	r2, #127	@ 0x7f
 8008c58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c5c:	e016      	b.n	8008c8c <UART_Start_Receive_IT+0xa4>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c66:	d10d      	bne.n	8008c84 <UART_Start_Receive_IT+0x9c>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d104      	bne.n	8008c7a <UART_Start_Receive_IT+0x92>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	227f      	movs	r2, #127	@ 0x7f
 8008c74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c78:	e008      	b.n	8008c8c <UART_Start_Receive_IT+0xa4>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	223f      	movs	r2, #63	@ 0x3f
 8008c7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c82:	e003      	b.n	8008c8c <UART_Start_Receive_IT+0xa4>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2222      	movs	r2, #34	@ 0x22
 8008c98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ca6:	e853 3f00 	ldrex	r3, [r3]
 8008caa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008cac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cae:	f043 0301 	orr.w	r3, r3, #1
 8008cb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008cc0:	673a      	str	r2, [r7, #112]	@ 0x70
 8008cc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008cc6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008cc8:	e841 2300 	strex	r3, r2, [r1]
 8008ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008cce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e3      	bne.n	8008c9c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cdc:	d14f      	bne.n	8008d7e <UART_Start_Receive_IT+0x196>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ce4:	88fa      	ldrh	r2, [r7, #6]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d349      	bcc.n	8008d7e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cf2:	d107      	bne.n	8008d04 <UART_Start_Receive_IT+0x11c>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d103      	bne.n	8008d04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4a47      	ldr	r2, [pc, #284]	@ (8008e1c <UART_Start_Receive_IT+0x234>)
 8008d00:	675a      	str	r2, [r3, #116]	@ 0x74
 8008d02:	e002      	b.n	8008d0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4a46      	ldr	r2, [pc, #280]	@ (8008e20 <UART_Start_Receive_IT+0x238>)
 8008d08:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01a      	beq.n	8008d48 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d36:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008d3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e4      	bne.n	8008d12 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3308      	adds	r3, #8
 8008d66:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d68:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008d6a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e5      	bne.n	8008d48 <UART_Start_Receive_IT+0x160>
 8008d7c:	e046      	b.n	8008e0c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d86:	d107      	bne.n	8008d98 <UART_Start_Receive_IT+0x1b0>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	4a24      	ldr	r2, [pc, #144]	@ (8008e24 <UART_Start_Receive_IT+0x23c>)
 8008d94:	675a      	str	r2, [r3, #116]	@ 0x74
 8008d96:	e002      	b.n	8008d9e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4a23      	ldr	r2, [pc, #140]	@ (8008e28 <UART_Start_Receive_IT+0x240>)
 8008d9c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d019      	beq.n	8008dda <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	e853 3f00 	ldrex	r3, [r3]
 8008db2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008dba:	677b      	str	r3, [r7, #116]	@ 0x74
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dc6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008dca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008dcc:	e841 2300 	strex	r3, r2, [r1]
 8008dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e6      	bne.n	8008da6 <UART_Start_Receive_IT+0x1be>
 8008dd8:	e018      	b.n	8008e0c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	e853 3f00 	ldrex	r3, [r3]
 8008de6:	613b      	str	r3, [r7, #16]
   return(result);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f043 0320 	orr.w	r3, r3, #32
 8008dee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008df8:	623b      	str	r3, [r7, #32]
 8008dfa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	69f9      	ldr	r1, [r7, #28]
 8008dfe:	6a3a      	ldr	r2, [r7, #32]
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e6      	bne.n	8008dda <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	378c      	adds	r7, #140	@ 0x8c
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	080099a1 	.word	0x080099a1
 8008e20:	08009639 	.word	0x08009639
 8008e24:	0800947d 	.word	0x0800947d
 8008e28:	080092c1 	.word	0x080092c1

08008e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b095      	sub	sp, #84	@ 0x54
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e3c:	e853 3f00 	ldrex	r3, [r3]
 8008e40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e52:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e5a:	e841 2300 	strex	r3, r2, [r1]
 8008e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1e6      	bne.n	8008e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	e853 3f00 	ldrex	r3, [r3]
 8008e74:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3308      	adds	r3, #8
 8008e88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e3      	bne.n	8008e66 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d118      	bne.n	8008ed8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f023 0310 	bic.w	r3, r3, #16
 8008eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ec4:	61bb      	str	r3, [r7, #24]
 8008ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6979      	ldr	r1, [r7, #20]
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2220      	movs	r2, #32
 8008edc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008eec:	bf00      	nop
 8008eee:	3754      	adds	r7, #84	@ 0x54
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff f99a 	bl	8008250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f1c:	bf00      	nop
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b08f      	sub	sp, #60	@ 0x3c
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f32:	2b21      	cmp	r3, #33	@ 0x21
 8008f34:	d14c      	bne.n	8008fd0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d132      	bne.n	8008fa8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f62:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e6      	bne.n	8008f42 <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	6979      	ldr	r1, [r7, #20]
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e6      	bne.n	8008f74 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008fa6:	e013      	b.n	8008fd0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fac:	781a      	ldrb	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008fd0:	bf00      	nop
 8008fd2:	373c      	adds	r7, #60	@ 0x3c
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b091      	sub	sp, #68	@ 0x44
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fea:	2b21      	cmp	r3, #33	@ 0x21
 8008fec:	d151      	bne.n	8009092 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d132      	bne.n	8009060 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	623b      	str	r3, [r7, #32]
   return(result);
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800900e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009018:	633b      	str	r3, [r7, #48]	@ 0x30
 800901a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800901e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e6      	bne.n	8008ffa <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	60fb      	str	r3, [r7, #12]
   return(result);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009040:	637b      	str	r3, [r7, #52]	@ 0x34
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800904a:	61fb      	str	r3, [r7, #28]
 800904c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904e:	69b9      	ldr	r1, [r7, #24]
 8009050:	69fa      	ldr	r2, [r7, #28]
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	617b      	str	r3, [r7, #20]
   return(result);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e6      	bne.n	800902c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800905e:	e018      	b.n	8009092 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009064:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009068:	881a      	ldrh	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009072:	b292      	uxth	r2, r2
 8009074:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800907a:	1c9a      	adds	r2, r3, #2
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009086:	b29b      	uxth	r3, r3
 8009088:	3b01      	subs	r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009092:	bf00      	nop
 8009094:	3744      	adds	r7, #68	@ 0x44
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800909e:	b480      	push	{r7}
 80090a0:	b091      	sub	sp, #68	@ 0x44
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ac:	2b21      	cmp	r3, #33	@ 0x21
 80090ae:	d160      	bne.n	8009172 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80090b8:	e057      	b.n	800916a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d133      	bne.n	800912e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3308      	adds	r3, #8
 80090cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	623b      	str	r3, [r7, #32]
   return(result);
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80090dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3308      	adds	r3, #8
 80090e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80090e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090ee:	e841 2300 	strex	r3, r2, [r1]
 80090f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1e5      	bne.n	80090c6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	60fb      	str	r3, [r7, #12]
   return(result);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800910e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009118:	61fb      	str	r3, [r7, #28]
 800911a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	69b9      	ldr	r1, [r7, #24]
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	617b      	str	r3, [r7, #20]
   return(result);
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e6      	bne.n	80090fa <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800912c:	e021      	b.n	8009172 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009138:	2b00      	cmp	r3, #0
 800913a:	d013      	beq.n	8009164 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009140:	781a      	ldrb	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009158:	b29b      	uxth	r3, r3
 800915a:	3b01      	subs	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009164:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009166:	3b01      	subs	r3, #1
 8009168:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800916a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1a4      	bne.n	80090ba <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009170:	e7ff      	b.n	8009172 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009172:	bf00      	nop
 8009174:	3744      	adds	r7, #68	@ 0x44
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800917e:	b480      	push	{r7}
 8009180:	b091      	sub	sp, #68	@ 0x44
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800918c:	2b21      	cmp	r3, #33	@ 0x21
 800918e:	d165      	bne.n	800925c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009196:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009198:	e05c      	b.n	8009254 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d133      	bne.n	800920e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3308      	adds	r3, #8
 80091ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80091bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3308      	adds	r3, #8
 80091c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e5      	bne.n	80091a6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	e853 3f00 	ldrex	r3, [r3]
 80091e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	461a      	mov	r2, r3
 80091f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f8:	61bb      	str	r3, [r7, #24]
 80091fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fc:	6979      	ldr	r1, [r7, #20]
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	e841 2300 	strex	r3, r2, [r1]
 8009204:	613b      	str	r3, [r7, #16]
   return(result);
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e6      	bne.n	80091da <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800920c:	e026      	b.n	800925c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009218:	2b00      	cmp	r3, #0
 800921a:	d018      	beq.n	800924e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009220:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009224:	881a      	ldrh	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800922e:	b292      	uxth	r2, r2
 8009230:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009236:	1c9a      	adds	r2, r3, #2
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009242:	b29b      	uxth	r3, r3
 8009244:	3b01      	subs	r3, #1
 8009246:	b29a      	uxth	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800924e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009250:	3b01      	subs	r3, #1
 8009252:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009254:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009256:	2b00      	cmp	r3, #0
 8009258:	d19f      	bne.n	800919a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800925a:	e7ff      	b.n	800925c <UART_TxISR_16BIT_FIFOEN+0xde>
 800925c:	bf00      	nop
 800925e:	3744      	adds	r7, #68	@ 0x44
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b088      	sub	sp, #32
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	60bb      	str	r3, [r7, #8]
   return(result);
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009284:	61fb      	str	r3, [r7, #28]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	61bb      	str	r3, [r7, #24]
 8009290:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6979      	ldr	r1, [r7, #20]
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	613b      	str	r3, [r7, #16]
   return(result);
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e6      	bne.n	8009270 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7f7 ffcf 	bl	8001254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092b6:	bf00      	nop
 80092b8:	3720      	adds	r7, #32
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
	...

080092c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b09c      	sub	sp, #112	@ 0x70
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092d8:	2b22      	cmp	r3, #34	@ 0x22
 80092da:	f040 80be 	bne.w	800945a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80092e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80092ec:	b2d9      	uxtb	r1, r3
 80092ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f8:	400a      	ands	r2, r1
 80092fa:	b2d2      	uxtb	r2, r2
 80092fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800930e:	b29b      	uxth	r3, r3
 8009310:	3b01      	subs	r3, #1
 8009312:	b29a      	uxth	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	f040 80a3 	bne.w	800946e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800933c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009346:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009348:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800934c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e6      	bne.n	8009328 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3308      	adds	r3, #8
 8009360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800936a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800936c:	f023 0301 	bic.w	r3, r3, #1
 8009370:	667b      	str	r3, [r7, #100]	@ 0x64
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3308      	adds	r3, #8
 8009378:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800937a:	647a      	str	r2, [r7, #68]	@ 0x44
 800937c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009380:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009382:	e841 2300 	strex	r3, r2, [r1]
 8009386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1e5      	bne.n	800935a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2220      	movs	r2, #32
 8009392:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a34      	ldr	r2, [pc, #208]	@ (8009478 <UART_RxISR_8BIT+0x1b8>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d01f      	beq.n	80093ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d018      	beq.n	80093ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c2:	e853 3f00 	ldrex	r3, [r3]
 80093c6:	623b      	str	r3, [r7, #32]
   return(result);
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80093da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e6      	bne.n	80093ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d12e      	bne.n	8009452 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	60fb      	str	r3, [r7, #12]
   return(result);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 0310 	bic.w	r3, r3, #16
 800940e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	461a      	mov	r2, r3
 8009416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009418:	61fb      	str	r3, [r7, #28]
 800941a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941c:	69b9      	ldr	r1, [r7, #24]
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	e841 2300 	strex	r3, r2, [r1]
 8009424:	617b      	str	r3, [r7, #20]
   return(result);
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e6      	bne.n	80093fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	f003 0310 	and.w	r3, r3, #16
 8009436:	2b10      	cmp	r3, #16
 8009438:	d103      	bne.n	8009442 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2210      	movs	r2, #16
 8009440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7fe ff0a 	bl	8008264 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009450:	e00d      	b.n	800946e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7f7 ff14 	bl	8001280 <HAL_UART_RxCpltCallback>
}
 8009458:	e009      	b.n	800946e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	8b1b      	ldrh	r3, [r3, #24]
 8009460:	b29a      	uxth	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0208 	orr.w	r2, r2, #8
 800946a:	b292      	uxth	r2, r2
 800946c:	831a      	strh	r2, [r3, #24]
}
 800946e:	bf00      	nop
 8009470:	3770      	adds	r7, #112	@ 0x70
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40008000 	.word	0x40008000

0800947c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b09c      	sub	sp, #112	@ 0x70
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800948a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009494:	2b22      	cmp	r3, #34	@ 0x22
 8009496:	f040 80be 	bne.w	8009616 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80094a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80094aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80094ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80094b2:	4013      	ands	r3, r2
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094be:	1c9a      	adds	r2, r3, #2
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	3b01      	subs	r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094dc:	b29b      	uxth	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f040 80a3 	bne.w	800962a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80094f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009502:	657b      	str	r3, [r7, #84]	@ 0x54
 8009504:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009508:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e6      	bne.n	80094e4 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3308      	adds	r3, #8
 800951c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009520:	e853 3f00 	ldrex	r3, [r3]
 8009524:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	f023 0301 	bic.w	r3, r3, #1
 800952c:	663b      	str	r3, [r7, #96]	@ 0x60
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3308      	adds	r3, #8
 8009534:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009536:	643a      	str	r2, [r7, #64]	@ 0x40
 8009538:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800953c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e5      	bne.n	8009516 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2220      	movs	r2, #32
 800954e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a34      	ldr	r2, [pc, #208]	@ (8009634 <UART_RxISR_16BIT+0x1b8>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d01f      	beq.n	80095a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d018      	beq.n	80095a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	e853 3f00 	ldrex	r3, [r3]
 8009582:	61fb      	str	r3, [r7, #28]
   return(result);
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800958a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009596:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800959a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800959c:	e841 2300 	strex	r3, r2, [r1]
 80095a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1e6      	bne.n	8009576 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d12e      	bne.n	800960e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	e853 3f00 	ldrex	r3, [r3]
 80095c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	f023 0310 	bic.w	r3, r3, #16
 80095ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	461a      	mov	r2, r3
 80095d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095d4:	61bb      	str	r3, [r7, #24]
 80095d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d8:	6979      	ldr	r1, [r7, #20]
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	e841 2300 	strex	r3, r2, [r1]
 80095e0:	613b      	str	r3, [r7, #16]
   return(result);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1e6      	bne.n	80095b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	f003 0310 	and.w	r3, r3, #16
 80095f2:	2b10      	cmp	r3, #16
 80095f4:	d103      	bne.n	80095fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2210      	movs	r2, #16
 80095fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7fe fe2c 	bl	8008264 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800960c:	e00d      	b.n	800962a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7f7 fe36 	bl	8001280 <HAL_UART_RxCpltCallback>
}
 8009614:	e009      	b.n	800962a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	8b1b      	ldrh	r3, [r3, #24]
 800961c:	b29a      	uxth	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0208 	orr.w	r2, r2, #8
 8009626:	b292      	uxth	r2, r2
 8009628:	831a      	strh	r2, [r3, #24]
}
 800962a:	bf00      	nop
 800962c:	3770      	adds	r7, #112	@ 0x70
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	40008000 	.word	0x40008000

08009638 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b0ac      	sub	sp, #176	@ 0xb0
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009646:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800966e:	2b22      	cmp	r3, #34	@ 0x22
 8009670:	f040 8183 	bne.w	800997a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800967a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800967e:	e126      	b.n	80098ce <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009686:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800968a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800968e:	b2d9      	uxtb	r1, r3
 8009690:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009694:	b2da      	uxtb	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800969a:	400a      	ands	r2, r1
 800969c:	b2d2      	uxtb	r2, r2
 800969e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	3b01      	subs	r3, #1
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80096c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096ca:	f003 0307 	and.w	r3, r3, #7
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d053      	beq.n	800977a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d011      	beq.n	8009702 <UART_RxISR_8BIT_FIFOEN+0xca>
 80096de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80096e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00b      	beq.n	8009702 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2201      	movs	r2, #1
 80096f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f8:	f043 0201 	orr.w	r2, r3, #1
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009706:	f003 0302 	and.w	r3, r3, #2
 800970a:	2b00      	cmp	r3, #0
 800970c:	d011      	beq.n	8009732 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800970e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00b      	beq.n	8009732 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2202      	movs	r2, #2
 8009720:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009728:	f043 0204 	orr.w	r2, r3, #4
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009736:	f003 0304 	and.w	r3, r3, #4
 800973a:	2b00      	cmp	r3, #0
 800973c:	d011      	beq.n	8009762 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800973e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00b      	beq.n	8009762 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2204      	movs	r2, #4
 8009750:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009758:	f043 0202 	orr.w	r2, r3, #2
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009768:	2b00      	cmp	r3, #0
 800976a:	d006      	beq.n	800977a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7fe fd6f 	bl	8008250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009780:	b29b      	uxth	r3, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	f040 80a3 	bne.w	80098ce <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800979c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	461a      	mov	r2, r3
 80097a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80097ac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80097b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80097b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e4      	bne.n	8009788 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3308      	adds	r3, #8
 80097c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097c8:	e853 3f00 	ldrex	r3, [r3]
 80097cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80097ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80097d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097d4:	f023 0301 	bic.w	r3, r3, #1
 80097d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3308      	adds	r3, #8
 80097e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80097e6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80097e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80097ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80097ee:	e841 2300 	strex	r3, r2, [r1]
 80097f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80097f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1e1      	bne.n	80097be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2220      	movs	r2, #32
 80097fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a61      	ldr	r2, [pc, #388]	@ (8009998 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d021      	beq.n	800985c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d01a      	beq.n	800985c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800982e:	e853 3f00 	ldrex	r3, [r3]
 8009832:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009836:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800983a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009848:	657b      	str	r3, [r7, #84]	@ 0x54
 800984a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800984e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e4      	bne.n	8009826 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009860:	2b01      	cmp	r3, #1
 8009862:	d130      	bne.n	80098c6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009872:	e853 3f00 	ldrex	r3, [r3]
 8009876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987a:	f023 0310 	bic.w	r3, r3, #16
 800987e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800988c:	643b      	str	r3, [r7, #64]	@ 0x40
 800988e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009890:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009892:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800989a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e4      	bne.n	800986a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	f003 0310 	and.w	r3, r3, #16
 80098aa:	2b10      	cmp	r3, #16
 80098ac:	d103      	bne.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2210      	movs	r2, #16
 80098b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7fe fcd0 	bl	8008264 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80098c4:	e00e      	b.n	80098e4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7f7 fcda 	bl	8001280 <HAL_UART_RxCpltCallback>
        break;
 80098cc:	e00a      	b.n	80098e4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098ce:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d006      	beq.n	80098e4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80098d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098da:	f003 0320 	and.w	r3, r3, #32
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f47f aece 	bne.w	8009680 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098ea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80098ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d04b      	beq.n	800998e <UART_RxISR_8BIT_FIFOEN+0x356>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80098fc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009900:	429a      	cmp	r2, r3
 8009902:	d244      	bcs.n	800998e <UART_RxISR_8BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3308      	adds	r3, #8
 800990a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	e853 3f00 	ldrex	r3, [r3]
 8009912:	61fb      	str	r3, [r7, #28]
   return(result);
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800991a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3308      	adds	r3, #8
 8009924:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009928:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800992a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800992e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009930:	e841 2300 	strex	r3, r2, [r1]
 8009934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e3      	bne.n	8009904 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a17      	ldr	r2, [pc, #92]	@ (800999c <UART_RxISR_8BIT_FIFOEN+0x364>)
 8009940:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f043 0320 	orr.w	r3, r3, #32
 8009956:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009964:	61bb      	str	r3, [r7, #24]
 8009966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6979      	ldr	r1, [r7, #20]
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	613b      	str	r3, [r7, #16]
   return(result);
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e4      	bne.n	8009942 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009978:	e009      	b.n	800998e <UART_RxISR_8BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	8b1b      	ldrh	r3, [r3, #24]
 8009980:	b29a      	uxth	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f042 0208 	orr.w	r2, r2, #8
 800998a:	b292      	uxth	r2, r2
 800998c:	831a      	strh	r2, [r3, #24]
}
 800998e:	bf00      	nop
 8009990:	37b0      	adds	r7, #176	@ 0xb0
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	40008000 	.word	0x40008000
 800999c:	080092c1 	.word	0x080092c1

080099a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b0ae      	sub	sp, #184	@ 0xb8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80099ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	69db      	ldr	r3, [r3, #28]
 80099b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099d6:	2b22      	cmp	r3, #34	@ 0x22
 80099d8:	f040 8187 	bne.w	8009cea <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80099e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099e6:	e12a      	b.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80099ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80099fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80099fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009a02:	4013      	ands	r3, r2
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a10:	1c9a      	adds	r2, r3, #2
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a36:	f003 0307 	and.w	r3, r3, #7
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d053      	beq.n	8009ae6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d011      	beq.n	8009a6e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00b      	beq.n	8009a6e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a64:	f043 0201 	orr.w	r2, r3, #1
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d011      	beq.n	8009a9e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00b      	beq.n	8009a9e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a94:	f043 0204 	orr.w	r2, r3, #4
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009aa2:	f003 0304 	and.w	r3, r3, #4
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d011      	beq.n	8009ace <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009aaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00b      	beq.n	8009ace <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2204      	movs	r2, #4
 8009abc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ac4:	f043 0202 	orr.w	r2, r3, #2
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d006      	beq.n	8009ae6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7fe fbb9 	bl	8008250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f040 80a5 	bne.w	8009c3e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009afc:	e853 3f00 	ldrex	r3, [r3]
 8009b00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
 8009b12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b22:	e841 2300 	strex	r3, r2, [r1]
 8009b26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e2      	bne.n	8009af4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3308      	adds	r3, #8
 8009b34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b44:	f023 0301 	bic.w	r3, r3, #1
 8009b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	3308      	adds	r3, #8
 8009b52:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009b56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e1      	bne.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a61      	ldr	r2, [pc, #388]	@ (8009d08 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d021      	beq.n	8009bcc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d01a      	beq.n	8009bcc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b9e:	e853 3f00 	ldrex	r3, [r3]
 8009ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ba6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009baa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009bb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009bbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009bc0:	e841 2300 	strex	r3, r2, [r1]
 8009bc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1e4      	bne.n	8009b96 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d130      	bne.n	8009c36 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be2:	e853 3f00 	ldrex	r3, [r3]
 8009be6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bea:	f023 0310 	bic.w	r3, r3, #16
 8009bee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c04:	e841 2300 	strex	r3, r2, [r1]
 8009c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e4      	bne.n	8009bda <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	f003 0310 	and.w	r3, r3, #16
 8009c1a:	2b10      	cmp	r3, #16
 8009c1c:	d103      	bne.n	8009c26 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2210      	movs	r2, #16
 8009c24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7fe fb18 	bl	8008264 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009c34:	e00e      	b.n	8009c54 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7f7 fb22 	bl	8001280 <HAL_UART_RxCpltCallback>
        break;
 8009c3c:	e00a      	b.n	8009c54 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c3e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d006      	beq.n	8009c54 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009c46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f47f aeca 	bne.w	80099e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c5a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c5e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d04b      	beq.n	8009cfe <UART_RxISR_16BIT_FIFOEN+0x35e>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009c6c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d244      	bcs.n	8009cfe <UART_RxISR_16BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3308      	adds	r3, #8
 8009c7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7e:	e853 3f00 	ldrex	r3, [r3]
 8009c82:	623b      	str	r3, [r7, #32]
   return(result);
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3308      	adds	r3, #8
 8009c94:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009c98:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ca0:	e841 2300 	strex	r3, r2, [r1]
 8009ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e3      	bne.n	8009c74 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a17      	ldr	r2, [pc, #92]	@ (8009d0c <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8009cb0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	e853 3f00 	ldrex	r3, [r3]
 8009cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f043 0320 	orr.w	r3, r3, #32
 8009cc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009cd4:	61fb      	str	r3, [r7, #28]
 8009cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd8:	69b9      	ldr	r1, [r7, #24]
 8009cda:	69fa      	ldr	r2, [r7, #28]
 8009cdc:	e841 2300 	strex	r3, r2, [r1]
 8009ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1e4      	bne.n	8009cb2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ce8:	e009      	b.n	8009cfe <UART_RxISR_16BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	8b1b      	ldrh	r3, [r3, #24]
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f042 0208 	orr.w	r2, r2, #8
 8009cfa:	b292      	uxth	r2, r2
 8009cfc:	831a      	strh	r2, [r3, #24]
}
 8009cfe:	bf00      	nop
 8009d00:	37b8      	adds	r7, #184	@ 0xb8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	40008000 	.word	0x40008000
 8009d0c:	0800947d 	.word	0x0800947d

08009d10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d101      	bne.n	8009d62 <HAL_UARTEx_DisableFifoMode+0x16>
 8009d5e:	2302      	movs	r3, #2
 8009d60:	e027      	b.n	8009db2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2224      	movs	r2, #36	@ 0x24
 8009d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f022 0201 	bic.w	r2, r2, #1
 8009d88:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009d90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2220      	movs	r2, #32
 8009da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d101      	bne.n	8009dd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e02d      	b.n	8009e32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2224      	movs	r2, #36	@ 0x24
 8009de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 0201 	bic.w	r2, r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f850 	bl	8009eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2220      	movs	r2, #32
 8009e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d101      	bne.n	8009e52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e4e:	2302      	movs	r3, #2
 8009e50:	e02d      	b.n	8009eae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2224      	movs	r2, #36	@ 0x24
 8009e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f022 0201 	bic.w	r2, r2, #1
 8009e78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f812 	bl	8009eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
	...

08009eb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d108      	bne.n	8009eda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ed8:	e031      	b.n	8009f3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009eda:	2308      	movs	r3, #8
 8009edc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ede:	2308      	movs	r3, #8
 8009ee0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	0e5b      	lsrs	r3, r3, #25
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	f003 0307 	and.w	r3, r3, #7
 8009ef0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	0f5b      	lsrs	r3, r3, #29
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	f003 0307 	and.w	r3, r3, #7
 8009f00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f02:	7bbb      	ldrb	r3, [r7, #14]
 8009f04:	7b3a      	ldrb	r2, [r7, #12]
 8009f06:	4911      	ldr	r1, [pc, #68]	@ (8009f4c <UARTEx_SetNbDataToProcess+0x94>)
 8009f08:	5c8a      	ldrb	r2, [r1, r2]
 8009f0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f0e:	7b3a      	ldrb	r2, [r7, #12]
 8009f10:	490f      	ldr	r1, [pc, #60]	@ (8009f50 <UARTEx_SetNbDataToProcess+0x98>)
 8009f12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f14:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
 8009f22:	7b7a      	ldrb	r2, [r7, #13]
 8009f24:	4909      	ldr	r1, [pc, #36]	@ (8009f4c <UARTEx_SetNbDataToProcess+0x94>)
 8009f26:	5c8a      	ldrb	r2, [r1, r2]
 8009f28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f2c:	7b7a      	ldrb	r2, [r7, #13]
 8009f2e:	4908      	ldr	r1, [pc, #32]	@ (8009f50 <UARTEx_SetNbDataToProcess+0x98>)
 8009f30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f32:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009f3e:	bf00      	nop
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	0800a024 	.word	0x0800a024
 8009f50:	0800a02c 	.word	0x0800a02c

08009f54 <memset>:
 8009f54:	4402      	add	r2, r0
 8009f56:	4603      	mov	r3, r0
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d100      	bne.n	8009f5e <memset+0xa>
 8009f5c:	4770      	bx	lr
 8009f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f62:	e7f9      	b.n	8009f58 <memset+0x4>

08009f64 <__libc_init_array>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	4d0d      	ldr	r5, [pc, #52]	@ (8009f9c <__libc_init_array+0x38>)
 8009f68:	4c0d      	ldr	r4, [pc, #52]	@ (8009fa0 <__libc_init_array+0x3c>)
 8009f6a:	1b64      	subs	r4, r4, r5
 8009f6c:	10a4      	asrs	r4, r4, #2
 8009f6e:	2600      	movs	r6, #0
 8009f70:	42a6      	cmp	r6, r4
 8009f72:	d109      	bne.n	8009f88 <__libc_init_array+0x24>
 8009f74:	4d0b      	ldr	r5, [pc, #44]	@ (8009fa4 <__libc_init_array+0x40>)
 8009f76:	4c0c      	ldr	r4, [pc, #48]	@ (8009fa8 <__libc_init_array+0x44>)
 8009f78:	f000 f818 	bl	8009fac <_init>
 8009f7c:	1b64      	subs	r4, r4, r5
 8009f7e:	10a4      	asrs	r4, r4, #2
 8009f80:	2600      	movs	r6, #0
 8009f82:	42a6      	cmp	r6, r4
 8009f84:	d105      	bne.n	8009f92 <__libc_init_array+0x2e>
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f8c:	4798      	blx	r3
 8009f8e:	3601      	adds	r6, #1
 8009f90:	e7ee      	b.n	8009f70 <__libc_init_array+0xc>
 8009f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f96:	4798      	blx	r3
 8009f98:	3601      	adds	r6, #1
 8009f9a:	e7f2      	b.n	8009f82 <__libc_init_array+0x1e>
 8009f9c:	0800a03c 	.word	0x0800a03c
 8009fa0:	0800a03c 	.word	0x0800a03c
 8009fa4:	0800a03c 	.word	0x0800a03c
 8009fa8:	0800a040 	.word	0x0800a040

08009fac <_init>:
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fae:	bf00      	nop
 8009fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb2:	bc08      	pop	{r3}
 8009fb4:	469e      	mov	lr, r3
 8009fb6:	4770      	bx	lr

08009fb8 <_fini>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	bf00      	nop
 8009fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fbe:	bc08      	pop	{r3}
 8009fc0:	469e      	mov	lr, r3
 8009fc2:	4770      	bx	lr
